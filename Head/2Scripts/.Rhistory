ListOfSpeciesWithManySubst <- filter(cs, n >= quantile(n, ParamQuantileNumberOfSubst)) %>% select(Species) %>% as_vector()
MUT <- MUT %>% filter(Species %in% ListOfSpeciesWithManySubst)
##### FILTER: class
MUT = merge(MUT, Taxa, by = 'Species')  # some species disappears!!!! they are not in taxa file!
MUT = MUT[MUT$Class == 'Actinopteri',]  # Actinopteri   Mammalia
###### DERIVE MUTATIONAL SPECTRUM:
### NORMALIZATION of the 'NumberOfSynMutPerSpecies' by ancestral nucleotide count in the third position of four-fold synonymous substitutions:
SpeciesInMut = unique(MUT$Species); length(SpeciesInMut) # 1172
NUC = read.table('2_DERIVED/ATGC_counts_in_SYN_codons_with_full_gene.txt', header = TRUE)
NUC$Gene = gsub("(.*)\\.",'',NUC$Species)
NUC$Species = gsub("\\.(.*)",'',NUC$Species)
SpeciesInNuc = unique(NUC$Species); length(SpeciesInNuc)
MUT = merge(MUT,NUC, by = c("Species","Gene"))  # compare CountA.x and CountA.y  - they should be identical.
nrow(MUT) #
setdiff(SpeciesInMut,unique(MUT$Species))  #
EXTRACT = function(x) {first = unlist(strsplit(as.character(x),'_'))[1]; return(first);}; MUT$AncestralNuc = apply(as.matrix(MUT$Subs), 1, EXTRACT)
MUT$NumberOfSynMutPerSpecies = 1
MUT_A = MUT[MUT$AncestralNuc == 'A',]; MUT_T = MUT[MUT$AncestralNuc == 'T',]; MUT_G = MUT[MUT$AncestralNuc == 'G',]; MUT_C = MUT[MUT$AncestralNuc == 'C',] # 64145+123587+97657+128195=413584
MUT_A$NumberOfSynMutPerSpecies = MUT_A$NumberOfSynMutPerSpecies/MUT_A$CountA_Syn;
MUT_T$NumberOfSynMutPerSpecies = MUT_T$NumberOfSynMutPerSpecies/MUT_T$CountT_Syn;
MUT_G$NumberOfSynMutPerSpecies = MUT_G$NumberOfSynMutPerSpecies/MUT_G$CountG_Syn;
MUT_C$NumberOfSynMutPerSpecies = MUT_C$NumberOfSynMutPerSpecies/MUT_C$CountC_Syn;
MUT = rbind(MUT_A,MUT_T,MUT_G,MUT_C)
### COUNT THE TOTAL NUMBER OF NORMALIZED MUTATIONS PER SPECIES
# create a dataset with total number of mutations and with all 12 types of substitutions
AggTotalMutSpectrumPerSpecies = aggregate(MUT$NumberOfSynMutPerSpecies, by = list(MUT$Species), FUN = sum);
names(AggTotalMutSpectrumPerSpecies) = c('Species','TotalMutRate')
MutTypes = data.frame(VecOfNormalSubstitutions); names(MutTypes)=c('MutType')
nrow(AggTotalMutSpectrumPerSpecies)
AggTotalMutSpectrumPerSpecies = merge(AggTotalMutSpectrumPerSpecies,MutTypes)
nrow(AggTotalMutSpectrumPerSpecies)
# count total number of all types of substitutions and merge with dataset above
AggTotalMutSpectrumPerSpeciesPerMutType = aggregate(MUT$NumberOfSynMutPerSpecies, by = list(MUT$Species,MUT$Subs), FUN = sum);
names(AggTotalMutSpectrumPerSpeciesPerMutType) = c('Species','MutType','MutTypeRate')
nrow(AggTotalMutSpectrumPerSpeciesPerMutType) #
ALL = merge(AggTotalMutSpectrumPerSpecies,AggTotalMutSpectrumPerSpeciesPerMutType, by = c('Species','MutType'), all.x=TRUE)
ALL[is.na(ALL)]<-0   # some classes of substitutions are absent from some animals => they are transformed to zeroes.
#### SHOULD WE DELETE SPECIES WITH TOO MANY ZEROES?
ALL[ALL$MutTypeRate ==0,] %>% count(Species, sort = TRUE) -> cs; hist(cs$n, breaks = 50)
SpeciesWithTooManyZeroMutTypes = unique(cs[cs$n >= ParamNumberOfZeroes,]$Species); length(SpeciesWithTooManyZeroMutTypes) # 240 species to delete
ALL = ALL[!ALL$Species %in% SpeciesWithTooManyZeroMutTypes,]
ALL$Fraction = ALL$MutTypeRate/ALL$TotalMutRate; summary(ALL$Fraction)
###### create matrix for PCA:
AT = ALL[ALL$MutType == 'A_T',]; AT = AT[c(1,5)]; names(AT) = c('Species','AT'); AT = AT[order(AT$Species),]
AG = ALL[ALL$MutType == 'A_G',]; AG = AG[c(1,5)]; names(AG) = c('Species','AG'); AG = AG[order(AG$Species),]
AC = ALL[ALL$MutType == 'A_C',]; AC = AC[c(1,5)]; names(AC) = c('Species','AC'); AC = AC[order(AC$Species),]
TA = ALL[ALL$MutType == 'T_A',]; TA = TA[c(1,5)]; names(TA) = c('Species','TA'); TA = TA[order(TA$Species),]
TG = ALL[ALL$MutType == 'T_G',]; TG = TG[c(1,5)]; names(TG) = c('Species','TG'); TG = TG[order(TG$Species),]
TC = ALL[ALL$MutType == 'T_C',]; TC = TC[c(1,5)]; names(TC) = c('Species','TC'); TC = TC[order(TC$Species),]
CA = ALL[ALL$MutType == 'C_A',]; CA = CA[c(1,5)]; names(CA) = c('Species','CA'); CA = CA[order(CA$Species),]
CG = ALL[ALL$MutType == 'C_G',]; CG = CG[c(1,5)]; names(CG) = c('Species','CG'); CG = CG[order(CG$Species),]
CT = ALL[ALL$MutType == 'C_T',]; CT = CT[c(1,5)]; names(CT) = c('Species','CT'); CT = CT[order(CT$Species),]
GA = ALL[ALL$MutType == 'G_A',]; GA = GA[c(1,5)]; names(GA) = c('Species','GA'); GA = GA[order(GA$Species),]
GC = ALL[ALL$MutType == 'G_C',]; GC = GC[c(1,5)]; names(GC) = c('Species','GC'); GC = GC[order(GC$Species),]
GT = ALL[ALL$MutType == 'G_T',]; GT = GT[c(1,5)]; names(GT) = c('Species','GT'); GT = GT[order(GT$Species),]
###### PCA
MATRIX = cbind(AT,AG[,2],AC[,2],TA[,2],TG[,2],TC[,2],CA[,2],CG[,2],CT[,2],GA[,2],GC[,2],GT[,2]); names(MATRIX) = c('Species','AT','AG','AC','TA','TG','TC','CA','CG','CT','GA','GC','GT')
row.names(MATRIX)=MATRIX$Species
head(MATRIX)
matrix = MATRIX[,c(2:13)]
PCA = prcomp(matrix, center = TRUE, scale = ParamScaleOrNot) #FALSE) # I don't scale because we analyze the same units (fraction from MutSpec)
print(PCA)
summary(PCA)
MATRIX$Pca1 = PCA$x[,1]
MATRIX$Pca2 = PCA$x[,2]
MATRIX$Pca3 = PCA$x[,3]
MATRIX$Pca4 = PCA$x[,4]
MATRIX$Pca5 = PCA$x[,5]
MATRIX$Pca6 = PCA$x[,6]
MATRIX$Pca7 = PCA$x[,7]
MATRIX$Pca8 = PCA$x[,8]
MATRIX$Pca9 = PCA$x[,9]
MATRIX$Pca10 = PCA$x[,10]
MATRIX$Pca11 = PCA$x[,11]
MATRIX$Pca12 = PCA$x[,12]
MATRIX = merge(MATRIX,Taxa, by = 'Species', all.x = TRUE) # some animals are missing
MATRIX = merge(MATRIX,GenerTime, by = 'Species', all.x = TRUE) # some animals are missing
MATRIX = merge(MATRIX,AnAge, by = 'Species', all.x = TRUE)
MATRIX = merge(MATRIX,Temp, by = 'Species', all.x = TRUE)
nrow(MATRIX[is.na(MATRIX$Species),])
plot(MATRIX$Pca1,MATRIX$Pca2)
plot(MATRIX$Pca2,MATRIX$Pca3)
table(MATRIX$Class)
###### FIRST COMPONENT (only Mammals and Actinopteri are two big taxa which we have to analyze - they show that GA positively correlate with BMR:
boxplot(MATRIX[MATRIX$Class == 'Actinopteri',]$Pca1,MATRIX[MATRIX$Class == 'Amphibia',]$Pca1,MATRIX[MATRIX$Class == 'Squamata' | MATRIX$Class == 'Testudines' |  MATRIX$Class == 'Crocodylia',]$Pca1,MATRIX[MATRIX$Class == 'Mammalia',]$Pca1,MATRIX[MATRIX$Class == 'Aves',]$Pca1, notch = TRUE, outline = FALSE, varwidth = TRUE)
boxplot(MATRIX[MATRIX$Class == 'Actinopteri',]$GA,MATRIX[MATRIX$Class == 'Amphibia',]$GA,MATRIX[MATRIX$Class == 'Squamata' | MATRIX$Class == 'Testudines' |  MATRIX$Class == 'Crocodylia',]$GA,MATRIX[MATRIX$Class == 'Mammalia',]$GA,MATRIX[MATRIX$Class == 'Aves',]$GA, notch = TRUE, outline = FALSE, varwidth = TRUE)
# G>A in fishes positively correlate with BMR (probably BMR represent body temperature)
MATRIX[MATRIX$Class == 'Actinopteri',]$Species
MATRIX[MATRIX$Species == 'Thunnus_thynnus',]
nrow(MATRIX[MATRIX$Class == 'Actinopteri',]) # 470
setwd('/hdd/SCIENCE_PROJECTS_BODY/MITOCHONDRIA/MutSpectrum/2_DERIVED')
FISH = MATRIX[!is.na(MATRIX$Class) & MATRIX$Class == 'Actinopteri',]
FISH = FISH[order(FISH$GA),]
write.table(FISH, file = 'FISHES.txt')
nrow(MATRIX[MATRIX$Class == 'Actinopteri' & !is.na(MATRIX$Basal.metabolic.rate..watts.),])
MATRIX[MATRIX$Class == 'Actinopteri' & !is.na(MATRIX$Basal.metabolic.rate..watts.),]$Basal.metabolic.rate..watts.
MATRIX[MATRIX$Class == 'Actinopteri' & !is.na(MATRIX$Basal.metabolic.rate..watts.),]$Species
MATRIX[MATRIX$Class == 'Actinopteri' & !is.na(MATRIX$Basal.metabolic.rate..watts.),]$GA
cor.test(MATRIX[MATRIX$Class == 'Actinopteri',]$GA,MATRIX[MATRIX$Class == 'Actinopteri',]$Basal.metabolic.rate..watts., method = 'spearman') # (if min = 4 subst (quantile = 0.05); rho = 0.33; p = 0.023, N = 49)
plot(MATRIX[MATRIX$Class == 'Actinopteri',]$GA,MATRIX[MATRIX$Class == 'Actinopteri',]$Basal.metabolic.rate..watts.)
cor.test(MATRIX[MATRIX$Class == 'Actinopteri',]$GA,MATRIX[MATRIX$Class == 'Actinopteri',]$T..oC., method = 'spearman') # a bit negative with temperature
# G>A in mammals negatively correlate with BMR (probably BMR negatively correlate with temperature in mammals)
cor.test(MATRIX[MATRIX$Class == 'Mammalia',]$Adult.weight..g.,(MATRIX[MATRIX$Class == 'Mammalia',]$Metabolic.rate..W.), method = 'spearman') # super positive
cor.test(MATRIX[MATRIX$Class == 'Mammalia',]$Adult.weight..g.,MATRIX[MATRIX$Class == 'Mammalia',]$Temperature..K., method = 'spearman') # positive
cor.test(MATRIX[MATRIX$Class == 'Mammalia',]$Metabolic.rate..W.,MATRIX[MATRIX$Class == 'Mammalia',]$Temperature..K., method = 'spearman') # positive
cor.test(MATRIX[MATRIX$Class == 'Mammalia',]$GA,(MATRIX[MATRIX$Class == 'Mammalia',]$Metabolic.rate..W.), method = 'spearman') # nothing
cor.test(MATRIX[MATRIX$Class == 'Mammalia',]$GA,MATRIX[MATRIX$Class == 'Mammalia',]$Adult.weight..g., method = 'spearman') # nothing
cor.test(MATRIX[MATRIX$Class == 'Mammalia',]$GA,MATRIX[MATRIX$Class == 'Mammalia',]$Temperature..K., method = 'spearman') # nothing
cor.test(MATRIX[MATRIX$Class == 'Mammalia',]$GA,(MATRIX[MATRIX$Class == 'Mammalia',]$Metabolic.rate..W./MATRIX[MATRIX$Class == 'Mammalia',]$Adult.weight..g.), method = 'spearman') # positive
names(MATRIX)
plot(MATRIX[MATRIX$Class == 'Mammalia',]$GA,log2(MATRIX[MATRIX$Class == 'Mammalia',]$Metabolic.rate..W./MATRIX[MATRIX$Class == 'Mammalia',]$Adult.weight..g.)) # positive
cor.test(MATRIX[MATRIX$Class == 'Mammalia',]$Pca1,(MATRIX[MATRIX$Class == 'Mammalia',]$Metabolic.rate..W./MATRIX[MATRIX$Class == 'Mammalia',]$Adult.weight..g.), method = 'spearman') # positive
plot(MATRIX[MATRIX$Class == 'Mammalia',]$Pca1,log2(MATRIX[MATRIX$Class == 'Mammalia',]$Metabolic.rate..W./MATRIX[MATRIX$Class == 'Mammalia',]$Adult.weight..g.)) # positive
###### SECOND COMPONENT:
cor.test(MATRIX$Pca2,MATRIX$GenerationLength_d)
plot(MATRIX$Pca2,log2(MATRIX$GenerationLength_d))
cor.test(MATRIX$TC,MATRIX$GenerationLength_d)
cor.test(MATRIX[MATRIX$Class == 'Actinopteri',]$TC,MATRIX[MATRIX$Class == 'Actinopteri',]$Female.maturity..days., method = 'spearman')
cor.test(MATRIX[MATRIX$Class == 'Actinopteri',]$Pca2,MATRIX[MATRIX$Class == 'Actinopteri',]$Female.maturity..days., method = 'spearman')
plot(MATRIX[MATRIX$Class == 'Actinopteri',]$Pca2,MATRIX[MATRIX$Class == 'Actinopteri',]$Female.maturity..days.)
####################
#### FIND ECOLOGICAL INTERPRETATIONS OF PCs
####################
###### EXTREMES
MATRIX[MATRIX$Pca1 < quantile(MATRIX$Pca1,0.05),]$Species
MATRIX[MATRIX$Pca1 > quantile(MATRIX$Pca1,0.95),]$Species
MATRIX[MATRIX$Pca2 < quantile(MATRIX$Pca2,0.05),]$Species
MATRIX[MATRIX$Pca2 > quantile(MATRIX$Pca2,0.95),]$Species
MATRIX[MATRIX$Pca3 < quantile(MATRIX$Pca3,0.05),]$Species
MATRIX[MATRIX$Pca3 > quantile(MATRIX$Pca3,0.95),]$Species
###### GENERATION LENGTH
GenerTime = read.table('/hdd/SCIENCE_PROJECTS_BODY/MITOCHONDRIA/MutSpectrum/1_RAW/GenerationLenghtforAllMammals/GenerationLenghtforMammals.xlsx.txt', header = TRUE, sep = '\t')
GenerTime$Species = gsub(' ','_',GenerTime$Scientific_name)
GenerTime = GenerTime[,c(11,13)]
Test = merge(MATRIX,GenerTime)
cor.test(Test$Pca1,Test$GenerationLength_d, method = 'spearman') # no
cor.test(Test$Pca2,Test$GenerationLength_d, method = 'spearman') # super negative (-AG) -0.34
cor.test(Test$Pca3,Test$GenerationLength_d, method = 'spearman') # positive (+TC)       +0.26
cor.test(Test$Pca4,Test$GenerationLength_d, method = 'spearman') # no
cor.test(Test$Pca5,Test$GenerationLength_d, method = 'spearman') # no
####### AnAge
AnAge = read.table('1_RAW/anage_data.txt', header = TRUE, sep = '\t')
AnAge$Species = paste(AnAge$Genus,AnAge$Species, sep='_')
AnAge = AnAge[AnAge$Class == 'Mammalia',];
names(AnAge)
### Adult.weight..g.
AnAge1 = AnAge[,(names(AnAge) %in% c("Species","Adult.weight..g."))]; AnAge1 = AnAge1[!is.na(AnAge1[,2]),]
Test = merge(MATRIX,AnAge1); nrow(Test)
cor.test(Test$Pca1,Test[,19], method = 'spearman') # no
cor.test(Test$Pca2,Test[,19], method = 'spearman') # negative
cor.test(Test$Pca3,Test[,19], method = 'spearman') # positive
cor.test(Test$Pca4,Test[,19], method = 'spearman') # no
cor.test(Test$Pca5,Test[,19], method = 'spearman') # no
### Maximum.longevity..yrs.
AnAge1 = AnAge[,(names(AnAge) %in% c("Species","Maximum.longevity..yrs."))]; AnAge1 = AnAge1[!is.na(AnAge1[,2]),]
Test = merge(MATRIX,AnAge1); nrow(Test)
cor.test(Test$Pca1,Test[,19], method = 'spearman') # no
cor.test(Test$Pca2,Test[,19], method = 'spearman') # negative
cor.test(Test$Pca3,Test[,19], method = 'spearman') # positive
cor.test(Test$Pca4,Test[,19], method = 'spearman') # no
cor.test(Test$Pca5,Test[,19], method = 'spearman') # a bit positive (but unlikely survive multiple test correction)
### Female.maturity..days.
AnAge1 = AnAge[,(names(AnAge) %in% c("Species","Female.maturity..days."))]; AnAge1 = AnAge1[!is.na(AnAge1[,2]),]
Test = merge(MATRIX,AnAge1); nrow(Test)
cor.test(Test$Pca1,Test[,19], method = 'spearman') # no
cor.test(Test$Pca2,Test[,19], method = 'spearman') # negative
cor.test(Test$Pca3,Test[,19], method = 'spearman') # positive
cor.test(Test$Pca4,Test[,19], method = 'spearman') # no
cor.test(Test$Pca5,Test[,19], method = 'spearman') # no
### Weaning..days.
AnAge1 = AnAge[,(names(AnAge) %in% c("Species","Weaning..days."))]; AnAge1 = AnAge1[!is.na(AnAge1[,2]),]
Test = merge(MATRIX,AnAge1); nrow(Test)
cor.test(Test$Pca1,Test[,19], method = 'spearman') # no
cor.test(Test$Pca2,Test[,19], method = 'spearman') # negative
cor.test(Test$Pca3,Test[,19], method = 'spearman') # positive
cor.test(Test$Pca4,Test[,19], method = 'spearman') # no
cor.test(Test$Pca5,Test[,19], method = 'spearman') # no
### Birth.weight..g.
AnAge1 = AnAge[,(names(AnAge) %in% c("Species","Birth.weight..g."))]; AnAge1 = AnAge1[!is.na(AnAge1[,2]),]
Test = merge(MATRIX,AnAge1); nrow(Test)
cor.test(Test$Pca1,Test[,19], method = 'spearman') # no
cor.test(Test$Pca2,Test[,19], method = 'spearman') # negative
cor.test(Test$Pca3,Test[,19], method = 'spearman') # positive
cor.test(Test$Pca4,Test[,19], method = 'spearman') # no
cor.test(Test$Pca5,Test[,19], method = 'spearman') # a bit positive (unlikely will pass multiple test correction)
### Litters.Clutches.per.year
AnAge1 = AnAge[,(names(AnAge) %in% c("Species","Litters.Clutches.per.year"))]; AnAge1 = AnAge1[!is.na(AnAge1[,2]),]
Test = merge(MATRIX,AnAge1); nrow(Test)
cor.test(Test$Pca1,Test[,19], method = 'spearman') # no
cor.test(Test$Pca2,Test[,19], method = 'spearman') # positive
cor.test(Test$Pca3,Test[,19], method = 'spearman') # negative
cor.test(Test$Pca4,Test[,19], method = 'spearman') # no
cor.test(Test$Pca5,Test[,19], method = 'spearman') # no
### Litter.Clutch.size
AnAge1 = AnAge[,(names(AnAge) %in% c("Species","Litter.Clutch.size"))]; AnAge1 = AnAge1[!is.na(AnAge1[,2]),]
Test = merge(MATRIX,AnAge1); nrow(Test)
cor.test(Test$Pca1,Test[,19], method = 'spearman') # no
cor.test(Test$Pca2,Test[,19], method = 'spearman') # positive
cor.test(Test$Pca3,Test[,19], method = 'spearman') # negative
cor.test(Test$Pca4,Test[,19], method = 'spearman') # no
cor.test(Test$Pca5,Test[,19], method = 'spearman') # no
### Weaning.weight..g.
AnAge1 = AnAge[,(names(AnAge) %in% c("Species","Weaning.weight..g."))]; AnAge1 = AnAge1[!is.na(AnAge1[,2]),]
Test = merge(MATRIX,AnAge1); nrow(Test)
cor.test(Test$Pca1,Test[,19], method = 'spearman') # no
cor.test(Test$Pca2,Test[,19], method = 'spearman') # negative
cor.test(Test$Pca3,Test[,19], method = 'spearman') # no
cor.test(Test$Pca4,Test[,19], method = 'spearman') # no
cor.test(Test$Pca5,Test[,19], method = 'spearman') # no
### Metabolic.rate..W.
AnAge1 = AnAge[,(names(AnAge) %in% c("Species","Metabolic.rate..W."))]; AnAge1 = AnAge1[!is.na(AnAge1[,2]),]
Test = merge(MATRIX,AnAge1); nrow(Test)
cor.test(Test$Pca1,Test[,19], method = 'spearman') # no
cor.test(Test$Pca2,Test[,19], method = 'spearman') # no
cor.test(Test$Pca3,Test[,19], method = 'spearman') # no
cor.test(Test$Pca4,Test[,19], method = 'spearman') # no
cor.test(Test$Pca5,Test[,19], method = 'spearman') # no
### Temperature..K.
AnAge1 = AnAge[,(names(AnAge) %in% c("Species","Temperature..K."))]; AnAge1 = AnAge1[!is.na(AnAge1[,2]),]
Test = merge(MATRIX,AnAge1); nrow(Test)
cor.test(Test$Pca1,Test[,19], method = 'spearman') # no
cor.test(Test$Pca2,Test[,19], method = 'spearman') # no
cor.test(Test$Pca3,Test[,19], method = 'spearman') # no
cor.test(Test$Pca4,Test[,19], method = 'spearman') # no
cor.test(Test$Pca5,Test[,19], method = 'spearman') # no
### Growth.rate..1.days.
AnAge1 = AnAge[,(names(AnAge) %in% c("Species","Growth.rate..1.days."))]; AnAge1 = AnAge1[!is.na(AnAge1[,2]),]
Test = merge(MATRIX,AnAge1); nrow(Test)
cor.test(Test$Pca1,Test[,19], method = 'spearman') # no
cor.test(Test$Pca2,Test[,19], method = 'spearman') # no
cor.test(Test$Pca3,Test[,19], method = 'spearman') # no
cor.test(Test$Pca4,Test[,19], method = 'spearman') # no
cor.test(Test$Pca5,Test[,19], method = 'spearman') # no
###### HETEROTERMS
Hib = read.table('1_RAW/hibernation/tornew5.csv', header = TRUE, sep = ',')
Hib$Species = gsub(" ",'_',Hib$Species)
HibOnlySpecies = Hib[Hib$Type == 'HIB',]$Species; length(HibOnlySpecies)
DtOnlySpecies = Hib[Hib$Type == 'DT',]$Species; length(DtOnlySpecies)
HibAndDtSpecies = Hib[Hib$Type == 'HIB' || Hib$Type == 'DT',]$Species; length(HibAndDtSpecies)
boxplot(MATRIX[MATRIX$Species %in% HibOnlySpecies,]$Pca1,MATRIX[!MATRIX$Species %in% HibOnlySpecies,]$Pca1, notch = TRUE, names = c('HibOnlySpecies','Other'), ylab = 'PC1'); # !!!! HibSpecies have a bit lower Pc1
boxplot(MATRIX[MATRIX$Species %in% DtOnlySpecies,]$Pca1,MATRIX[!MATRIX$Species %in% DtOnlySpecies,]$Pca1, notch = TRUE, names = c('HibOnlySpecies','Other'), ylab = 'PC1');   # nothing
# control for body mass? they are small! # other tests - decreased BMR as compared to body mass - compare strong outliers (cold and hot)...; animals, which live more than should according to bosy mass (naked mole rat)
###### MARSUPIALS, BATS... AGAIN NEED NORMAL TAXONOMY !!!!!!!!
Marsupials = c(AnAge[AnAge$Order == 'Diprotodontia' | AnAge$Order == 'Didelphimorphia' | AnAge$Order == 'Dasyuromorphia',]$Species)
Placental = c(AnAge[AnAge$Order == 'Artiodactyla' | AnAge$Order == 'Cetacea' | AnAge$Order == 'Carnivora',]$Species)
boxplot(MATRIX[MATRIX$Species %in% Marsupials,]$Pca1,MATRIX[MATRIX$Species %in% Placental,]$Pca1, notch = TRUE); # !!!! HibSpecies have a bit lower Pc1
###### FIGURES:
MATRIX = merge(MATRIX,GenerTime)
MATRIX = MATRIX[order(MATRIX$GenerationLength_d),]
MATRIX$Col = c(rep('green',150),rep('gray',187),rep('red',150))
summary(PCA)
print(PCA)
pdf('4_FIGURES/PCA.pdf', width = 14, height = 14)
par(mfcol=c(2,3))
summary(PCA)
#plot(PCA)
plot(MATRIX$Pca1,MATRIX$Pca2), col = MATRIX$Col)
plot(MATRIX$Pca2,MATRIX$Pca3, col = MATRIX$Col)
# plot(PCA$x[,1],MATRIX$GenerationLength_d); cor.test(PCA$x[,1],MATRIX$GenerationLength_d, method = 'spearman') # nothing  - First mutagen signature! Body mass normalized BMR!
plot(MATRIX$Pca2,log2(MATRIX$GenerationLength_d)); cor.test(MATRIX$Pca2,MATRIX$GenerationLength_d, method = 'spearman')
plot(MATRIX$Pca3,log2(MATRIX$GenerationLength_d)); cor.test(MATRIX$Pca2,MATRIX$GenerationLength_d, method = 'spearman')
biplot(PCA, col = c('grey','black'), cex = 0.5)
biplot(PCA, choices=c(2,3), col = c('grey','black'), cex = 0.5) #  biplot(princomp(USArrests),choices=c(1,3))
dev.off()
####################
#### FIND DNA POLYMERAZE SIGNATURE (last PCs)!!!!!
####################
# LOGIC IS THE NEXT: first - third components are driven by temperature and ecology.
# other components are not driven by ecology, physiology... sow we need to subtract effect of the first three PC and get naked signature of DNA polymeraze!!!
# how to do it carefully?!
pdf('4_FIGURES/DnaPolymerazeSignature.pdf', width = 14, height = 14)
biplot(PCA, choices=c(4,5), col = c('grey','black'), cex = 0.5) #  biplot(princomp(USArrests),choices=c(1,3))
dev.off()
PCA$x # PC's
PCA$sdev # the eigenvalues (res$sdev) giving information on the magnitude of each PC,
PCA$rotation # and the loadings (res$rotation).
########### exercise with PCA and going back to data with all PCs - REMOVE something
par(mfrow=c(2,2))
PcaScale = prcomp(matrix, center = TRUE, scale = TRUE)
PcaScale$scale  # sd of each column from the original matrix: sd(matrix[,1])
PcaScale$center # mean of each column from the original matrix: mean(matrix[,1])
head(PcaScale$x)
start = 1; end = 12
BACK <- PcaScale$x[,start:end] %*% t(PcaScale$rotation[,start:end]) # reconstruct everything taking into account some PCs
BACK <- scale(BACK, center = FALSE , scale=1/PcaScale$scale) # divide by sd
BACK <- scale(BACK, center = -1 * PcaScale$center, scale=FALSE) #
gamma = data.frame(BACK);
barplot(c(mean(gamma$AT),mean(gamma$AG),mean(gamma$AC),mean(gamma$TA),mean(gamma$TG),mean(gamma$TC),mean(gamma$CA),mean(gamma$CG),mean(gamma$CT),mean(gamma$GA),mean(gamma$GC),mean(gamma$GT))  , names = c('AT','AG','AC','TA','TG','TC','CA','CG','CT','GA','GC','GT'), main = 'EXO')
PcaScale = prcomp(matrix, center = TRUE, scale = TRUE)
PcaScale$scale  # sd of each column from the original matrix: sd(matrix[,1])
PcaScale$center # mean of each column from the original matrix: mean(matrix[,1])
start = 1; end = 1
BACK <- PcaScale$x[,start:end] %*% t(PcaScale$rotation[,start:end])
BACK <- scale(BACK, center = FALSE , scale=1/PcaScale$scale)
BACK <- scale(BACK, center = -1 * PcaScale$center, scale=FALSE)
gamma = data.frame(BACK)
barplot(c(mean(gamma$AT),mean(gamma$AG),mean(gamma$AC),mean(gamma$TA),mean(gamma$TG),mean(gamma$TC),mean(gamma$CA),mean(gamma$CG),mean(gamma$CT),mean(gamma$GA),mean(gamma$GC),mean(gamma$GT))  , names = c('AT','AG','AC','TA','TG','TC','CA','CG','CT','GA','GC','GT'), main = 'EXO')
start = 4; end = 12
BACK <- PcaScale$x[,start:end] %*% t(PcaScale$rotation[,start:end])
BACK <- scale(BACK, center = FALSE , scale=1/PcaScale$scale)
BACK <- scale(BACK, center = -1 * PcaScale$center, scale=FALSE)
gamma = data.frame(BACK)
barplot(c(mean(gamma$AT),mean(gamma$AG),mean(gamma$AC),mean(gamma$TA),mean(gamma$TG),mean(gamma$TC),mean(gamma$CA),mean(gamma$CG),mean(gamma$CT),mean(gamma$GA),mean(gamma$GC),mean(gamma$GT))  , names = c('AT','AG','AC','TA','TG','TC','CA','CG','CT','GA','GC','GT'), main = 'EXO')
#####  COUNT NUCLEOTIDE CONTENT CAREFULLY (BODY/2Derived/polarizedbr_data => external + More Shallow => codons, 4fold nucl, FrA,T,G,C) => barplot?
#####  normalized average MutSpec (pie charts or 12 boxplots for each class)?
rm(list=ls(all=TRUE))
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.txt')
## filter set of species with more than minimal number of mutations (minimum is 15) for different settings
length(unique(MUT$Species))                                    # 2118
length(unique(MUT[MUT$NumOfSynMut >= 15,]$Species))            # 1560
length(unique(MUT[MUT$NumOfFourFoldMut >= 15,]$Species))       # 1631
length(unique(MUT[MUT$NumOfSynInCytB >= 15,]$Species))         # 1122
length(unique(MUT[MUT$NumOfFourFoldMutInCytB >= 15,]$Species)) # 1172
Mut = MUT[MUT$NumOfSynMut >= 15,]
#### generate MutSpec for each species
## get ancestral nucleotide
Mut$Subs = as.character(Mut$Subs)
TRIM<-function(x)	 {unlist(strsplit(x,'_'))[1]}
Mut$AncestralNuc = apply(as.matrix(Mut$Subs), 1 , FUN = TRIM)
## normalize by freq of ancestral nucleotide
Mut$Number = 1
A = Mut[Mut$AncestralNuc == 'A',]; Mut$Number = Mut$A/(Mut$A+Mut$T+Mut$G+Mut$C)
T = Mut[Mut$AncestralNuc == 'T',]; Mut$Number = Mut$T/(Mut$A+Mut$T+Mut$G+Mut$C)
G = Mut[Mut$AncestralNuc == 'G',]; Mut$Number = Mut$G/(Mut$A+Mut$T+Mut$G+Mut$C)
C = Mut[Mut$AncestralNuc == 'C',]; Mut$Number = Mut$C/(Mut$A+Mut$T+Mut$G+Mut$C)
Mut = rbind(A,T); Mut = rbind(Mut,G); Mut = rbind(Mut,C);
agg = aggregate(Mut$Number, by = list(Mut$Species,Mut$Subs), FUN = sum)
View(agg)
View(Mut)
#####  COUNT NUCLEOTIDE CONTENT CAREFULLY (BODY/2Derived/polarizedbr_data => external + More Shallow => codons, 4fold nucl, FrA,T,G,C) => barplot?
#####  normalized average MutSpec (pie charts or 12 boxplots for each class)?
rm(list=ls(all=TRUE))
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.txt')
## filter set of species with more than minimal number of mutations (minimum is 15) for different settings
length(unique(MUT$Species))                                    # 2118
length(unique(MUT[MUT$NumOfSynMut >= 15,]$Species))            # 1560
length(unique(MUT[MUT$NumOfFourFoldMut >= 15,]$Species))       # 1631
length(unique(MUT[MUT$NumOfSynInCytB >= 15,]$Species))         # 1122
length(unique(MUT[MUT$NumOfFourFoldMutInCytB >= 15,]$Species)) # 1172
Mut = MUT[MUT$NumOfSynMut >= 15,]
#### generate MutSpec for each species
## get ancestral nucleotide
Mut$Subs = as.character(Mut$Subs)
TRIM<-function(x)	 {unlist(strsplit(x,'_'))[1]}
Mut$AncestralNuc = apply(as.matrix(Mut$Subs), 1 , FUN = TRIM)
## normalize by freq of ancestral nucleotide
Mut$Number = 1
A = Mut[Mut$AncestralNuc == 'A',]; A$Number = A$A/(A$A+A$T+A$G+A$C)
T = Mut[Mut$AncestralNuc == 'T',]; T$Number = T$T/(T$A+T$T+T$G+T$C)
G = Mut[Mut$AncestralNuc == 'G',]; G$Number = G$G/(G$A+G$T+G$G+G$C)
C = Mut[Mut$AncestralNuc == 'C',]; C$Number = C$C/(C$A+C$T+C$G+C$C)
Mut = rbind(A,T); Mut = rbind(Mut,G); Mut = rbind(Mut,C);
agg = aggregate(Mut$Number, by = list(Mut$Species,Mut$Subs), FUN = sum)
View(agg)
View(agg)
names(agg)=c('Species','Subs','Freq')
VecOfSpecies = unique(agg$Species)
i = 1
Temp = agg[agg$Species == VecOfSpecies[i],]
View(Temp)
unique(Mut$Subs)
Template = data.frame(unique(Mut$Subs))
Template
View(Temp)
Template = data.frame(unique(Mut$Subs)); names(Template) = c(Subs); Template$Freg = 0;
Template = data.frame(unique(Mut$Subs)); names(Template) = c('Subs'); Template$Freg = 0;
VecOfSpecies = unique(agg$Species)
i = 1
Temp = agg[agg$Species == VecOfSpecies[i],]
Template$Species = VecOfSpecies[i]
Temp = rbind(Temp,Template)
View(Template)
Template = data.frame(unique(Mut$Subs)); names(Template) = c('Subs'); Template$Freq = 0;
VecOfSpecies = unique(agg$Species)
i = 1
Temp = agg[agg$Species == VecOfSpecies[i],]
Template$Species = VecOfSpecies[i]
Temp = rbind(Temp,Template)
View(Temp)
Temp = rbind(Temp,Template)
Temp = agg[agg$Species == VecOfSpecies[i],]
Template$Species = VecOfSpecies[i]
Temp = rbind(Temp,Template)
View(Temp)
test = t(Temp$Subs,Temp$Freq)
test = t(data.frame(Temp$Subs,Temp$Freq))
View(test)
Line = data.frame(VecOfSpecies[i])
View(Line)
Temp = agg[agg$Species == VecOfSpecies[i],]
ALL = sum(Temp$Freq)
ALL
Line = data.frame(VecOfSpecies[i], Temp[Temp$Subs == 'A_T',]$Freq/ALL)
View(Line)
i = 2
Temp = agg[agg$Species == VecOfSpecies[i],]
Line = data.frame(VecOfSpecies[i], Temp[Temp$Subs == 'A_T',]$Freq/ALL, Temp[Temp$Subs == 'A_G',]$Freq/ALL, Temp[Temp$Subs == 'A_C',]$Freq/ALL, Temp[Temp$Subs == 'T_A',]$Freq/ALL, Temp[Temp$Subs == 'T_G',]$Freq/ALL, Temp[Temp$Subs == 'T_C',]$Freq/ALL, Temp[Temp$Subs == 'G_A',]$Freq/ALL, Temp[Temp$Subs == 'G_T',]$Freq/ALL, Temp[Temp$Subs == 'G_C',]$Freq/ALL, Temp[Temp$Subs == 'C_A',]$Freq/ALL, Temp[Temp$Subs == 'C_T',]$Freq/ALL, Temp[Temp$Subs == 'C_G',]$Freq/ALL)
Template = data.frame(unique(Mut$Subs)); names(Template) = c('Subs'); Template$Freq = 0;
Temp = rbind(Temp,Template)
Temp = merge(Temp,Template, by = 'Subs')
View(Temp)
Temp = agg[agg$Species == VecOfSpecies[i],]
Temp = merge(Temp,Template, by = 'Subs', all = TRUE)
View(Temp)
Temp[is.na(Temp),] <- 0
Temp[is.na(Temp)] <- 0
Temp = agg[agg$Species == VecOfSpecies[i],]
Temp = merge(Temp,Template, by = 'Subs', all = TRUE)
Temp[is.na(Temp)] <- 0
View(Temp)
Temp = agg[agg$Species == VecOfSpecies[i],]
Temp = merge(Temp,Template, by = 'Subs', all = TRUE)
Temp[is.na(Temp)] <- 0
Template = data.frame(unique(Mut$Subs)); names(Template) = c('Subs'); Template$Freq = 0;
VecOfSpecies = unique(agg$Species)
i = 2
Temp = agg[agg$Species == VecOfSpecies[i],]
Template$Species = VecOfSpecies[i]
Temp = merge(Temp,Template, by = c('Subs','Species'), all = TRUE)
View(Temp)
Temp[is.na(Temp)] <- 0
Temp$Freq = Temp$Freq.x + Temp$Freq.y
ALL = sum(Temp$Freq)
Line = data.frame(VecOfSpecies[i], Temp[Temp$Subs == 'A_T',]$Freq/ALL, Temp[Temp$Subs == 'A_G',]$Freq/ALL, Temp[Temp$Subs == 'A_C',]$Freq/ALL, Temp[Temp$Subs == 'T_A',]$Freq/ALL, Temp[Temp$Subs == 'T_G',]$Freq/ALL, Temp[Temp$Subs == 'T_C',]$Freq/ALL, Temp[Temp$Subs == 'G_A',]$Freq/ALL, Temp[Temp$Subs == 'G_T',]$Freq/ALL, Temp[Temp$Subs == 'G_C',]$Freq/ALL, Temp[Temp$Subs == 'C_A',]$Freq/ALL, Temp[Temp$Subs == 'C_T',]$Freq/ALL, Temp[Temp$Subs == 'C_G',]$Freq/ALL)
View(Line)
names(Line)=c('Species','A_T','A_G','A_C','T_A','T_G','T_C','G_A','G_T','G_C','C_A','C_T','C_G')
View(Line)
#####  COUNT NUCLEOTIDE CONTENT CAREFULLY (BODY/2Derived/polarizedbr_data => external + More Shallow => codons, 4fold nucl, FrA,T,G,C) => barplot?
#####  normalized average MutSpec (pie charts or 12 boxplots for each class)?
rm(list=ls(all=TRUE))
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.txt')
## filter set of species with more than minimal number of mutations (minimum is 15) for different settings
length(unique(MUT$Species))                                    # 2118
length(unique(MUT[MUT$NumOfSynMut >= 15,]$Species))            # 1560
length(unique(MUT[MUT$NumOfFourFoldMut >= 15,]$Species))       # 1631
length(unique(MUT[MUT$NumOfSynInCytB >= 15,]$Species))         # 1122
length(unique(MUT[MUT$NumOfFourFoldMutInCytB >= 15,]$Species)) # 1172
Mut = MUT[MUT$NumOfSynMut >= 15,]
#### generate MutSpec for each species
## get ancestral nucleotide
Mut$Subs = as.character(Mut$Subs)
TRIM<-function(x)	 {unlist(strsplit(x,'_'))[1]}
Mut$AncestralNuc = apply(as.matrix(Mut$Subs), 1 , FUN = TRIM)
## normalize by freq of ancestral nucleotides
Mut$Number = 1
A = Mut[Mut$AncestralNuc == 'A',]; A$Number = A$A/(A$A+A$T+A$G+A$C)
T = Mut[Mut$AncestralNuc == 'T',]; T$Number = T$T/(T$A+T$T+T$G+T$C)
G = Mut[Mut$AncestralNuc == 'G',]; G$Number = G$G/(G$A+G$T+G$G+G$C)
C = Mut[Mut$AncestralNuc == 'C',]; C$Number = C$C/(C$A+C$T+C$G+C$C)
Mut = rbind(A,T); Mut = rbind(Mut,G); Mut = rbind(Mut,C);
agg = aggregate(Mut$Number, by = list(Mut$Species,Mut$Subs), FUN = sum)
names(agg)=c('Species','Subs','Freq')
## make vector of 12 Subs for each species
Template = data.frame(unique(Mut$Subs)); names(Template) = c('Subs'); Template$Freq = 0;
VecOfSpecies = unique(agg$Species)
for (i in 1:length(VecOfSpecies))
{ # i = 2
Temp = agg[agg$Species == VecOfSpecies[i],]
Template$Species = VecOfSpecies[i]
Temp = merge(Temp,Template, by = c('Subs','Species'), all = TRUE)
Temp[is.na(Temp)] <- 0
Temp$Freq = Temp$Freq.x + Temp$Freq.y
ALL = sum(Temp$Freq)
Line = data.frame(VecOfSpecies[i], Temp[Temp$Subs == 'A_T',]$Freq/ALL, Temp[Temp$Subs == 'A_G',]$Freq/ALL, Temp[Temp$Subs == 'A_C',]$Freq/ALL, Temp[Temp$Subs == 'T_A',]$Freq/ALL, Temp[Temp$Subs == 'T_G',]$Freq/ALL, Temp[Temp$Subs == 'T_C',]$Freq/ALL, Temp[Temp$Subs == 'G_A',]$Freq/ALL, Temp[Temp$Subs == 'G_T',]$Freq/ALL, Temp[Temp$Subs == 'G_C',]$Freq/ALL, Temp[Temp$Subs == 'C_A',]$Freq/ALL, Temp[Temp$Subs == 'C_T',]$Freq/ALL, Temp[Temp$Subs == 'C_G',]$Freq/ALL)
names(Line)=c('Species','A_T','A_G','A_C','T_A','T_G','T_C','G_A','G_T','G_C','C_A','C_T','C_G')
if (i == 1) {Final = Line}
if (i >  1) {Final = rbind(Final,Line)}
}
View(Final)
View(MUT)
Mut = MUT[(MUT$NumOfSynMut + MUT$NumOfFourFoldMut) >= 15,]
#####  COUNT NUCLEOTIDE CONTENT CAREFULLY (BODY/2Derived/polarizedbr_data => external + More Shallow => codons, 4fold nucl, FrA,T,G,C) => barplot?
#####  normalized average MutSpec (pie charts or 12 boxplots for each class)?
rm(list=ls(all=TRUE))
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.txt')
## filter set of species with more than minimal number of mutations (minimum is 15) for different settings
length(unique(MUT$Species))                                    # 2118
length(unique(MUT[MUT$NumOfSynMut >= 15,]$Species))            # 1560
length(unique(MUT[MUT$NumOfFourFoldMut >= 15,]$Species))       # 1631
length(unique(MUT[MUT$NumOfSynInCytB >= 15,]$Species))         # 1122
length(unique(MUT[MUT$NumOfFourFoldMutInCytB >= 15,]$Species)) # 1172
Mut = MUT[(MUT$NumOfSynMut + MUT$NumOfFourFoldMut) >= 15,]
View(Mut)
Mut$Subs = as.character(Mut$Subs)
TRIM<-function(x)	 {unlist(strsplit(x,'_'))[1]}
Mut$AncestralNuc = apply(as.matrix(Mut$Subs), 1 , FUN = TRIM)
## normalize by freq of ancestral nucleotides
Mut$Number = 1
A = Mut[Mut$AncestralNuc == 'A',]; A$Number = A$A/(A$A+A$T+A$G+A$C)
T = Mut[Mut$AncestralNuc == 'T',]; T$Number = T$T/(T$A+T$T+T$G+T$C)
G = Mut[Mut$AncestralNuc == 'G',]; G$Number = G$G/(G$A+G$T+G$G+G$C)
C = Mut[Mut$AncestralNuc == 'C',]; C$Number = C$C/(C$A+C$T+C$G+C$C)
Mut = rbind(A,T); Mut = rbind(Mut,G); Mut = rbind(Mut,C);
agg = aggregate(Mut$Number, by = list(Mut$Species,Mut$Subs), FUN = sum)
names(agg)=c('Species','Subs','Freq')
## make vector of 12 Subs for each species
Template = data.frame(unique(Mut$Subs)); names(Template) = c('Subs'); Template$Freq = 0;
VecOfSpecies = unique(agg$Species)
for (i in 1:length(VecOfSpecies))
{ # i = 2
Temp = agg[agg$Species == VecOfSpecies[i],]
Template$Species = VecOfSpecies[i]
Temp = merge(Temp,Template, by = c('Subs','Species'), all = TRUE)
Temp[is.na(Temp)] <- 0
Temp$Freq = Temp$Freq.x + Temp$Freq.y
ALL = sum(Temp$Freq)
Line = data.frame(VecOfSpecies[i], Temp[Temp$Subs == 'A_T',]$Freq/ALL, Temp[Temp$Subs == 'A_G',]$Freq/ALL, Temp[Temp$Subs == 'A_C',]$Freq/ALL, Temp[Temp$Subs == 'T_A',]$Freq/ALL, Temp[Temp$Subs == 'T_G',]$Freq/ALL, Temp[Temp$Subs == 'T_C',]$Freq/ALL, Temp[Temp$Subs == 'G_A',]$Freq/ALL, Temp[Temp$Subs == 'G_T',]$Freq/ALL, Temp[Temp$Subs == 'G_C',]$Freq/ALL, Temp[Temp$Subs == 'C_A',]$Freq/ALL, Temp[Temp$Subs == 'C_T',]$Freq/ALL, Temp[Temp$Subs == 'C_G',]$Freq/ALL)
names(Line)=c('Species','A_T','A_G','A_C','T_A','T_G','T_C','G_A','G_T','G_C','C_A','C_T','C_G')
if (i == 1) {Final = Line}
if (i >  1) {Final = rbind(Final,Line)}
}
write.table(Final, '../../Body/3Results/VertebratePolymorphisms.MutSpecData.AllSynMutationsAllGenes.txt', quote = FALSE, row.names = FALSE)
