CodonsVec1 = CodonsVec1[1:(length(CodonsVec1) - CodonsToDeleteAtTheEnd)]
AminoSeqVec = AminoSeqVec[1:(length(AminoSeqVec) - CodonsToDeleteAtTheEnd)]
if (CodonsToDeleteInTheBeginning > 0)
{
CodonsVec1 = CodonsVec1[-c(1:CodonsToDeleteInTheBeginning)]
AminoSeqVec = AminoSeqVec[-c(1:CodonsToDeleteInTheBeginning)]
}
# warnings() : In 1:(length(CodonsVec1) - CodonsToDeleteAtTheEnd) :   numerical expression has 2 elements: only the first used
# warnings() : In 1:(length(AminoSeqVec) - CodonsToDeleteAtTheEnd) :  numerical expression has 2 elements: only the first used
# warnings() : In rbind(Final, Line) : number of columns of result is not a multiple of vector length (arg 2)
TranslationalTest = data.frame(CodonsVec1,AminoSeqVec)
### translate them
Temp = as.character(TranslationalTest$CodonsVec1)
Temp = gsub("TTT|TTC",'F',Temp)
Temp = gsub("TTA|TTG|CTT|CTC|CTA|CTG",'L',Temp)
Temp = gsub("ATT|ATC",'I',Temp)
Temp = gsub("ATG|ATA",'M',Temp)
Temp = gsub("GTT|GTC|GTA|GTG",'V',Temp)
Temp = gsub("TCT|TCC|TCA|TCG|AGT|AGC",'S',Temp)
Temp = gsub("CCT|CCC|CCA|CCG",'P',Temp)
Temp = gsub("ACT|ACC|ACA|ACG",'T',Temp)
Temp = gsub("GCT|GCC|GCA|GCG",'A',Temp)
Temp = gsub("TAT|TAC",'Y',Temp)
Temp = gsub("AGA|AGG|TAA|TAG",'*',Temp)
Temp = gsub("CAT|CAC",'H',Temp)
Temp = gsub("CAA|CAG",'Q',Temp)
Temp = gsub("AAT|AAC",'N',Temp)
Temp = gsub("AAA|AAG",'K',Temp)
Temp = gsub("GAT|GAC",'D',Temp)
Temp = gsub("GAA|GAG",'E',Temp)
Temp = gsub("TGT|TGC",'C',Temp)
Temp = gsub("TGG|TGA",'W',Temp)
Temp = gsub("CGT|CGC|CGA|CGG",'R',Temp)
Temp = gsub("GGT|GGC|GGA|GGG",'G',Temp)
TranslationalTest$TranslatedAa = Temp
if (nrow(TranslationalTest[TranslationalTest$TranslatedAa != TranslationalTest$AminoSeqVec,]) == 0) # should be zero
{
VecOfAllCodons = c('TTT','TTC','TTA','TTG','CTT','CTC','CTA','CTG','ATT','ATC','ATG','ATA','GTT','GTC','GTA','GTG','TCT','TCC','TCA','TCG','AGT','AGC','CCT','CCC','CCA','CCG','ACT','ACC','ACA','ACG','GCT','GCC','GCA','GCG','TAT','TAC','AGA','AGG','TAA','TAG','CAT','CAC','CAA','CAG','AAT','AAC','AAA','AAG','GAT','GAC','GAA','GAG','TGT','TGC','TGG','TGA','CGT','CGC','CGA','CGG','GGT','GGC','GGA','GGG')
CodonUsage = c(VecOfAllCodons,as.character(TranslationalTest$CodonsVec1))  # concatenate out 64 codons with everything that we have in real sequence
CU = data.frame(table(CodonUsage)); CU$Freq = CU$Freq-1  # delete one because we used the whole length of all 64 codons before -> will transform to zero
NamesOfCodons = as.character(CU$CodonUsage)
Line = c(species, gene, CodonsToDeleteInTheBeginning, CodonsToDeleteAtTheEnd, paste(AminoSeqVec,collapse=''), paste(CodonsVec1,collapse=''), CU$Freq)
Final = rbind(Final,Line)
}
}
}
}
Final = c()
for (step in 1:10000) # nrow(WholeGenomes))
{ # step = 3
if (WholeGenomes$Quality[step] == 1)
{
species = as.character(WholeGenomes$Species[step]) # species = 'Corvus_cornix_cornix'
gene = as.character(WholeGenomes$Gene[step])       # gene = 'COX3'
StartOverlap = OverlapFinal[OverlapFinal$species == species & OverlapFinal$gene == gene,]$IfStartIsOverlapped
EndOverlap = OverlapFinal[OverlapFinal$species == species & OverlapFinal$gene == gene,]$IfEndIsOverlapped
if (length(StartOverlap)>1) {print(paste('ACHTUNG',species,gene,sep=' '))}
if (length(EndOverlap)>1)   {print(paste('ACHTUNG',species,gene,sep=' '))}
if(StartOverlap > 0) {CodonsToDeleteInTheBeginning = 0}
if(EndOverlap > 0) {CodonsToDeleteAtTheEnd = 0}
if(StartOverlap < 0) {CodonsToDeleteInTheBeginning = round(StartOverlap*(-1)/3)}
if(EndOverlap < 0)   {CodonsToDeleteAtTheEnd =  round(EndOverlap*(-1)/3)}
############ translate codons to aminoacids
### make triplets
Codons = as.character(WholeGenomes$Codons[step])
AminoSeq = as.character(WholeGenomes$ModifiedAmino[step])
AminoSeqVec = unlist(strsplit(AminoSeq,''))
CodonsVec = unlist(strsplit(Codons,''))
StartNuc = 1
CodonsVec1 = c()
# if length(CodonsVec)/3 == integer
for (i in 1:(length(CodonsVec)/3))
{
CodonsVec1 = c(CodonsVec1,paste(CodonsVec[StartNuc : (StartNuc+2)],collapse = ''))
StartNuc = StartNuc+3
}
### trim AminoSeqVec and CodonsVec1 if there is an overlap (at the end or at the beginning)
CodonsVec1 = CodonsVec1[1:(length(CodonsVec1) - CodonsToDeleteAtTheEnd)]
AminoSeqVec = AminoSeqVec[1:(length(AminoSeqVec) - CodonsToDeleteAtTheEnd)]
if (CodonsToDeleteInTheBeginning > 0)
{
CodonsVec1 = CodonsVec1[-c(1:CodonsToDeleteInTheBeginning)]
AminoSeqVec = AminoSeqVec[-c(1:CodonsToDeleteInTheBeginning)]
}
# warnings() : In 1:(length(CodonsVec1) - CodonsToDeleteAtTheEnd) :   numerical expression has 2 elements: only the first used
# warnings() : In 1:(length(AminoSeqVec) - CodonsToDeleteAtTheEnd) :  numerical expression has 2 elements: only the first used
# warnings() : In rbind(Final, Line) : number of columns of result is not a multiple of vector length (arg 2)
TranslationalTest = data.frame(CodonsVec1,AminoSeqVec)
### translate them
Temp = as.character(TranslationalTest$CodonsVec1)
Temp = gsub("TTT|TTC",'F',Temp)
Temp = gsub("TTA|TTG|CTT|CTC|CTA|CTG",'L',Temp)
Temp = gsub("ATT|ATC",'I',Temp)
Temp = gsub("ATG|ATA",'M',Temp)
Temp = gsub("GTT|GTC|GTA|GTG",'V',Temp)
Temp = gsub("TCT|TCC|TCA|TCG|AGT|AGC",'S',Temp)
Temp = gsub("CCT|CCC|CCA|CCG",'P',Temp)
Temp = gsub("ACT|ACC|ACA|ACG",'T',Temp)
Temp = gsub("GCT|GCC|GCA|GCG",'A',Temp)
Temp = gsub("TAT|TAC",'Y',Temp)
Temp = gsub("AGA|AGG|TAA|TAG",'*',Temp)
Temp = gsub("CAT|CAC",'H',Temp)
Temp = gsub("CAA|CAG",'Q',Temp)
Temp = gsub("AAT|AAC",'N',Temp)
Temp = gsub("AAA|AAG",'K',Temp)
Temp = gsub("GAT|GAC",'D',Temp)
Temp = gsub("GAA|GAG",'E',Temp)
Temp = gsub("TGT|TGC",'C',Temp)
Temp = gsub("TGG|TGA",'W',Temp)
Temp = gsub("CGT|CGC|CGA|CGG",'R',Temp)
Temp = gsub("GGT|GGC|GGA|GGG",'G',Temp)
TranslationalTest$TranslatedAa = Temp
if (nrow(TranslationalTest[TranslationalTest$TranslatedAa != TranslationalTest$AminoSeqVec,]) == 0) # should be zero
{
VecOfAllCodons = c('TTT','TTC','TTA','TTG','CTT','CTC','CTA','CTG','ATT','ATC','ATG','ATA','GTT','GTC','GTA','GTG','TCT','TCC','TCA','TCG','AGT','AGC','CCT','CCC','CCA','CCG','ACT','ACC','ACA','ACG','GCT','GCC','GCA','GCG','TAT','TAC','AGA','AGG','TAA','TAG','CAT','CAC','CAA','CAG','AAT','AAC','AAA','AAG','GAT','GAC','GAA','GAG','TGT','TGC','TGG','TGA','CGT','CGC','CGA','CGG','GGT','GGC','GGA','GGG')
CodonUsage = c(VecOfAllCodons,as.character(TranslationalTest$CodonsVec1))  # concatenate out 64 codons with everything that we have in real sequence
CU = data.frame(table(CodonUsage)); CU$Freq = CU$Freq-1  # delete one because we used the whole length of all 64 codons before -> will transform to zero
NamesOfCodons = as.character(CU$CodonUsage)
Line = c(species, gene, CodonsToDeleteInTheBeginning, CodonsToDeleteAtTheEnd, paste(AminoSeqVec,collapse=''), paste(CodonsVec1,collapse=''), CU$Freq)
Final = rbind(Final,Line)
}
}
}
WholeGenomes = WholeGenomes[WholeGenomes$Species %in% VecOfAnalyzedSpecies,]; nrow(WholeGenomes) # 50415
SpeciesTable = data.frame(table(WholeGenomes$Species))
SpeciesWithNot13 = unique(SpeciesTable[SpeciesTable$Freq != 13,]$Var1)
SpeciesWithNot13
length(SpeciesWithNot13) # 3871
SpeciesWithNot13
nrow(WholeGenomes)
WholeGenomes = WholeGenomes[!WholeGenomes$Species %in% SpeciesWithNot13,]; nrow(WholeGenomes)
Final = c()
for (step in 1:10000) # nrow(WholeGenomes))
{ # step = 3
if (WholeGenomes$Quality[step] == 1)
{
species = as.character(WholeGenomes$Species[step]) # species = 'Corvus_cornix_cornix'
gene = as.character(WholeGenomes$Gene[step])       # gene = 'COX3'
StartOverlap = OverlapFinal[OverlapFinal$species == species & OverlapFinal$gene == gene,]$IfStartIsOverlapped
EndOverlap = OverlapFinal[OverlapFinal$species == species & OverlapFinal$gene == gene,]$IfEndIsOverlapped
if (length(StartOverlap)>1) {print(paste('ACHTUNG',species,gene,sep=' '))}
if (length(EndOverlap)>1)   {print(paste('ACHTUNG',species,gene,sep=' '))}
if(StartOverlap > 0) {CodonsToDeleteInTheBeginning = 0}
if(EndOverlap > 0) {CodonsToDeleteAtTheEnd = 0}
if(StartOverlap < 0) {CodonsToDeleteInTheBeginning = round(StartOverlap*(-1)/3)}
if(EndOverlap < 0)   {CodonsToDeleteAtTheEnd =  round(EndOverlap*(-1)/3)}
############ translate codons to aminoacids
### make triplets
Codons = as.character(WholeGenomes$Codons[step])
AminoSeq = as.character(WholeGenomes$ModifiedAmino[step])
AminoSeqVec = unlist(strsplit(AminoSeq,''))
CodonsVec = unlist(strsplit(Codons,''))
StartNuc = 1
CodonsVec1 = c()
# if length(CodonsVec)/3 == integer
for (i in 1:(length(CodonsVec)/3))
{
CodonsVec1 = c(CodonsVec1,paste(CodonsVec[StartNuc : (StartNuc+2)],collapse = ''))
StartNuc = StartNuc+3
}
### trim AminoSeqVec and CodonsVec1 if there is an overlap (at the end or at the beginning)
CodonsVec1 = CodonsVec1[1:(length(CodonsVec1) - CodonsToDeleteAtTheEnd)]
AminoSeqVec = AminoSeqVec[1:(length(AminoSeqVec) - CodonsToDeleteAtTheEnd)]
if (CodonsToDeleteInTheBeginning > 0)
{
CodonsVec1 = CodonsVec1[-c(1:CodonsToDeleteInTheBeginning)]
AminoSeqVec = AminoSeqVec[-c(1:CodonsToDeleteInTheBeginning)]
}
# warnings() : In 1:(length(CodonsVec1) - CodonsToDeleteAtTheEnd) :   numerical expression has 2 elements: only the first used
# warnings() : In 1:(length(AminoSeqVec) - CodonsToDeleteAtTheEnd) :  numerical expression has 2 elements: only the first used
# warnings() : In rbind(Final, Line) : number of columns of result is not a multiple of vector length (arg 2)
TranslationalTest = data.frame(CodonsVec1,AminoSeqVec)
### translate them
Temp = as.character(TranslationalTest$CodonsVec1)
Temp = gsub("TTT|TTC",'F',Temp)
Temp = gsub("TTA|TTG|CTT|CTC|CTA|CTG",'L',Temp)
Temp = gsub("ATT|ATC",'I',Temp)
Temp = gsub("ATG|ATA",'M',Temp)
Temp = gsub("GTT|GTC|GTA|GTG",'V',Temp)
Temp = gsub("TCT|TCC|TCA|TCG|AGT|AGC",'S',Temp)
Temp = gsub("CCT|CCC|CCA|CCG",'P',Temp)
Temp = gsub("ACT|ACC|ACA|ACG",'T',Temp)
Temp = gsub("GCT|GCC|GCA|GCG",'A',Temp)
Temp = gsub("TAT|TAC",'Y',Temp)
Temp = gsub("AGA|AGG|TAA|TAG",'*',Temp)
Temp = gsub("CAT|CAC",'H',Temp)
Temp = gsub("CAA|CAG",'Q',Temp)
Temp = gsub("AAT|AAC",'N',Temp)
Temp = gsub("AAA|AAG",'K',Temp)
Temp = gsub("GAT|GAC",'D',Temp)
Temp = gsub("GAA|GAG",'E',Temp)
Temp = gsub("TGT|TGC",'C',Temp)
Temp = gsub("TGG|TGA",'W',Temp)
Temp = gsub("CGT|CGC|CGA|CGG",'R',Temp)
Temp = gsub("GGT|GGC|GGA|GGG",'G',Temp)
TranslationalTest$TranslatedAa = Temp
if (nrow(TranslationalTest[TranslationalTest$TranslatedAa != TranslationalTest$AminoSeqVec,]) == 0) # should be zero
{
VecOfAllCodons = c('TTT','TTC','TTA','TTG','CTT','CTC','CTA','CTG','ATT','ATC','ATG','ATA','GTT','GTC','GTA','GTG','TCT','TCC','TCA','TCG','AGT','AGC','CCT','CCC','CCA','CCG','ACT','ACC','ACA','ACG','GCT','GCC','GCA','GCG','TAT','TAC','AGA','AGG','TAA','TAG','CAT','CAC','CAA','CAG','AAT','AAC','AAA','AAG','GAT','GAC','GAA','GAG','TGT','TGC','TGG','TGA','CGT','CGC','CGA','CGG','GGT','GGC','GGA','GGG')
CodonUsage = c(VecOfAllCodons,as.character(TranslationalTest$CodonsVec1))  # concatenate out 64 codons with everything that we have in real sequence
CU = data.frame(table(CodonUsage)); CU$Freq = CU$Freq-1  # delete one because we used the whole length of all 64 codons before -> will transform to zero
NamesOfCodons = as.character(CU$CodonUsage)
Line = c(species, gene, CodonsToDeleteInTheBeginning, CodonsToDeleteAtTheEnd, paste(AminoSeqVec,collapse=''), paste(CodonsVec1,collapse=''), CU$Freq)
Final = rbind(Final,Line)
}
}
}
rm(list=ls(all=TRUE))
############ read aminoacid and codon sequences
unzip("../../Body/2Derived/AllGenesCodons.zip", exdir = "../../Body/2Derived/")
WholeGenomes = read.table("../../Body/2Derived/AllGenesCodons.csv", header = TRUE, sep = '\t')
if (file.exists("../../Body/2Derived/AllGenesCodons.csv")) file.remove("../../Body/2Derived/AllGenesCodons.csv")
### read coordinates and find overlaps (round number of codons/aminoacids to delete at the end or in the beginning)
Overlaps = read.table("../../Body/2Derived/cds_coords.csv", header = TRUE, sep = '\t')
Overlaps = Overlaps[order(Overlaps$species,Overlaps$start),]
VecOfSpecies = unique(Overlaps$species); length(VecOfSpecies)
for (i in 1:length(VecOfSpecies))
{ # i = 1
temp = Overlaps[Overlaps$species == as.character(VecOfSpecies[i]),]
if (nrow(temp) == 13) # if there is no 13 protein coding genes - we don't trust this annotation and suspect complete crap in the annotation
{
temp$NextStart = c(temp$start[-1],50000); temp$IfEndIsOverlapped = temp$NextStart - temp$end
temp$PreviousEnd   = c(0,temp$end[-nrow(temp)]); temp$IfStartIsOverlapped = temp$start - temp$PreviousEnd
temp = temp[,grepl("species|gene|start|end|IfEndIsOverlapped|IfStartIsOverlapped",names(temp))]
if (i ==1) {OverlapFinal = temp}
if (i > 1) {OverlapFinal = rbind(OverlapFinal,temp)}
}
}
StrangeSpecies = unique(OverlapFinal[OverlapFinal$IfEndIsOverlapped < -1000 |  OverlapFinal$IfStartIsOverlapped < -1000,]$species) # Corvus_cornix_cornix
head(OverlapFinal[OverlapFinal$species %in% StrangeSpecies,],13)
#species gene start   end IfEndIsOverlapped IfStartIsOverlapped
#45863 Corvus_cornix_cornix COX3     0 16946            -16150                   0
#45864 Corvus_cornix_cornix  ND3   796  1146                73              -16150
#45865 Corvus_cornix_cornix ND4L  1219  1516                -7                  73
#45866 Corvus_cornix_cornix  ND4  1509  2887               205                  -7
#45867 Corvus_cornix_cornix  ND5  3092  4910                10                 205
#45868 Corvus_cornix_cornix CytB  4920  6063               161                  10
#45869 Corvus_cornix_cornix  ND6  6224  6746              4233                 161
#45870 Corvus_cornix_cornix  ND1 10979 11957               226                4233
#45871 Corvus_cornix_cornix  ND2 12183 13224               362                 226
#45872 Corvus_cornix_cornix COX1 13586 15137               147                 362
#45873 Corvus_cornix_cornix COX2 15284 15968                72                 147
#45874 Corvus_cornix_cornix ATP8 16040 16208               -10                  72
#45875 Corvus_cornix_cornix ATP6 16198 16882             33118                 -10
VecOfAnalyzedSpecies = unique(OverlapFinal$species); length(VecOfAnalyzedSpecies)  # list of species with annotated 13 genes (no less, no more)
VecOfAnalyzedSpecies = setdiff(VecOfAnalyzedSpecies,StrangeSpecies)                # without strange ones (Corvus_cornix_cornix has a mistake in COX annotation)
#### analyses of WholeGenomes:
nrow(WholeGenomes) # 51523
WholeGenomes = WholeGenomes[WholeGenomes$Species %in% VecOfAnalyzedSpecies,]; nrow(WholeGenomes) # 50415
SpeciesTable = data.frame(table(WholeGenomes$Species))
SpeciesWithNot13 = unique(SpeciesTable[SpeciesTable$Freq != 13,]$Var1); length(SpeciesWithNot13) # 87
WholeGenomes = WholeGenomes[!WholeGenomes$Species %in% SpeciesWithNot13,]; nrow(WholeGenomes)
Final = c()
for (step in 1:nrow(WholeGenomes))
{ # step = 3
if (WholeGenomes$Quality[step] == 1)
{
species = as.character(WholeGenomes$Species[step]) # species = 'Corvus_cornix_cornix'
gene = as.character(WholeGenomes$Gene[step])       # gene = 'COX3'
StartOverlap = OverlapFinal[OverlapFinal$species == species & OverlapFinal$gene == gene,]$IfStartIsOverlapped
EndOverlap = OverlapFinal[OverlapFinal$species == species & OverlapFinal$gene == gene,]$IfEndIsOverlapped
if (length(StartOverlap)>1) {print(paste('ACHTUNG',species,gene,sep=' '))}
if (length(EndOverlap)>1)   {print(paste('ACHTUNG',species,gene,sep=' '))}
if(StartOverlap > 0) {CodonsToDeleteInTheBeginning = 0}
if(EndOverlap > 0) {CodonsToDeleteAtTheEnd = 0}
if(StartOverlap < 0) {CodonsToDeleteInTheBeginning = round(StartOverlap*(-1)/3)}
if(EndOverlap < 0)   {CodonsToDeleteAtTheEnd =  round(EndOverlap*(-1)/3)}
############ translate codons to aminoacids
### make triplets
Codons = as.character(WholeGenomes$Codons[step])
AminoSeq = as.character(WholeGenomes$ModifiedAmino[step])
AminoSeqVec = unlist(strsplit(AminoSeq,''))
CodonsVec = unlist(strsplit(Codons,''))
StartNuc = 1
CodonsVec1 = c()
# if length(CodonsVec)/3 == integer
for (i in 1:(length(CodonsVec)/3))
{
CodonsVec1 = c(CodonsVec1,paste(CodonsVec[StartNuc : (StartNuc+2)],collapse = ''))
StartNuc = StartNuc+3
}
### trim AminoSeqVec and CodonsVec1 if there is an overlap (at the end or at the beginning)
CodonsVec1 = CodonsVec1[1:(length(CodonsVec1) - CodonsToDeleteAtTheEnd)]
AminoSeqVec = AminoSeqVec[1:(length(AminoSeqVec) - CodonsToDeleteAtTheEnd)]
if (CodonsToDeleteInTheBeginning > 0)
{
CodonsVec1 = CodonsVec1[-c(1:CodonsToDeleteInTheBeginning)]
AminoSeqVec = AminoSeqVec[-c(1:CodonsToDeleteInTheBeginning)]
}
# warnings() : In 1:(length(CodonsVec1) - CodonsToDeleteAtTheEnd) :   numerical expression has 2 elements: only the first used
# warnings() : In 1:(length(AminoSeqVec) - CodonsToDeleteAtTheEnd) :  numerical expression has 2 elements: only the first used
# warnings() : In rbind(Final, Line) : number of columns of result is not a multiple of vector length (arg 2)
TranslationalTest = data.frame(CodonsVec1,AminoSeqVec)
### translate them
Temp = as.character(TranslationalTest$CodonsVec1)
Temp = gsub("TTT|TTC",'F',Temp)
Temp = gsub("TTA|TTG|CTT|CTC|CTA|CTG",'L',Temp)
Temp = gsub("ATT|ATC",'I',Temp)
Temp = gsub("ATG|ATA",'M',Temp)
Temp = gsub("GTT|GTC|GTA|GTG",'V',Temp)
Temp = gsub("TCT|TCC|TCA|TCG|AGT|AGC",'S',Temp)
Temp = gsub("CCT|CCC|CCA|CCG",'P',Temp)
Temp = gsub("ACT|ACC|ACA|ACG",'T',Temp)
Temp = gsub("GCT|GCC|GCA|GCG",'A',Temp)
Temp = gsub("TAT|TAC",'Y',Temp)
Temp = gsub("AGA|AGG|TAA|TAG",'*',Temp)
Temp = gsub("CAT|CAC",'H',Temp)
Temp = gsub("CAA|CAG",'Q',Temp)
Temp = gsub("AAT|AAC",'N',Temp)
Temp = gsub("AAA|AAG",'K',Temp)
Temp = gsub("GAT|GAC",'D',Temp)
Temp = gsub("GAA|GAG",'E',Temp)
Temp = gsub("TGT|TGC",'C',Temp)
Temp = gsub("TGG|TGA",'W',Temp)
Temp = gsub("CGT|CGC|CGA|CGG",'R',Temp)
Temp = gsub("GGT|GGC|GGA|GGG",'G',Temp)
TranslationalTest$TranslatedAa = Temp
if (nrow(TranslationalTest[TranslationalTest$TranslatedAa != TranslationalTest$AminoSeqVec,]) == 0) # should be zero
{
VecOfAllCodons = c('TTT','TTC','TTA','TTG','CTT','CTC','CTA','CTG','ATT','ATC','ATG','ATA','GTT','GTC','GTA','GTG','TCT','TCC','TCA','TCG','AGT','AGC','CCT','CCC','CCA','CCG','ACT','ACC','ACA','ACG','GCT','GCC','GCA','GCG','TAT','TAC','AGA','AGG','TAA','TAG','CAT','CAC','CAA','CAG','AAT','AAC','AAA','AAG','GAT','GAC','GAA','GAG','TGT','TGC','TGG','TGA','CGT','CGC','CGA','CGG','GGT','GGC','GGA','GGG')
CodonUsage = c(VecOfAllCodons,as.character(TranslationalTest$CodonsVec1))  # concatenate out 64 codons with everything that we have in real sequence
CU = data.frame(table(CodonUsage)); CU$Freq = CU$Freq-1  # delete one because we used the whole length of all 64 codons before -> will transform to zero
NamesOfCodons = as.character(CU$CodonUsage)
Line = c(species, gene, CodonsToDeleteInTheBeginning, CodonsToDeleteAtTheEnd, paste(AminoSeqVec,collapse=''), paste(CodonsVec1,collapse=''), CU$Freq)
Final = rbind(Final,Line)
}
}
}
# warnings()
Names = c('Species','Gene', 'CodonsToDeleteInTheBeginning', 'CodonsToDeleteAtTheEnd', 'AminoNoOverlap', 'CodonsNoOverlap', NamesOfCodons)
Final = as.data.frame(Final)
names(Final) = Names
Final <- data.frame(lapply(Final, as.character), stringsAsFactors=FALSE) # transform data to the character
## count the number of A T G C in neutral positions of each gene (8 synon fourlfold codons)
Final$NeutralA = as.numeric(as.character(Final$CTA[1])) + as.numeric(Final$GTA) + as.numeric(Final$TCA) + as.numeric(Final$CCA)  + as.numeric(Final$ACA)  + as.numeric(Final$GCA)  + as.numeric(Final$CGA)  + as.numeric(Final$GGA)
Final$NeutralT = as.numeric(Final$CTT) + as.numeric(Final$GTT) + as.numeric(Final$TCT) + as.numeric(Final$CCT)  + as.numeric(Final$ACT)  + as.numeric(Final$GCT)  + as.numeric(Final$CGT)  + as.numeric(Final$GGT)
Final$NeutralG = as.numeric(Final$CTG) + as.numeric(Final$GTG) + as.numeric(Final$TCG) + as.numeric(Final$CCG)  + as.numeric(Final$ACG)  + as.numeric(Final$GCG)  + as.numeric(Final$CGG)  + as.numeric(Final$GGG)
Final$NeutralC = as.numeric(Final$CTC) + as.numeric(Final$GTC) + as.numeric(Final$TCC) + as.numeric(Final$CCC)  + as.numeric(Final$ACC)  + as.numeric(Final$GCC)  + as.numeric(Final$CGC)  + as.numeric(Final$GGC)
## filter out the species with less than 13 well translated protein coding genes
TBL = data.frame(table(Final$Species)); nrow(TBL)         # 3871 = some ot them don't have 13 high quality annotated genes => we will delete them
SpeciesWith13 = TBL[TBL$Freq == 13,]$Var1; length(SpeciesWith13) # 3596
Final = Final[Final$Species %in% SpeciesWith13,]; nrow(Final)/13  # 3596   3453
## merge with taxonomy
# warnings()
unzip("../../Body/2Derived/full_table.zip", exdir = "../../Body/2Derived/")
Taxa = read.table("../../Body/2Derived/full_table.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/2Derived/full_table.txt")) file.remove("../../Body/2Derived/full_table.txt")
Taxa = Taxa[,c(1,2)]
names(Taxa)=c('Species','Taxonomy')
length(unique(Taxa$Species))
nrow(Final)
Final = merge(Final,Taxa)
nrow(Final)/13  # 3453
## derive class from taxonomy
Final$Class = 'SOLYANKA';
for (i in 1:nrow(Final))
{
if (length(grep('Mammalia', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'Mammalia'; }
if (length(grep('Amphibia', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'Amphibia'; }
if (length(grep('Actinopterygii', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'Actinopterygii'; }
if (length(grep('Aves', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'Aves'; }
if (length(grep('Lepidosauria', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'Reptilia'; }
if (length(grep('Testudines', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'Reptilia'; }
if (length(grep('Crocodylia', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'Reptilia'; }
if (length(grep('Dipnoi', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'AncientFish'; }
if (length(grep('Coelacanthiformes', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'AncientFish'; }
if (length(grep('Cyclostomata', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'AncientFish'; }
if (length(grep('Chondrichthyes', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'AncientFish'; }
if (length(grep('Cephalochordata', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'AncientFish'; }
if (length(grep('Tunicata', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'AncientFish'; }
}
table(Final$Class)
## print it out, zip and delete unzipped file
write.table(Final, "../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", sep = '\t', row.names = FALSE, quote = FALSE)
zip(zipfile = "../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", files = "../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
nrow(Final)/13 # 3453 species
View(Final)
rm(list=ls(all=TRUE))  # remove everything from R memory (old variables, datasets...)
wd <- getwd()
wd_in = gsub('Head/2Scripts','Body/1Raw/pipeline_trees', wd)
wd_out = gsub('Head/2Scripts','Body/2Derived/POLARIZEDBR_DATA_ML', wd) #SWITCH to MP-prefix if MPanalysis data
dir.create (wd_out)
setwd(wd_in)
wd_in
rm(list=ls(all=TRUE))  # remove everything from R memory (old variables, datasets...)
wd <- getwd()
rm(list=ls(all=TRUE))
rm(list=ls(all=TRUE))
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/2Derived/AllGenesCodons.csv", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
rm(list=ls(all=TRUE))
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
names(SynNuc)
View(SynNuc)
################## COMPARE A T G C nucleotides between taxa / genes: Proper taxa; warm/cold-blooded taxa; all genes, 13 genes separately
################################
rm(list=ls(all=TRUE))
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
# SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE)
names(SynNuc)
### make ND6 complementary:
NotND6 = SynNuc[SynNuc$Gene != 'ND6',]
ND6 = SynNuc[SynNuc$Gene == 'ND6',]
A = ND6$NeutralT
T = ND6$NeutralA
G = ND6$NeutralC
C = ND6$NeutralG
ND6$NeutralA = A
ND6$NeutralT = T
ND6$NeutralG = G
ND6$NeutralC = C
SynNuc = rbind(NotND6,ND6)
### count fraction of nucleotides
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$TAXON = SynNuc$Class
VecOfTaxa = unique(SynNuc$TAXON)
VecOfTaxa
table(SynNuc$TAXON)/13
SynNuc$Number = 1
AGG = aggregate(SynNuc$Number, by = list(SynNuc$Species), FUN = sum)
VecOfGoodSpecies = AGG[AGG$x == 13,]$Group.1
length(VecOfGoodSpecies)
nrow(SynNuc) # 50310
SynNuc = SynNuc[SynNuc$Species %in% VecOfGoodSpecies,]
nrow(SynNuc) # 49842
table(SynNuc$TAXON)/13
SynNuc$TAXON = ordered(SynNuc$TAXON, levels = c('AncientFish','Actinopterygii','Amphibia','Reptilia','Mammalia','Aves'))
SynNuc$Gene =  ordered(SynNuc$Gene, levels = c('COX1','COX2','ATP8','ATP6','COX3','ND3','ND4L','ND4','ND5','ND6','CytB', 'ND1','ND2'))
SynNuc = SynNuc[order(SynNuc$TAXON,SynNuc$Gene),]
pdf("../../Body/4Figures/WholeGenomeAnalyses.AtgcBetweenTaxaNoOverlap.R.01.pdf", height = 20, width = 50)
# G - grey  rgb(0.1,0.1,0.1,0.1)
# A - red   rgb(1,0.1,0.1,0.1)
# T - blue  rgb(0.1,0.1,1,0.1)
# C - green rgb(0.1,1,0.1,0.1)
ColG = rgb(0.1,0.1,0.1,0.2)
ColT = rgb(0.1,0.1,1,0.2)
ColC = rgb(0.1,1,0.1,0.2)
ColA = rgb(1,0.1,0.1,0.2)
TitleActinopterygii = paste('Actinopterygii, N = ',nrow(SynNuc[SynNuc$TAXON == 'Actinopterygii',])/13, sep = '')
TitleAmphibia = paste('Amphibia, N = ',nrow(SynNuc[SynNuc$TAXON == 'Amphibia',])/13, sep = '')
TitleReptilia = paste('Reptilia, N = ',nrow(SynNuc[SynNuc$TAXON == 'Reptilia',])/13, sep = '')
TitleMammalia = paste('Mammalia, N = ',nrow(SynNuc[SynNuc$TAXON == 'Mammalia',])/13, sep = '')
TitleAves = paste('Aves, N = ',nrow(SynNuc[SynNuc$TAXON == 'Aves',])/13, sep = '')
### aggregate nucleotide count per each species and calculate fraction per all 13 protein-coding genes
SYN = aggregate(list(SynNuc$NeutralA,SynNuc$NeutralT,SynNuc$NeutralG,SynNuc$NeutralC), by = list(SynNuc$Species, SynNuc$Class, SynNuc$TAXON, SynNuc$Taxonomy), FUN = sum)
names(SYN) = c('Species', 'Class', 'TAXON', 'Taxonomy','NeutralA','NeutralT','NeutralG','NeutralC')
SYN$FrA = SYN$NeutralA / (SYN$NeutralA + SYN$NeutralT + SYN$NeutralG + SYN$NeutralC)
SYN$FrT = SYN$NeutralT / (SYN$NeutralA + SYN$NeutralT + SYN$NeutralG + SYN$NeutralC)
SYN$FrG = SYN$NeutralG / (SYN$NeutralA + SYN$NeutralT + SYN$NeutralG + SYN$NeutralC)
SYN$FrC = SYN$NeutralC / (SYN$NeutralA + SYN$NeutralT + SYN$NeutralG + SYN$NeutralC)
par(mfrow=c(1,5))
par(cex.main = 4)
par(cex.axis = 3)
par(oma = c(1, 1, 1, 1))
boxplot(SYN[SYN$TAXON == 'Actinopterygii',]$FrG, SYN[SYN$TAXON == 'Actinopterygii',]$FrT, SYN[SYN$TAXON == 'Actinopterygii',]$FrC, SYN[SYN$TAXON == 'Actinopterygii',]$FrA, notch = TRUE, outline = FALSE, las = 1, col = c(ColG, ColT, ColC, ColA), main = TitleActinopterygii, ylim = c(0,0.65), names = c('G','T','C','A')); abline(h=0.25, col = 'red', lt = 2)
boxplot(SYN[SYN$TAXON == 'Amphibia',]$FrG, SYN[SYN$TAXON == 'Amphibia',]$FrT, SYN[SYN$TAXON == 'Amphibia',]$FrC, SYN[SYN$TAXON == 'Amphibia',]$FrA, notch = TRUE, outline = FALSE, las = 1, col = c(ColG, ColT, ColC, ColA), main = TitleAmphibia, ylim = c(0,0.65), names = c('G','T','C','A'));                               abline(h=0.25, col = 'red', lt = 2)
boxplot(SYN[SYN$TAXON == 'Reptilia',]$FrG, SYN[SYN$TAXON == 'Reptilia',]$FrT, SYN[SYN$TAXON == 'Reptilia',]$FrC, SYN[SYN$TAXON == 'Reptilia',]$FrA, notch = TRUE, outline = FALSE, las = 1, col = c(ColG, ColT, ColC, ColA), main = TitleReptilia, ylim = c(0,0.65), names = c('G','T','C','A'));                               abline(h=0.25, col = 'red', lt = 2)
boxplot(SYN[SYN$TAXON == 'Mammalia',]$FrG, SYN[SYN$TAXON == 'Mammalia',]$FrT, SYN[SYN$TAXON == 'Mammalia',]$FrC, SYN[SYN$TAXON == 'Mammalia',]$FrA, notch = TRUE, outline = FALSE, las = 1, col = c(ColG, ColT, ColC, ColA), main = TitleMammalia, ylim = c(0,0.65), names = c('G','T','C','A'));                               abline(h=0.25, col = 'red', lt = 2)
boxplot(SYN[SYN$TAXON == 'Aves',]$FrG, SYN[SYN$TAXON == 'Aves',]$FrT, SYN[SYN$TAXON == 'Aves',]$FrC, SYN[SYN$TAXON == 'Aves',]$FrA, notch = TRUE, outline = FALSE, las = 1, col = c(ColG, ColT, ColC, ColA), main = TitleAves, ylim = c(0,0.65), names = c('G','T','C','A'));                                                   abline(h=0.25, col = 'red', lt = 2)
wilcox.test(SYN[SYN$TAXON == 'Amphibia',]$FrT, SYN[SYN$TAXON == 'Amphibia',]$FrC) # 0.04
wilcox.test(SYN[SYN$TAXON == 'Aves',]$FrC, SYN[SYN$TAXON == 'Aves',]$FrA) #
par(mfrow=c(1,4))
par(oma = c(14, 3, 0, 0))
boxplot(SYN[SYN$TAXON == 'Actinopterygii' | SYN$TAXON == 'Amphibia' | SYN$TAXON == 'Reptilia',]$FrG,SYN[SYN$TAXON == 'Mammalia' | SYN$TAXON == 'Aves',]$FrG, notch = TRUE, outline = FALSE, las = 2, col = c(ColG), main = 'Fraction of G in vertebrate classes', names = c('Cold-blooded','Warm-blooded'), ylim = c(0,0.15)); abline(h=0.25, col = 'red', lt = 2)
boxplot(SYN[SYN$TAXON == 'Actinopterygii',]$FrG,  SYN[SYN$TAXON == 'Amphibia',]$FrG, SYN[SYN$TAXON == 'Reptilia',]$FrG,SYN[SYN$TAXON == 'Mammalia',]$FrG,SYN[SYN$TAXON == 'Aves',]$FrG, notch = TRUE, outline = FALSE, las = 2, col = c(ColG), main = 'Fraction of G in vertebrate classes', names = c('Actinopterygii','Amphibia','Reptilia','Mammalia','Aves'), ylim = c(0,0.15)); abline(h=0.25, col = 'red', lt = 2)
# boxplot(SYN[grepl('Monotremata',SYN$Taxonomy),]$FrG,  SYN[grepl('Eutheria',SYN$Taxonomy),]$FrG, notch = TRUE, outline = FALSE, las = 2, col = c(ColG), main = 'Fraction of G in mammals', ylim = c(0,0.15), names = c('Monotremata','Eutheria')); abline(h=0.25, col = 'red', lt = 2)
# wilcox.test(SYN[grepl('Monotremata',SYN$Taxonomy),]$FrG,SYN[grepl('Eutheria',SYN$Taxonomy),]$FrG, alternative =  'greater')
wilcox.test(SYN[SYN$TAXON == 'Actinopterygii' | SYN$TAXON == 'Amphibia' | SYN$TAXON == 'Reptilia',]$FrG,SYN[SYN$TAXON == 'Mammalia' | SYN$TAXON == 'Aves',]$FrG) # 2.2e-16
wilcox.test(SYN[SYN$TAXON == 'Actinopterygii',]$FrG,  SYN[SYN$TAXON == 'Amphibia',]$FrG) # 1.431e-13
wilcox.test(SYN[SYN$TAXON == 'Amphibia',]$FrG,  SYN[SYN$TAXON == 'Reptilia',]$FrG)       # 6.518e-05
wilcox.test(SYN[SYN$TAXON == 'Reptilia',]$FrG,  SYN[SYN$TAXON == 'Mammalia',]$FrG)       # 0.003575
wilcox.test(SYN[SYN$TAXON == 'Mammalia',]$FrG,  SYN[SYN$TAXON == 'Aves',]$FrG)           # 0.1997
par(mfrow=c(2,2))
par(cex.main = 4)
par(cex.axis = 2)
boxplot(FrA ~ TAXON, data = SynNuc,  notch = TRUE, outline = FALSE, las = 1, col = c('dark blue','blue','orange','green','red','brown'), main = 'FrA'); abline(h=0.2, col = 'red', lt = 2)
boxplot(FrT ~ TAXON, data = SynNuc,  notch = TRUE, outline = FALSE, las = 1, col = c('dark blue','blue','orange','green','red','brown'), main = 'FrT'); abline(h=0.2, col = 'red', lt = 2)
boxplot(FrG ~ TAXON, data = SynNuc,  notch = TRUE, outline = FALSE, las = 1, col = c('dark blue','blue','orange','green','red','brown'), main = 'FrG'); abline(h=0.2, col = 'red', lt = 2)
boxplot(FrC ~ TAXON, data = SynNuc,  notch = TRUE, outline = FALSE, las = 1, col = c('dark blue','blue','orange','green','red','brown'), main = 'FrC'); abline(h=0.2, col = 'red', lt = 2)
par(mfrow=c(1,1))
par(oma = c(12, 0, 0, 0)) # increae space for bottom lines
boxplot(FrA ~ Gene*TAXON, data = SynNuc,  notch = TRUE, outline = FALSE, las = 2, col = c(rep('dark blue',13),rep('blue',13),rep('orange',13),rep('green',13),rep('red',13),rep('brown',13)), main = 'FrA'); abline(h=0.2, col = 'red', lt = 2)
boxplot(FrT ~ Gene*TAXON, data = SynNuc,  notch = TRUE, outline = FALSE, las = 2, col = c(rep('dark blue',13),rep('blue',13),rep('orange',13),rep('green',13),rep('red',13),rep('brown',13)), main = 'FrT'); abline(h=0.2, col = 'red', lt = 2)
boxplot(FrG ~ Gene*TAXON, data = SynNuc,  notch = TRUE, outline = FALSE, las = 2, col = c(rep('dark blue',13),rep('blue',13),rep('orange',13),rep('green',13),rep('red',13),rep('brown',13)), main = 'FrG'); abline(h=0.2, col = 'red', lt = 2)
boxplot(FrC ~ Gene*TAXON, data = SynNuc,  notch = TRUE, outline = FALSE, las = 2, col = c(rep('dark blue',13),rep('blue',13),rep('orange',13),rep('green',13),rep('red',13),rep('brown',13)), main = 'FrC'); abline(h=0.2, col = 'red', lt = 2)
boxplot(FrA ~ TAXON*Gene, data = SynNuc,  notch = TRUE, outline = FALSE, las = 2, col = c(rep(c('dark blue','blue','orange','green','red','brown'),6)), main = 'FrA'); abline(h=0.2, col = 'red', lt = 2)
boxplot(FrT ~ TAXON*Gene, data = SynNuc,  notch = TRUE, outline = FALSE, las = 2, col = c(rep(c('dark blue','blue','orange','green','red','brown'),6)), main = 'FrT'); abline(h=0.2, col = 'red', lt = 2)
boxplot(FrG ~ TAXON*Gene, data = SynNuc,  notch = TRUE, outline = FALSE, las = 2, col = c(rep(c('dark blue','blue','orange','green','red','brown'),6)), main = 'FrG'); abline(h=0.2, col = 'red', lt = 2)
boxplot(FrC ~ TAXON*Gene, data = SynNuc,  notch = TRUE, outline = FALSE, las = 2, col = c(rep(c('dark blue','blue','orange','green','red','brown'),6)), main = 'FrC'); abline(h=0.2, col = 'red', lt = 2)
dev.off()
##
wilcox.test(SYN[SYN$TAXON == 'Amphibia',]$FrT, SYN[SYN$TAXON == 'Amphibia',]$FrC) # 0.04
wilcox.test(SYN[SYN$TAXON == 'Aves',]$FrC, SYN[SYN$TAXON == 'Aves',]$FrA) #
boxplot(SYN[SYN$TAXON == 'Actinopterygii' | SYN$TAXON == 'Amphibia' | SYN$TAXON == 'Reptilia',]$FrG,SYN[SYN$TAXON == 'Mammalia' | SYN$TAXON == 'Aves',]$FrG, notch = TRUE, outline = FALSE, las = 2, col = c(ColG), main = 'Fraction of G in vertebrate classes', names = c('Cold-blooded','Warm-blooded'), ylim = c(0,0.15)); abline(h=0.25, col = 'red', lt = 2)
boxplot(SYN[SYN$TAXON == 'Actinopterygii',]$FrG,  SYN[SYN$TAXON == 'Amphibia',]$FrG, SYN[SYN$TAXON == 'Reptilia',]$FrG,SYN[SYN$TAXON == 'Mammalia',]$FrG,SYN[SYN$TAXON == 'Aves',]$FrG, notch = TRUE, outline = FALSE, las = 2, col = c(ColG), main = 'Fraction of G in vertebrate classes', names = c('Actinopterygii','Amphibia','Reptilia','Mammalia','Aves'), ylim = c(0,0.15)); abline(h=0.25, col = 'red', lt = 2)
wilcox.test(SYN[SYN$TAXON == 'Actinopterygii' | SYN$TAXON == 'Amphibia' | SYN$TAXON == 'Reptilia',]$FrG,SYN[SYN$TAXON == 'Mammalia' | SYN$TAXON == 'Aves',]$FrG) # 2.2e-16
wilcox.test(SYN[SYN$TAXON == 'Actinopterygii',]$FrG,  SYN[SYN$TAXON == 'Amphibia',]$FrG) # 1.431e-13
wilcox.test(SYN[SYN$TAXON == 'Amphibia',]$FrG,  SYN[SYN$TAXON == 'Reptilia',]$FrG)       # 6.518e-05
wilcox.test(SYN[SYN$TAXON == 'Reptilia',]$FrG,  SYN[SYN$TAXON == 'Mammalia',]$FrG)       # 0.003575
wilcox.test(SYN[SYN$TAXON == 'Mammalia',]$FrG,  SYN[SYN$TAXON == 'Aves',]$FrG)           # 0.1997
