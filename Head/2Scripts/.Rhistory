tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
data = AGG[which(as.character(AGG$Species) %in% tree$tip.label),]
# data$GenerationLength_d = log2(data$GenerationLength_d)  # I added log of generation length
df_vec <- as.character(AGG$Species)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
data = data[-597,] # It is duplicate
row.names(data) = data$Species
tree2 <- drop.tip(tree, b)
View(data)
data = AGG[which(as.character(AGG$Species) %in% tree$tip.label),]
# data$GenerationLength_d = log2(data$GenerationLength_d)  # I added log of generation length
df_vec <- as.character(AGG$Species)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
data = data[-597,] # It is duplicate
row.names(data) = data$Species
tree2 <- drop.tip(tree, b)
data = AGG[which(as.character(AGG$Species) %in% tree$tip.label),]
########### question 1: which nucleotides better correlate with GT: log2(GT) = 11 - 0.29*scale(FrT) + 0.33*scale(FrC) (in line with our mutational spectrum result that T->C correlates with generation time)
AGG = aggregate(list(SynNucGT$FrA,SynNucGT$FrT,SynNucGT$FrG,SynNucGT$FrC), by = list(SynNucGT$Species,SynNucGT$GenerationLength_d), FUN = mean)
names(AGG) = c('Species','GenerationLength_d','FrA','FrT','FrG','FrC')
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
data = AGG[which(as.character(AGG$Species) %in% tree$tip.label),]
# data$GenerationLength_d = log2(data$GenerationLength_d)  # I added log of generation length
df_vec <- as.character(AGG$Species)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
data = data[-597,] # It is duplicate
row.names(data) = data$Species
tree2 <- drop.tip(tree, b)
TempData = data[, -1]
p_load(tibble, dplyr, magrittr, purrr)
contrasts <- TempData %>%
#  select(GenerationLength_d, FrA, FrT, FrG, FrC) %>%
mutate_if(is.numeric, log2) %>%
map(pic, tree2)
summary(pic(log2(TempData$GenerationLength_d), tree2)) == summary(contrasts$GenerationLength_d)
summary(pic(log2(TempData$GenerationLength_d), tree2))
summary(TempData$GenerationLength_d)
summary(TempData$FrA)
summary(TempData$FrT)
summary(TempData$FrG)
summary(TempData$FrC)
contrasts2 <- as.data.frame(apply(TempData, 2, pic, tree2))
names(contrasts2) = names(TempData)
contrasts2
summary(contrasts2$GenerationLength_d)
pic(log2(TempData$GenerationLength_d), tree2)
summary(pic(log2(TempData$GenerationLength_d), tree2))
summary(pic(TempData$FrA, tree2))
Rep = read.table('../../Body/3Results/ecoreps.csv', sep = ';', header = TRUE)
Rep = read.table('../../../ComparativeGenomics/Body/3Results/ecoreps.csv', sep = ';', header = TRUE)
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
data = Rep[which(as.character(Rep$spece) %in% tree$tip.label),]
row.names(data) = data$spece
df_vec <- as.character(Rep$spece)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
tree2 <- drop.tip(tree, b)
contrasts <- data %>%
select(generlen, TLOfADRRreal, TLOfADRR1) %>%
mutate_if(is.numeric, log2) %>%
map(pic, tree2)
summary(contrasts$generlen)
AGG = aggregate(list(SynNucGT$FrA,SynNucGT$FrT,SynNucGT$FrG,SynNucGT$FrC), by = list(SynNucGT$Species,SynNucGT$GenerationLength_d), FUN = mean)
names(AGG) = c('Species','GenerationLength_d','FrA','FrT','FrG','FrC')
TempData$GenerationLength_d = log2(TempData$GenerationLength_d)
contrasts2 <- as.data.frame(apply(TempData, 2, pic, tree2))
summary(TempData$GenerationLength_d)
TempData = data[, -1]
data = AGG[which(as.character(AGG$Species) %in% tree$tip.label),]
# data$GenerationLength_d = log2(data$GenerationLength_d)  # I added log of generation length
df_vec <- as.character(AGG$Species)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
data = data[-597,] # It is duplicate
row.names(data) = data$Species
tree2 <- drop.tip(tree, b)
TempData = data[, -1]
TempData$GenerationLength_d = log2(TempData$GenerationLength_d)
contrasts2 <- as.data.frame(apply(TempData, 2, pic, tree2))
names(contrasts2) = names(TempData)
summary(contrasts2$GenerationLength_d)
pic(log2(TempData$GenerationLength_d), tree2)
summary(pic(log2(TempData$GenerationLength_d), tree2))
summary(TempData$GenerationLength_d)
TempData = data[, -1]
summary(TempData$GenerationLength_d)
summary(log2(TempData$GenerationLength_d))
pic(TempData$FrA)
pic(TempData$FrA, tree2)
summary(pic(TempData$FrA, tree2))
summary(pic(log2(TempData$GenerationLength_d), tree2))
summary(pic(log2(TempData$GenerationLength_d), tree2))
summary(pic((TempData$GenerationLength_d), tree2))
View(data)
summary(contrasts$GenerationLength_d)
contrasts <- TempData %>%
#  select(GenerationLength_d, FrA, FrT, FrG, FrC) %>%
mutate_if(is.numeric, log2) %>%
map(pic, tree2)
summary(contrasts$GenerationLength_d)
is.binary(tree2)
data = Rep[which(as.character(Rep$spece) %in% tree$tip.label),]
row.names(data) = data$spece
df_vec <- as.character(Rep$spece)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
tree2 <- drop.tip(tree, b)
summary(tree2)
data = AGG[which(as.character(AGG$Species) %in% tree$tip.label),]
# data$GenerationLength_d = log2(data$GenerationLength_d)  # I added log of generation length
df_vec <- as.character(AGG$Species)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
data = data[-597,] # It is duplicate
row.names(data) = data$Species
tree2 <- drop.tip(tree, b)
TempData = data[, -1]
p_load(tibble, dplyr, magrittr, purrr, skimr)
data = Rep[which(as.character(Rep$spece) %in% tree$tip.label),]
row.names(data) = data$spece
df_vec <- as.character(Rep$spece)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
tree2 <- drop.tip(tree, b)
data %>% skim()
write.table(data, '~/Desktop/TableForPics.txt', sep='\t', quote = FALSE)
a = read.table('~/Desktop/TableForPics.txt', sep='\t', header = TRUE)
View(a)
AtgcGl = read.table("../../Body/3Results/WholeGenomeAnalysesCodonUsage.MammalsGenTimeATGCNeutralOrUnderSelection.R.txt")
########### 2 derive fractions (12 types):
AtgcGl$NeutralAfr = AtgcGl$NeutralA / (AtgcGl$NeutralA + AtgcGl$NeutralT + AtgcGl$NeutralG + AtgcGl$NeutralC)
AtgcGl$NeutralTfr = AtgcGl$NeutralT / (AtgcGl$NeutralA + AtgcGl$NeutralT + AtgcGl$NeutralG + AtgcGl$NeutralC)
AtgcGl$NeutralGfr = AtgcGl$NeutralG / (AtgcGl$NeutralA + AtgcGl$NeutralT + AtgcGl$NeutralG + AtgcGl$NeutralC)
AtgcGl$NeutralCfr = AtgcGl$NeutralC / (AtgcGl$NeutralA + AtgcGl$NeutralT + AtgcGl$NeutralG + AtgcGl$NeutralC)
AtgcGl$UnderSelectionAfr = AtgcGl$UnderSelectionA / (AtgcGl$UnderSelectionA + AtgcGl$UnderSelectionT + AtgcGl$UnderSelectionG + AtgcGl$UnderSelectionC)
AtgcGl$UnderSelectionTfr = AtgcGl$UnderSelectionT / (AtgcGl$UnderSelectionA + AtgcGl$UnderSelectionT + AtgcGl$UnderSelectionG + AtgcGl$UnderSelectionC)
AtgcGl$UnderSelectionGfr = AtgcGl$UnderSelectionG / (AtgcGl$UnderSelectionA + AtgcGl$UnderSelectionT + AtgcGl$UnderSelectionG + AtgcGl$UnderSelectionC)
AtgcGl$UnderSelectionCfr = AtgcGl$UnderSelectionC / (AtgcGl$UnderSelectionA + AtgcGl$UnderSelectionT + AtgcGl$UnderSelectionG + AtgcGl$UnderSelectionC)
AtgcGl$WholeGenomeAfr = AtgcGl$WholeGenomeA / (AtgcGl$WholeGenomeA + AtgcGl$WholeGenomeT + AtgcGl$WholeGenomeG + AtgcGl$WholeGenomeC)
AtgcGl$WholeGenomeTfr = AtgcGl$WholeGenomeT / (AtgcGl$WholeGenomeA + AtgcGl$WholeGenomeT + AtgcGl$WholeGenomeG + AtgcGl$WholeGenomeC)
AtgcGl$WholeGenomeGfr = AtgcGl$WholeGenomeG / (AtgcGl$WholeGenomeA + AtgcGl$WholeGenomeT + AtgcGl$WholeGenomeG + AtgcGl$WholeGenomeC)
AtgcGl$WholeGenomeCfr = AtgcGl$WholeGenomeC / (AtgcGl$WholeGenomeA + AtgcGl$WholeGenomeT + AtgcGl$WholeGenomeG + AtgcGl$WholeGenomeC)
library(ape) # install.packages('ape')
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
data = Rep[which(as.character(Rep$spece) %in% tree$tip.label),]
View(AtgcGl)
data = AtgcGl[which(as.character(AtgcGl$species) %in% tree$tip.label),]
row.names(data) = data$species
df_vec <- as.character(data$species)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
tree2 <- drop.tip(tree, b)
View(data)
names(data)
View(data)
data <- data[, -c('species', 'taxonomy')]
contrasts <- data %>%
select(-c(species, taxonomy)) %>%
#   mutate_if(is.numeric, log2) %>%
map(pic, tree2)
library(pacman)
p_load(tibble, dplyr, magrittr, purrr)
contrasts <- data %>%
select(-c(species, taxonomy)) %>%
#   mutate_if(is.numeric, log2) %>%
map(pic, tree2)
summary(contrasts$GenerationLength_d)
data$GenerationLength_d = log2(data$GenerationLength_d)
contrasts <- data %>%
select(-c(species, taxonomy)) %>%
#   mutate_if(is.numeric, log2) %>%
map(pic, tree2)
summary(contrasts$GenerationLength_d)
cor.test(AtgcGl$GenerationLength_d, AtgcGl$WholeGenomeA, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$WholeGenomeA, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$WholeGenomeC, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$UnderSelectionC, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$NeutralC, method = 'spearman')
a <- lm(log2(contrasts$GenerationLength_d) ~ contrasts$NeutralA + contrasts$UnderSelectionA); summary(a)
a <- lm((contrasts$GenerationLength_d) ~ contrasts$NeutralA + contrasts$UnderSelectionA); summary(a)
cor.test(contrasts$GenerationLength_d, contrasts$WholeGenomeA, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$UnderSelectionA, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$NeutralA, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$WholeGenomeAfr, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$UnderSelectionAfr, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$NeutralAfr, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$WholeGenomeT, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$UnderSelectionT, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$NeutralT, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$WholeGenomeTfr, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$UnderSelectionTfr, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$NeutralTfr, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$WholeGenomeG, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$UnderSelectionG, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$NeutralG, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$WholeGenomeGfr, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$UnderSelectionGfr, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$NeutralGfr, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$WholeGenomeC, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$UnderSelectionC, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$NeutralC, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$WholeGenomeCfr, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$UnderSelectionCfr, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$NeutralCfr, method = 'spearman')
a <- lm((contrasts$GenerationLength_d) ~ contrasts$NeutralA + contrasts$UnderSelectionA); summary(a)
a <- lm((contrasts$GenerationLength_d) ~ contrasts$NeutralT + contrasts$UnderSelectionT); summary(a)
a <- lm((contrasts$GenerationLength_d) ~ contrasts$NeutralG + contrasts$UnderSelectionG); summary(a)
a <- lm((contrasts$GenerationLength_d) ~ contrasts$NeutralC + contrasts$UnderSelectionC); summary(a)
########### 5 which pairs correlate better with each other
cor.test(contrasts$NeutralA, contrasts$NeutralT, method = 'spearman')
cor.test(contrasts$NeutralA, contrasts$NeutralG, method = 'spearman')
cor.test(contrasts$NeutralA, contrasts$NeutralC, method = 'spearman') # -0.53
cor.test(contrasts$NeutralT, contrasts$NeutralG, method = 'spearman')
cor.test(contrasts$NeutralT, contrasts$NeutralC, method = 'spearman') # -0.52
########### 6 which pairs correlate better with each other
a <- lm((contrasts$GenerationLength_d) ~ contrasts$TotalNeutralA + contrasts$TotalNeutralT + contrasts$TotalNeutralG + contrasts$TotalNeutralC + contrasts$A + contrasts$T + contrasts$G + contrasts$C); summary(a)
a <- lm((contrasts$GenerationLength_d) ~ scale(contrasts$TotalNeutralA) + scale(contrasts$TotalNeutralT) + scale(contrasts$TotalNeutralG) + scale(contrasts$A) + scale(contrasts$T) + scale(contrasts$G) + scale(contrasts$C)); summary(a)
a <- lm((contrasts$GenerationLength_d) ~ scale(contrasts$TotalNeutralA) + scale(contrasts$TotalNeutralG) + scale(contrasts$A) + scale(contrasts$T) + scale(contrasts$G) + scale(contrasts$C)); summary(a)
########### 6 which pairs correlate better with each other
a <- lm((contrasts$GenerationLength_d) ~ contrasts$TotalNeutralA + contrasts$TotalNeutralT + contrasts$TotalNeutralG + contrasts$TotalNeutralC + contrasts$A + contrasts$T + contrasts$G + contrasts$C); summary(a)
a <- lm((contrasts$GenerationLength_d) ~ scale(contrasts$TotalNeutralA) + scale(contrasts$TotalNeutralT) + scale(contrasts$TotalNeutralG) + scale(contrasts$TotalNeutralC) + scale(contrasts$A) + scale(contrasts$T) + scale(contrasts$G) + scale(contrasts$C)); summary(a)
View(contrasts)
View(data)
a <- lm((contrasts$GenerationLength_d) ~ scale(contrasts$TotalNeutralA) + scale(contrasts$TotalNeutralT) + scale(contrasts$TotalNeutralG) + scale(contrasts$TotalNeutralC) + scale(contrasts$A) + scale(contrasts$T) + scale(contrasts$G) + scale(contrasts$C)); summary(a)
########### 6 which pairs correlate better with each other
a <- lm(log2(AtgcGl$GenerationLength_d) ~ AtgcGl$TotalNeutralA + AtgcGl$TotalNeutralT + AtgcGl$TotalNeutralG + AtgcGl$TotalNeutralC + AtgcGl$A + AtgcGl$T + AtgcGl$G + AtgcGl$C); summary(a)
AtgcGl = read.table("../../Body/3Results/WholeGenomeAnalysesCodonUsage.MammalsGenTimeATGCNeutralOrUnderSelection.R.txt")
########### 2 derive fractions (12 types):
AtgcGl$NeutralAfr = AtgcGl$NeutralA / (AtgcGl$NeutralA + AtgcGl$NeutralT + AtgcGl$NeutralG + AtgcGl$NeutralC)
AtgcGl$NeutralTfr = AtgcGl$NeutralT / (AtgcGl$NeutralA + AtgcGl$NeutralT + AtgcGl$NeutralG + AtgcGl$NeutralC)
AtgcGl$NeutralGfr = AtgcGl$NeutralG / (AtgcGl$NeutralA + AtgcGl$NeutralT + AtgcGl$NeutralG + AtgcGl$NeutralC)
AtgcGl$NeutralCfr = AtgcGl$NeutralC / (AtgcGl$NeutralA + AtgcGl$NeutralT + AtgcGl$NeutralG + AtgcGl$NeutralC)
AtgcGl$UnderSelectionAfr = AtgcGl$UnderSelectionA / (AtgcGl$UnderSelectionA + AtgcGl$UnderSelectionT + AtgcGl$UnderSelectionG + AtgcGl$UnderSelectionC)
AtgcGl$UnderSelectionTfr = AtgcGl$UnderSelectionT / (AtgcGl$UnderSelectionA + AtgcGl$UnderSelectionT + AtgcGl$UnderSelectionG + AtgcGl$UnderSelectionC)
AtgcGl$UnderSelectionGfr = AtgcGl$UnderSelectionG / (AtgcGl$UnderSelectionA + AtgcGl$UnderSelectionT + AtgcGl$UnderSelectionG + AtgcGl$UnderSelectionC)
AtgcGl$UnderSelectionCfr = AtgcGl$UnderSelectionC / (AtgcGl$UnderSelectionA + AtgcGl$UnderSelectionT + AtgcGl$UnderSelectionG + AtgcGl$UnderSelectionC)
AtgcGl$WholeGenomeAfr = AtgcGl$WholeGenomeA / (AtgcGl$WholeGenomeA + AtgcGl$WholeGenomeT + AtgcGl$WholeGenomeG + AtgcGl$WholeGenomeC)
AtgcGl$WholeGenomeTfr = AtgcGl$WholeGenomeT / (AtgcGl$WholeGenomeA + AtgcGl$WholeGenomeT + AtgcGl$WholeGenomeG + AtgcGl$WholeGenomeC)
AtgcGl$WholeGenomeGfr = AtgcGl$WholeGenomeG / (AtgcGl$WholeGenomeA + AtgcGl$WholeGenomeT + AtgcGl$WholeGenomeG + AtgcGl$WholeGenomeC)
AtgcGl$WholeGenomeCfr = AtgcGl$WholeGenomeC / (AtgcGl$WholeGenomeA + AtgcGl$WholeGenomeT + AtgcGl$WholeGenomeG + AtgcGl$WholeGenomeC)
a <- lm(log2(AtgcGl$GenerationLength_d) ~ AtgcGl$NeutralA + AtgcGl$UnderSelectionA); summary(a)
########### 6 which pairs correlate better with each other
a <- lm(log2(AtgcGl$GenerationLength_d) ~ AtgcGl$TotalNeutralA + AtgcGl$TotalNeutralT + AtgcGl$TotalNeutralG + AtgcGl$TotalNeutralC + AtgcGl$A + AtgcGl$T + AtgcGl$G + AtgcGl$C); summary(a)
cor.test(AtgcGl$GenerationLength_d, AtgcGl$WholeGenomeA, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$UnderSelectionA, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$NeutralA, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$WholeGenomeAfr, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$UnderSelectionAfr, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$NeutralAfr, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$WholeGenomeT, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$UnderSelectionT, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$NeutralT, method = 'spearman')
AtgcGl = read.table("../../Body/3Results/WholeGenomeAnalysesCodonUsage.MammalsGenTimeATGCNeutralOrUnderSelection.R.txt")
########### 2 derive fractions (12 types):
AtgcGl$NeutralAfr = AtgcGl$NeutralA / (AtgcGl$NeutralA + AtgcGl$NeutralT + AtgcGl$NeutralG + AtgcGl$NeutralC)
AtgcGl$NeutralTfr = AtgcGl$NeutralT / (AtgcGl$NeutralA + AtgcGl$NeutralT + AtgcGl$NeutralG + AtgcGl$NeutralC)
AtgcGl$NeutralGfr = AtgcGl$NeutralG / (AtgcGl$NeutralA + AtgcGl$NeutralT + AtgcGl$NeutralG + AtgcGl$NeutralC)
AtgcGl$NeutralCfr = AtgcGl$NeutralC / (AtgcGl$NeutralA + AtgcGl$NeutralT + AtgcGl$NeutralG + AtgcGl$NeutralC)
AtgcGl$UnderSelectionAfr = AtgcGl$UnderSelectionA / (AtgcGl$UnderSelectionA + AtgcGl$UnderSelectionT + AtgcGl$UnderSelectionG + AtgcGl$UnderSelectionC)
AtgcGl$UnderSelectionTfr = AtgcGl$UnderSelectionT / (AtgcGl$UnderSelectionA + AtgcGl$UnderSelectionT + AtgcGl$UnderSelectionG + AtgcGl$UnderSelectionC)
AtgcGl$UnderSelectionGfr = AtgcGl$UnderSelectionG / (AtgcGl$UnderSelectionA + AtgcGl$UnderSelectionT + AtgcGl$UnderSelectionG + AtgcGl$UnderSelectionC)
AtgcGl$UnderSelectionCfr = AtgcGl$UnderSelectionC / (AtgcGl$UnderSelectionA + AtgcGl$UnderSelectionT + AtgcGl$UnderSelectionG + AtgcGl$UnderSelectionC)
AtgcGl$WholeGenomeAfr = AtgcGl$WholeGenomeA / (AtgcGl$WholeGenomeA + AtgcGl$WholeGenomeT + AtgcGl$WholeGenomeG + AtgcGl$WholeGenomeC)
AtgcGl$WholeGenomeTfr = AtgcGl$WholeGenomeT / (AtgcGl$WholeGenomeA + AtgcGl$WholeGenomeT + AtgcGl$WholeGenomeG + AtgcGl$WholeGenomeC)
AtgcGl$WholeGenomeGfr = AtgcGl$WholeGenomeG / (AtgcGl$WholeGenomeA + AtgcGl$WholeGenomeT + AtgcGl$WholeGenomeG + AtgcGl$WholeGenomeC)
AtgcGl$WholeGenomeCfr = AtgcGl$WholeGenomeC / (AtgcGl$WholeGenomeA + AtgcGl$WholeGenomeT + AtgcGl$WholeGenomeG + AtgcGl$WholeGenomeC)
library(ape) # install.packages('ape')
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
data <- AtgcGl[which(as.character(AtgcGl$species) %in% tree$tip.label),]
row.names(data) <- data$species
data$GenerationLength_d = log2(data$GenerationLength_d)
df_vec <- as.character(data$species)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
tree2 <- drop.tip(tree, b)
library(pacman)
p_load(tibble, dplyr, magrittr, purrr)
contrasts <- data %>%
select(-c(species, taxonomy)) %>%
#   mutate_if(is.numeric, log2) %>%
map(pic, tree2)
cor.test(contrasts$GenerationLength_d, contrasts$WholeGenomeA, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$UnderSelectionA, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$NeutralA, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$WholeGenomeT, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$UnderSelectionT, method = 'spearman')
cor.test(contrasts$GenerationLength_d, contrasts$NeutralT, method = 'spearman')
?gls
install.packages(geiger)
install.packages("geiger")
hand_pic = function(data, feature_1, feature_2, taxon, tree){
# feature_1 = 'NuclGenomeLength'; feature_2 = 'GenomeLength'; taxon = 'Mammalia'; data = unique_df
# tree = tree2
library(geiger)
library(ggplot2)
temp_data = data
if(taxon != 'All'){
temp_data = data[data$TAXON == taxon,]
}
temp_data = temp_data[!is.na(temp_data[feature_1]),]; temp_data = temp_data[!is.na(temp_data[feature_2]),];
# pruning tree
row.names(temp_data) = temp_data$Species
TempDiff <- setdiff(tree$tip.label, row.names(temp_data))
SpeciesDiff <- setdiff(row.names(temp_data), tree$tip.label)
temp_data = temp_data[!(temp_data$Species %in% SpeciesDiff),]
temp_tree <- drop.tip(tree, TempDiff)
# getting sister tips
max_node_number = max(temp_tree$edge)
min_node_number = length(temp_tree$tip.label) + 1
one_line = c()
for (i in min_node_number:max_node_number){
descendants = tips(temp_tree, i)
if (length(descendants) == 2){
one_line = rbind(one_line, descendants)
}
}
sisters = as.data.frame(one_line)
names(sisters) = c('Species_1', 'Species_2')
print(nrow(sisters))
# getting contrasts
contrast = c(NULL)
for (i in 1:nrow(sisters)){
# i = 4
Species_1 = sisters[i,1]; Species_2 = sisters[i,2]
first_value_1 = temp_data[Species_1, feature_1];
second_value_1 = temp_data[Species_2, feature_1]
first_value_2 = temp_data[Species_1, feature_2];
second_value_2 = temp_data[Species_2, feature_2]
contrast = rbind(contrast, c(first_value_1 - second_value_1,
first_value_2 - second_value_2))
}
contrast = as.data.frame(contrast)
names(contrast) = c('feature_1', 'feature_2')
contrast = contrast[!is.na(contrast$feature_1),]
contrast = contrast[!is.na(contrast$feature_2),]
if (nrow(contrast) > 10){
a = summary(lm(feature_1 ~ 0 + feature_2, contrast))
a = a$coefficients[1,]
ggplot(data = contrast, aes(feature_1, feature_2)) + geom_point(na.rm = TRUE) +
ggtitle(paste(taxon, a[1], a[4], nrow(contrast), sep = ', ')) + xlab(feature_1) + ylab(feature_2)
}
}
names(AtgcGl)
hand_pic(AtgcGl, 'GenerationLength_d', 'GenerationLength_d', 'All', tree2)
hand_pic(AtgcGl, 'GenerationLength_d', 'WholeGenomeA', 'All', tree2)
feature_1 = 'GenerationLength_d'; feature_2 = 'WholeGenomeA'; taxon = 'All'; data = AtgcGl
tree = tree2
library(geiger)
library(ggplot2)
temp_data = data
if(taxon != 'All'){
temp_data = data[data$TAXON == taxon,]
}
temp_data = temp_data[!is.na(temp_data[feature_1]),]; temp_data = temp_data[!is.na(temp_data[feature_2]),];
# pruning tree
row.names(temp_data) = temp_data$Species
View(temp_data)
View(temp_data)
species = AtgcGl$species
# pruning tree
row.names(temp_data) = species
View(temp_data)
TempDiff <- setdiff(tree$tip.label, row.names(temp_data))
SpeciesDiff <- setdiff(row.names(temp_data), tree$tip.label)
temp_data = temp_data[!(temp_data$Species %in% SpeciesDiff),]
temp_data = temp_data[!(species %in% SpeciesDiff),]
temp_tree <- drop.tip(tree, TempDiff)
# getting sister tips
max_node_number = max(temp_tree$edge)
min_node_number = length(temp_tree$tip.label) + 1
one_line = c()
for (i in min_node_number:max_node_number){
descendants = tips(temp_tree, i)
if (length(descendants) == 2){
one_line = rbind(one_line, descendants)
}
}
sisters = as.data.frame(one_line)
names(sisters) = c('Species_1', 'Species_2')
print(nrow(sisters))
# getting contrasts
contrast = c(NULL)
for (i in 1:nrow(sisters)){
# i = 4
Species_1 = sisters[i,1]; Species_2 = sisters[i,2]
first_value_1 = temp_data[Species_1, feature_1];
second_value_1 = temp_data[Species_2, feature_1]
first_value_2 = temp_data[Species_1, feature_2];
second_value_2 = temp_data[Species_2, feature_2]
contrast = rbind(contrast, c(first_value_1 - second_value_1,
first_value_2 - second_value_2))
}
contrast = as.data.frame(contrast)
names(contrast) = c('feature_1', 'feature_2')
contrast = contrast[!is.na(contrast$feature_1),]
contrast = as.data.frame(contrast)
for (i in 1:nrow(sisters)){
# i = 4
Species_1 = sisters[i,1]; Species_2 = sisters[i,2]
first_value_1 = temp_data[Species_1, feature_1];
second_value_1 = temp_data[Species_2, feature_1]
first_value_2 = temp_data[Species_1, feature_2];
second_value_2 = temp_data[Species_2, feature_2]
contrast = rbind(contrast, c(first_value_1 - second_value_1,
first_value_2 - second_value_2))
}
contrast = as.data.frame(contrast)
View(contrast)
View(sisters)
i = 4
# i = 4
Species_1 = sisters[i,1]; Species_2 = sisters[i,2]
first_value_1 = temp_data[Species_1, feature_1];
for (i in min_node_number:max_node_number){
descendants = tips(temp_tree, i)
if (length(descendants) == 2){
one_line = rbind(one_line, descendants)
}
}
View(one_line)
sisters = as.data.frame(one_line)
View(sisters)
print(nrow(sisters))
one_line = c()
for (i in min_node_number:max_node_number){
descendants = tips(temp_tree, i)
if (length(descendants) == 2){
one_line = rbind(one_line, descendants)
}
}
sisters = as.data.frame(one_line)
names(sisters) = c('Species_1', 'Species_2')
print(nrow(sisters))
sisters$Species_1 <- as.character(sisters$Species_1); sisters$Species_2 <- as.character(sisters$Species_2)
# getting contrasts
contrast = c(NULL)
for (i in 1:nrow(sisters)){
# i = 4
Species_1 = sisters[i,1]; Species_2 = sisters[i,2]
first_value_1 = temp_data[Species_1, feature_1];
second_value_1 = temp_data[Species_2, feature_1]
first_value_2 = temp_data[Species_1, feature_2];
second_value_2 = temp_data[Species_2, feature_2]
contrast = rbind(contrast, c(first_value_1 - second_value_1,
first_value_2 - second_value_2))
}
View(contrasts)
View(contrast)
i = 4
# i = 4
Species_1 = sisters[i,1]; Species_2 = sisters[i,2]
first_value_1 = temp_data[Species_1, feature_1];
View(temp_data)
temp_data = data
View(temp_data)
temp_data = temp_data[!is.na(temp_data[feature_1]),]; temp_data = temp_data[!is.na(temp_data[feature_2]),];
View(temp_data)
# pruning tree
row.names(temp_data) = species
TempDiff <- setdiff(tree$tip.label, row.names(temp_data))
SpeciesDiff <- setdiff(row.names(temp_data), tree$tip.label)
temp_data = temp_data[!(species %in% SpeciesDiff),]
temp_tree <- drop.tip(tree, TempDiff)
View(temp_data)
# i = 4
Species_1 = sisters[i,1]; Species_2 = sisters[i,2]
View(temp_data)
first_value_1 = temp_data[Species_1, feature_1];
second_value_1 = temp_data[Species_2, feature_1]
first_value_2 = temp_data[Species_1, feature_2];
second_value_2 = temp_data[Species_2, feature_2]
contrast = rbind(contrast, c(first_value_1 - second_value_1,
first_value_2 - second_value_2))
View(contrast)
# getting contrasts
contrast = c(NULL)
for (i in 1:nrow(sisters)){
# i = 4
Species_1 = sisters[i,1]; Species_2 = sisters[i,2]
first_value_1 = temp_data[Species_1, feature_1];
second_value_1 = temp_data[Species_2, feature_1]
first_value_2 = temp_data[Species_1, feature_2];
second_value_2 = temp_data[Species_2, feature_2]
contrast = rbind(contrast, c(first_value_1 - second_value_1,
first_value_2 - second_value_2))
}
View(contrast)
contrast = as.data.frame(contrast)
names(contrast) = c('feature_1', 'feature_2')
contrast = contrast[!is.na(contrast$feature_1),]
contrast = contrast[!is.na(contrast$feature_2),]
if (nrow(contrast) > 10){
a = summary(lm(feature_1 ~ 0 + feature_2, contrast))
a = a$coefficients[1,]
ggplot(data = contrast, aes(feature_1, feature_2)) + geom_point(na.rm = TRUE) +
ggtitle(paste(taxon, a[1], a[4], nrow(contrast), sep = ', ')) + xlab(feature_1) + ylab(feature_2)
}
a
hand_pic(AtgcGl, AtgcGl$species, 'GenerationLength_d', 'WholeGenomeA', tree2)
