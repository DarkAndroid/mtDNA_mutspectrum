ND6$NeutralC = C
SynNuc = rbind(NotND6,ND6)
### count fraction of nucleotides
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$TAXON = SynNuc$Class
VecOfTaxa = unique(SynNuc$TAXON)
############# GENERATION LENGTH FOR ALL MAMMALS
GT = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GT$Species = gsub(' ','_',GT$Scientific_name)
length(unique(GT$Species))
summary(GT$AdultBodyMass_g)     # 2        21        71    136058       614 154321304
summary(GT$GenerationLength_d)  # 129.0   624.4  1101.1  1578.8  2064.3 18980.0 # max = 18980 days => 52 years. ok
GT = GT[,c(11,13)]
summary(GT$GenerationLength_d)
############ merge (work only with mammals since GT is only for mammals)
SynNucGT = merge(GT,SynNuc)
length(unique(SynNucGT$Species))  # 649 species
table(SynNucGT$TAXON)
########### question 1: which nucleotides better correlate with GT: log2(GT) = 11 - 0.29*scale(FrT) + 0.33*scale(FrC) (in line with our mutational spectrum result that T->C correlates with generation time)
AGG = aggregate(list(SynNucGT$FrA,SynNucGT$FrT,SynNucGT$FrG,SynNucGT$FrC), by = list(SynNucGT$Species,SynNucGT$GenerationLength_d), FUN = mean)
names(AGG) = c('Species','GenerationLength_d','FrA','FrT','FrG','FrC')
### start from pairwise correlations and go to multiple linear model:
A = cor.test(log2(AGG$GenerationLength_d),AGG$FrA, method = 'spearman') # rho -0.2506844; p = 1.434e-10
T = cor.test(log2(AGG$GenerationLength_d),AGG$FrT, method = 'spearman') # rho -0.3034538; p = 5.159e-15
G = cor.test(log2(AGG$GenerationLength_d),AGG$FrG, method = 'spearman') # rho 0.1437445;  p = 0.000276
C = cor.test(log2(AGG$GenerationLength_d),AGG$FrC, method = 'spearman') # rho 0.4741843;  p < 2.2e-16
res = as.data.frame(rbind(
c('A', round(as.numeric(A[4]),3), as.numeric(A[3])),
c('T', round(as.numeric(T[4]),3), as.numeric(T[3])),
c('G', round(as.numeric(G[4]),3), as.numeric(G[3])),
c('C', round(as.numeric(C[4]),3), as.numeric(C[3]))
))
names(res)=c('Nucleotide','Spearman Rho', 'P value')
### for multiple linear backward model we choosed A,T & C, on the second step we delete A from the model and the final model is just with T and C
A <- lm(log2(AGG$GenerationLength_d) ~ AGG$FrA + AGG$FrT + AGG$FrC); summary(A) # A is not significant - delete it
A <- lm(log2(AGG$GenerationLength_d) ~ AGG$FrT + AGG$FrC); summary(A)
A <- lm(log2(AGG$GenerationLength_d) ~ scale(AGG$FrT) + scale(AGG$FrC)); summary(A) # log2(GT) = 11.08294 - 0.12 scale(FrT) + 0.45 scale(FrC)
# Adjusted R-squared:  0.2321 - not bad!!!
## next step is PIC, ALINA!!!!!! SOS!!!!!
# plot it:
pdf("../../Body/4Figures/WholeGenomeAnalyses.MutagensWithinMammalsNoOverlap.R.01.pdf", width = 50, height = 30)
ColG = rainbow(4)[1]
ColT = rainbow(4)[2]
ColC = rainbow(4)[3]
ColA = rainbow(4)[4]
par(oma = c(2, 2, 0, 0), cex.main = 2, cex.lab = 1.5, cex = 6, pch =16)
plot(log2(AGG$GenerationLength_d),AGG$FrA, col = ColA, ylim = c(0,0.6), xlab = '', ylab = '', main = ''); par(new=TRUE);
plot(log2(AGG$GenerationLength_d),AGG$FrT, col = ColT, ylim = c(0,0.6), xlab = '', ylab = '', main = ''); par(new=TRUE);
plot(log2(AGG$GenerationLength_d),AGG$FrG, col = ColG, ylim = c(0,0.6), xlab = '', ylab = '', main = ''); par(new=TRUE);
plot(log2(AGG$GenerationLength_d),AGG$FrC, col = ColC, ylim = c(0,0.6), xlab = 'log2(Generation Time in days)', ylab = 'Nucleotide Content', main = ''); par(new=TRUE);
abline(h =0.25, lt = 1, col = 'red');
legend("topright",legend=c('A','C','T','G'), col = c(ColA,ColC,ColT,ColG), pch = 16, horiz = FALSE)
grid.newpage()
par(mfrow=c(2,2))
grid.table(res)
par(mfrow=c(2,2), oma = c(0, 0, 2, 0),cex.main = 2, cex.lab = 2, cex = 2, pch = 16)
plot(log2(AGG$GenerationLength_d),AGG$FrA, col = ColA, ylim = c(0,0.6), xlab = 'log2(GT)', main = 'FrA', cex = 2); abline(h =0.25, lt = 2, col = 'red')
plot(log2(AGG$GenerationLength_d),AGG$FrT, col = ColT, ylim = c(0,0.6), xlab = 'log2(GT)', main = 'FrT', cex = 2); abline(h =0.25, lt = 2, col = 'red')
plot(log2(AGG$GenerationLength_d),AGG$FrG, col = ColG, ylim = c(0,0.6), xlab = 'log2(GT)', main = 'FrG', cex = 2); abline(h =0.25, lt = 2, col = 'red')
plot(log2(AGG$GenerationLength_d),AGG$FrC, col = ColC, ylim = c(0,0.6), xlab = 'log2(GT)', main = 'FrC', cex = 2); abline(h =0.25, lt = 2, col = 'red')
mtext("log2(GT) = 11.08294 - 0.12 scale(FrT) + 0.45 scale(FrC)", outer = TRUE, cex = 1.5)
########### question 2: which genes better correlate with GT (why T in ATP6,COX3 and ND4 do not correlate with GT and high absolute value - fast replication, no tRNA before them?)
## T is negatively and C is positively (T->C)
VecOfGenes = c('COX1','COX2','ATP8','ATP6','COX3','ND3','ND4L','ND4','ND5','ND6','CytB','ND1','ND2') # ND1 ND2 ND6
length(VecOfGenes)
par(mfcol=c(4,13), cex.main = 2, cex.lab = 2, cex = 2, pch = 16)
for (i in 1:length(VecOfGenes))
{ # i = 1
OneGene = SynNucGT[SynNucGT$Gene == VecOfGenes[i],]
main = VecOfGenes[i]
plot(log2(OneGene$GenerationLength_d),OneGene$FrA, col = ColA, main = main, ylim = c(0,0.7), xlab = '', ylab = '')
plot(log2(OneGene$GenerationLength_d),OneGene$FrT, col = ColT, main = main, ylim = c(0,0.7), xlab = '', ylab = '')
plot(log2(OneGene$GenerationLength_d),OneGene$FrG, col = ColG, main = main, ylim = c(0,0.7), xlab = '', ylab = '')
plot(log2(OneGene$GenerationLength_d),OneGene$FrC, col = ColC, main = main, ylim = c(0,0.7), xlab = '', ylab = '')
}
dev.off()
rm(list=ls(all=TRUE))
############ read AnAge
AnAge = read.table("../../Body/1Raw/anage_data.txt", header = TRUE, sep = '\t')
View(AnAge)
names(AnAge)
AnAge = AnAge[!is.na(AnAge$Temperature..K.,]
AnAge = AnAge[!is.na(AnAge$Temperature..K.),]
table(AnAge$Class)
boxplot(AnAge[AnAge$Class == 'Amphibia',]$Temperature..K.,AnAge[AnAge$Class == 'Reptilia',]$Temperature..K.,AnAge[AnAge$Class == 'Mammalia',]$Temperature..K.,AnAge[AnAge$Class == 'Aves',]$Temperature..K.,)
boxplot(AnAge[AnAge$Class == 'Amphibia',]$Temperature..K.,AnAge[AnAge$Class == 'Reptilia',]$Temperature..K.,AnAge[AnAge$Class == 'Mammalia',]$Temperature..K.,AnAge[AnAge$Class == 'Aves',]$Temperature..K.)
boxplot(AnAge[AnAge$Class == 'Amphibia',]$Temperature..K.,AnAge[AnAge$Class == 'Reptilia',]$Temperature..K.,AnAge[AnAge$Class == 'Mammalia',]$Temperature..K.,AnAge[AnAge$Class == 'Aves',]$Temperature..K., names = c('Amphibia','Reptilia','Mammalia','Aves'))
boxplot(AnAge[AnAge$Class == 'Amphibia',]$Temperature..K.,AnAge[AnAge$Class == 'Reptilia',]$Temperature..K.,AnAge[AnAge$Class == 'Mammalia',]$Temperature..K.,AnAge[AnAge$Class == 'Aves',]$Temperature..K., names = c('Amphibia','Reptilia','Mammalia','Aves'), ylab = 'temperature')
boxplot(AnAge[AnAge$Class == 'Amphibia',]$Temperature..K.,AnAge[AnAge$Class == 'Reptilia',]$Temperature..K.,AnAge[AnAge$Class == 'Mammalia',]$Temperature..K.,AnAge[AnAge$Class == 'Aves',]$Temperature..K., names = c('Amphibia','Reptilia','Mammalia','Aves'), ylab = 'temperature', notch = TRUE)
################################
################## COMPARE A T G C nucleotides between taxa / genes: Proper taxa; warm/cold-blooded taxa; all genes, 13 genes separately
################################
rm(list=ls(all=TRUE))
############ read AnAge
AnAge = read.table("../../Body/1Raw/anage_data.txt", header = TRUE, sep = '\t')
names(AnAge)
AnAge = AnAge[!is.na(AnAge$Temperature..K.),] # 494
table(AnAge$Class)
boxplot(AnAge[AnAge$Class == 'Amphibia',]$Temperature..K.,AnAge[AnAge$Class == 'Reptilia',]$Temperature..K.,AnAge[AnAge$Class == 'Mammalia',]$Temperature..K.,AnAge[AnAge$Class == 'Aves',]$Temperature..K., names = c('Amphibia','Reptilia','Mammalia','Aves'), ylab = 'temperature')
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
# SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE)
names(SynNuc)
### make ND6 complementary:
NotND6 = SynNuc[SynNuc$Gene != 'ND6',]
ND6 = SynNuc[SynNuc$Gene == 'ND6',]
A = ND6$NeutralT
T = ND6$NeutralA
G = ND6$NeutralC
C = ND6$NeutralG
ND6$NeutralA = A
ND6$NeutralT = T
ND6$NeutralG = G
ND6$NeutralC = C
SynNuc = rbind(NotND6,ND6)
### count fraction of nucleotides
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$TAXON = SynNuc$Class
VecOfTaxa = unique(SynNuc$TAXON)
table(SynNuc$TAXON)/13
### want to use only species with 13 genes (all of them should be already with 13 genes):
SynNuc$Number = 1
AGG = aggregate(SynNuc$Number, by = list(SynNuc$Species), FUN = sum)
VecOfGoodSpecies = AGG[AGG$x == 13,]$Group.1
length(VecOfGoodSpecies)
nrow(SynNuc) # 46670
SynNuc = SynNuc[SynNuc$Species %in% VecOfGoodSpecies,]
nrow(SynNuc) # 46670
table(SynNuc$TAXON)/13
# Actinopterygii       Amphibia    AncientFish           Aves       Mammalia       Reptilia
# 1770                   205            126              432          788            269
SynNuc$TAXON = ordered(SynNuc$TAXON, levels = c('AncientFish','Actinopterygii','Amphibia','Reptilia','Mammalia','Aves'))
SynNuc$Gene =  ordered(SynNuc$Gene, levels = c('COX1','COX2','ATP8','ATP6','COX3','ND3','ND4L','ND4','ND5','ND6','CytB', 'ND1','ND2'))
SynNuc = SynNuc[order(SynNuc$TAXON,SynNuc$Gene),]
#boxplot(FrA ~ TAXON, data = AGG,  notch = TRUE)
pdf("../../Body/4Figures/WholeGenomeAnalyses.AtgcBetweenTaxaNoOverlap.R.01.pdf", height = 20, width = 50)
# G - grey  rgb(0.1,0.1,0.1,0.1)
# A - red   rgb(1,0.1,0.1,0.1)
# T - blue  rgb(0.1,0.1,1,0.1)
# C - green rgb(0.1,1,0.1,0.1)
ColG = rgb(0.1,0.1,0.1,0.2)
ColT = rgb(0.1,0.1,1,0.2)
ColC = rgb(0.1,1,0.1,0.2)
ColA = rgb(1,0.1,0.1,0.2)
TitleActinopterygii = paste('Actinopterygii, N = ',nrow(SynNuc[SynNuc$TAXON == 'Actinopterygii',])/13, sep = '')
TitleAmphibia = paste('Amphibia, N = ',nrow(SynNuc[SynNuc$TAXON == 'Amphibia',])/13, sep = '')
TitleReptilia = paste('Reptilia, N = ',nrow(SynNuc[SynNuc$TAXON == 'Reptilia',])/13, sep = '')
TitleMammalia = paste('Mammalia, N = ',nrow(SynNuc[SynNuc$TAXON == 'Mammalia',])/13, sep = '')
TitleAves = paste('Aves, N = ',nrow(SynNuc[SynNuc$TAXON == 'Aves',])/13, sep = '')
### aggregate nucleotide count per each species and calculate fraction per all 13 protein-coding genes
SYN = aggregate(list(SynNuc$NeutralA,SynNuc$NeutralT,SynNuc$NeutralG,SynNuc$NeutralC), by = list(SynNuc$Species, SynNuc$Class, SynNuc$TAXON, SynNuc$Taxonomy), FUN = sum)
names(SYN) = c('Species', 'Class', 'TAXON', 'Taxonomy','NeutralA','NeutralT','NeutralG','NeutralC')
SYN$FrA = SYN$NeutralA / (SYN$NeutralA + SYN$NeutralT + SYN$NeutralG + SYN$NeutralC)
SYN$FrT = SYN$NeutralT / (SYN$NeutralA + SYN$NeutralT + SYN$NeutralG + SYN$NeutralC)
SYN$FrG = SYN$NeutralG / (SYN$NeutralA + SYN$NeutralT + SYN$NeutralG + SYN$NeutralC)
SYN$FrC = SYN$NeutralC / (SYN$NeutralA + SYN$NeutralT + SYN$NeutralG + SYN$NeutralC)
par(mfrow=c(1,5))
par(cex.main = 4)
par(cex.axis = 3)
par(oma = c(1, 1, 1, 1))
boxplot(SYN[SYN$TAXON == 'Actinopterygii',]$FrG, SYN[SYN$TAXON == 'Actinopterygii',]$FrT, SYN[SYN$TAXON == 'Actinopterygii',]$FrC, SYN[SYN$TAXON == 'Actinopterygii',]$FrA, notch = TRUE, outline = FALSE, las = 1, col = c(ColG, ColT, ColC, ColA), main = TitleActinopterygii, ylim = c(0,0.65), names = c('G','T','C','A')); abline(h=0.25, col = 'red', lt = 2)
boxplot(SYN[SYN$TAXON == 'Amphibia',]$FrG, SYN[SYN$TAXON == 'Amphibia',]$FrT, SYN[SYN$TAXON == 'Amphibia',]$FrC, SYN[SYN$TAXON == 'Amphibia',]$FrA, notch = TRUE, outline = FALSE, las = 1, col = c(ColG, ColT, ColC, ColA), main = TitleAmphibia, ylim = c(0,0.65), names = c('G','T','C','A'));                               abline(h=0.25, col = 'red', lt = 2)
boxplot(SYN[SYN$TAXON == 'Reptilia',]$FrG, SYN[SYN$TAXON == 'Reptilia',]$FrT, SYN[SYN$TAXON == 'Reptilia',]$FrC, SYN[SYN$TAXON == 'Reptilia',]$FrA, notch = TRUE, outline = FALSE, las = 1, col = c(ColG, ColT, ColC, ColA), main = TitleReptilia, ylim = c(0,0.65), names = c('G','T','C','A'));                               abline(h=0.25, col = 'red', lt = 2)
boxplot(SYN[SYN$TAXON == 'Mammalia',]$FrG, SYN[SYN$TAXON == 'Mammalia',]$FrT, SYN[SYN$TAXON == 'Mammalia',]$FrC, SYN[SYN$TAXON == 'Mammalia',]$FrA, notch = TRUE, outline = FALSE, las = 1, col = c(ColG, ColT, ColC, ColA), main = TitleMammalia, ylim = c(0,0.65), names = c('G','T','C','A'));                               abline(h=0.25, col = 'red', lt = 2)
boxplot(SYN[SYN$TAXON == 'Aves',]$FrG, SYN[SYN$TAXON == 'Aves',]$FrT, SYN[SYN$TAXON == 'Aves',]$FrC, SYN[SYN$TAXON == 'Aves',]$FrA, notch = TRUE, outline = FALSE, las = 1, col = c(ColG, ColT, ColC, ColA), main = TitleAves, ylim = c(0,0.65), names = c('G','T','C','A'));                                                   abline(h=0.25, col = 'red', lt = 2)
wilcox.test(SYN[SYN$TAXON == 'Amphibia',]$FrT, SYN[SYN$TAXON == 'Amphibia',]$FrC) # 0.008962 PAPER DEC 2018
wilcox.test(SYN[SYN$TAXON == 'Aves',]$FrC, SYN[SYN$TAXON == 'Aves',]$FrA)         # 5.602e-09 PAPER DEC 2018
par(mfrow=c(1,4))
par(oma = c(14, 3, 0, 0))
boxplot(SYN[SYN$TAXON == 'Actinopterygii' | SYN$TAXON == 'Amphibia' | SYN$TAXON == 'Reptilia',]$FrG,SYN[SYN$TAXON == 'Mammalia' | SYN$TAXON == 'Aves',]$FrG, notch = TRUE, outline = FALSE, las = 2, col = c(ColG), main = 'Fraction of G in vertebrate classes', names = c('Cold-blooded','Warm-blooded'), ylim = c(0,0.15)); abline(h=0.25, col = 'red', lt = 2)
boxplot(SYN[SYN$TAXON == 'Actinopterygii',]$FrG,  SYN[SYN$TAXON == 'Amphibia',]$FrG, SYN[SYN$TAXON == 'Reptilia',]$FrG,SYN[SYN$TAXON == 'Mammalia',]$FrG,SYN[SYN$TAXON == 'Aves',]$FrG, notch = TRUE, outline = FALSE, las = 2, col = c(ColG), main = 'Fraction of G in vertebrate classes', names = c('Actinopterygii','Amphibia','Reptilia','Mammalia','Aves'), ylim = c(0,0.15)); abline(h=0.25, col = 'red', lt = 2)
# boxplot(SYN[grepl('Monotremata',SYN$Taxonomy),]$FrG,  SYN[grepl('Eutheria',SYN$Taxonomy),]$FrG, notch = TRUE, outline = FALSE, las = 2, col = c(ColG), main = 'Fraction of G in mammals', ylim = c(0,0.15), names = c('Monotremata','Eutheria')); abline(h=0.25, col = 'red', lt = 2)
# wilcox.test(SYN[grepl('Monotremata',SYN$Taxonomy),]$FrG,SYN[grepl('Eutheria',SYN$Taxonomy),]$FrG, alternative =  'greater')
wilcox.test(SYN[SYN$TAXON == 'Actinopterygii' | SYN$TAXON == 'Amphibia' | SYN$TAXON == 'Reptilia',]$FrG,SYN[SYN$TAXON == 'Mammalia' | SYN$TAXON == 'Aves',]$FrG) # 2.2e-16 PAPER DEC 2018
wilcox.test(SYN[SYN$TAXON == 'Actinopterygii',]$FrG,  SYN[SYN$TAXON == 'Amphibia',]$FrG) # 7.18e-13 PAPER DEC 2018
wilcox.test(SYN[SYN$TAXON == 'Amphibia',]$FrG,  SYN[SYN$TAXON == 'Reptilia',]$FrG)       # 3.845e-05 PAPER DEC 2018
wilcox.test(SYN[SYN$TAXON == 'Reptilia',]$FrG,  SYN[SYN$TAXON == 'Mammalia',]$FrG)       # 6.9e-05 PAPER DEC 2018
wilcox.test(SYN[SYN$TAXON == 'Mammalia',]$FrG,  SYN[SYN$TAXON == 'Aves',]$FrG)           # 0.3084 PAPER DEC 2018
boxplot(AnAge[AnAge$Class == 'Amphibia',]$Temperature..K.,AnAge[AnAge$Class == 'Reptilia',]$Temperature..K.,AnAge[AnAge$Class == 'Mammalia',]$Temperature..K.,AnAge[AnAge$Class == 'Aves',]$Temperature..K., names = c('Amphibia','Reptilia','Mammalia','Aves'), ylab = 'temperature (Kelvin)', notch = TRUE)
par(mfrow=c(2,2))
par(cex.main = 4)
par(cex.axis = 2)
boxplot(FrA ~ TAXON, data = SynNuc,  notch = TRUE, outline = FALSE, las = 1, col = c('dark blue','blue','orange','green','red','brown'), main = 'FrA'); abline(h=0.2, col = 'red', lt = 2)
boxplot(FrT ~ TAXON, data = SynNuc,  notch = TRUE, outline = FALSE, las = 1, col = c('dark blue','blue','orange','green','red','brown'), main = 'FrT'); abline(h=0.2, col = 'red', lt = 2)
boxplot(FrG ~ TAXON, data = SynNuc,  notch = TRUE, outline = FALSE, las = 1, col = c('dark blue','blue','orange','green','red','brown'), main = 'FrG'); abline(h=0.2, col = 'red', lt = 2)
boxplot(FrC ~ TAXON, data = SynNuc,  notch = TRUE, outline = FALSE, las = 1, col = c('dark blue','blue','orange','green','red','brown'), main = 'FrC'); abline(h=0.2, col = 'red', lt = 2)
par(mfrow=c(1,1))
par(oma = c(12, 0, 0, 0)) # increae space for bottom lines
boxplot(FrA ~ Gene*TAXON, data = SynNuc,  notch = TRUE, outline = FALSE, las = 2, col = c(rep('dark blue',13),rep('blue',13),rep('orange',13),rep('green',13),rep('red',13),rep('brown',13)), main = 'FrA'); abline(h=0.2, col = 'red', lt = 2)
boxplot(FrT ~ Gene*TAXON, data = SynNuc,  notch = TRUE, outline = FALSE, las = 2, col = c(rep('dark blue',13),rep('blue',13),rep('orange',13),rep('green',13),rep('red',13),rep('brown',13)), main = 'FrT'); abline(h=0.2, col = 'red', lt = 2)
boxplot(FrG ~ Gene*TAXON, data = SynNuc,  notch = TRUE, outline = FALSE, las = 2, col = c(rep('dark blue',13),rep('blue',13),rep('orange',13),rep('green',13),rep('red',13),rep('brown',13)), main = 'FrG'); abline(h=0.2, col = 'red', lt = 2)
boxplot(FrC ~ Gene*TAXON, data = SynNuc,  notch = TRUE, outline = FALSE, las = 2, col = c(rep('dark blue',13),rep('blue',13),rep('orange',13),rep('green',13),rep('red',13),rep('brown',13)), main = 'FrC'); abline(h=0.2, col = 'red', lt = 2)
boxplot(FrA ~ TAXON*Gene, data = SynNuc,  notch = TRUE, outline = FALSE, las = 2, col = c(rep(c('dark blue','blue','orange','green','red','brown'),6)), main = 'FrA'); abline(h=0.2, col = 'red', lt = 2)
boxplot(FrT ~ TAXON*Gene, data = SynNuc,  notch = TRUE, outline = FALSE, las = 2, col = c(rep(c('dark blue','blue','orange','green','red','brown'),6)), main = 'FrT'); abline(h=0.2, col = 'red', lt = 2)
boxplot(FrG ~ TAXON*Gene, data = SynNuc,  notch = TRUE, outline = FALSE, las = 2, col = c(rep(c('dark blue','blue','orange','green','red','brown'),6)), main = 'FrG'); abline(h=0.2, col = 'red', lt = 2)
boxplot(FrC ~ TAXON*Gene, data = SynNuc,  notch = TRUE, outline = FALSE, las = 2, col = c(rep(c('dark blue','blue','orange','green','red','brown'),6)), main = 'FrC'); abline(h=0.2, col = 'red', lt = 2)
dev.off()
##
rm(list=ls(all=TRUE))
############
library(gridExtra) # install.packages("gridExtra")
library(grid)
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
names(SynNuc)
### make ND6 complementary:
NotND6 = SynNuc[SynNuc$Gene != 'ND6',]
ND6 = SynNuc[SynNuc$Gene == 'ND6',]
A = ND6$NeutralT
T = ND6$NeutralA
G = ND6$NeutralC
C = ND6$NeutralG
ND6$NeutralA = A
ND6$NeutralT = T
ND6$NeutralG = G
ND6$NeutralC = C
SynNuc = rbind(NotND6,ND6)
### count fraction of nucleotides
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$TAXON = SynNuc$Class
VecOfTaxa = unique(SynNuc$TAXON)
############# GENERATION LENGTH FOR ALL MAMMALS
GT = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GT$Species = gsub(' ','_',GT$Scientific_name)
length(unique(GT$Species))
summary(GT$AdultBodyMass_g)     # 2        21        71    136058       614 154321304
summary(GT$GenerationLength_d)  # 129.0   624.4  1101.1  1578.8  2064.3 18980.0 # max = 18980 days => 52 years. ok
GT = GT[,c(11,13)]
summary(GT$GenerationLength_d)
############ merge (work only with mammals since GT is only for mammals)
SynNucGT = merge(GT,SynNuc)
length(unique(SynNucGT$Species))  # 649 species
table(SynNucGT$TAXON)
########### question 1: which nucleotides better correlate with GT: log2(GT) = 11 - 0.29*scale(FrT) + 0.33*scale(FrC) (in line with our mutational spectrum result that T->C correlates with generation time)
AGG = aggregate(list(SynNucGT$FrA,SynNucGT$FrT,SynNucGT$FrG,SynNucGT$FrC), by = list(SynNucGT$Species,SynNucGT$GenerationLength_d), FUN = mean)
names(AGG) = c('Species','GenerationLength_d','FrA','FrT','FrG','FrC')
### start from pairwise correlations and go to multiple linear model:
A = cor.test(log2(AGG$GenerationLength_d),AGG$FrA, method = 'spearman') # rho -0.2506844; p = 1.434e-10
T = cor.test(log2(AGG$GenerationLength_d),AGG$FrT, method = 'spearman') # rho -0.3034538; p = 5.159e-15
G = cor.test(log2(AGG$GenerationLength_d),AGG$FrG, method = 'spearman') # rho 0.1437445;  p = 0.000276
C = cor.test(log2(AGG$GenerationLength_d),AGG$FrC, method = 'spearman') # rho 0.4741843;  p < 2.2e-16
res = as.data.frame(rbind(
c('A', round(as.numeric(A[4]),3), as.numeric(A[3])),
c('T', round(as.numeric(T[4]),3), as.numeric(T[3])),
c('G', round(as.numeric(G[4]),3), as.numeric(G[3])),
c('C', round(as.numeric(C[4]),3), as.numeric(C[3]))
))
names(res)=c('Nucleotide','Spearman Rho', 'P value')
### for multiple linear backward model we choosed A,T & C, on the second step we delete A from the model and the final model is just with T and C
A <- lm(log2(AGG$GenerationLength_d) ~ AGG$FrA + AGG$FrT + AGG$FrC); summary(A) # A is not significant - delete it
A <- lm(log2(AGG$GenerationLength_d) ~ AGG$FrT + AGG$FrC); summary(A)
A <- lm(log2(AGG$GenerationLength_d) ~ scale(AGG$FrT) + scale(AGG$FrC)); summary(A) # log2(GT) = 11.08294 - 0.12 scale(FrT) + 0.45 scale(FrC)
# Adjusted R-squared:  0.2321 - not bad!!!
## next step is PIC, ALINA!!!!!! SOS!!!!!
# plot it:
pdf("../../Body/4Figures/WholeGenomeAnalyses.MutagensWithinMammalsNoOverlap.R.01.pdf", width = 50, height = 30)
ColG = rainbow(4)[1]
ColT = rainbow(4)[2]
ColC = rainbow(4)[3]
ColA = rainbow(4)[4]
par(oma = c(2, 2, 0, 0), cex.main = 2, cex.lab = 1.5, cex = 6, pch =16)
plot(log2(AGG$GenerationLength_d),AGG$FrA, col = ColA, ylim = c(0,0.6), xlab = '', ylab = '', main = ''); par(new=TRUE);
plot(log2(AGG$GenerationLength_d),AGG$FrT, col = ColT, ylim = c(0,0.6), xlab = '', ylab = '', main = ''); par(new=TRUE);
plot(log2(AGG$GenerationLength_d),AGG$FrG, col = ColG, ylim = c(0,0.6), xlab = '', ylab = '', main = ''); par(new=TRUE);
plot(log2(AGG$GenerationLength_d),AGG$FrC, col = ColC, ylim = c(0,0.6), xlab = 'log2(Generation Time in days)', ylab = 'Nucleotide Content', main = ''); par(new=TRUE);
abline(h =0.25, lt = 1, col = 'red');
legend("topright",legend=c('A','C','T','G'), col = c(ColA,ColC,ColT,ColG), pch = 16, horiz = FALSE)
grid.newpage()
par(mfrow=c(2,2))
grid.table(res)
par(mfrow=c(2,2), oma = c(0, 0, 2, 0),cex.main = 2, cex.lab = 2, cex = 2, pch = 16)
plot(log2(AGG$GenerationLength_d),AGG$FrA, col = ColA, ylim = c(0,0.6), xlab = 'log2(GT)', main = 'FrA', cex = 2); abline(h =0.25, lt = 2, col = 'red')
plot(log2(AGG$GenerationLength_d),AGG$FrT, col = ColT, ylim = c(0,0.6), xlab = 'log2(GT)', main = 'FrT', cex = 2); abline(h =0.25, lt = 2, col = 'red')
plot(log2(AGG$GenerationLength_d),AGG$FrG, col = ColG, ylim = c(0,0.6), xlab = 'log2(GT)', main = 'FrG', cex = 2); abline(h =0.25, lt = 2, col = 'red')
plot(log2(AGG$GenerationLength_d),AGG$FrC, col = ColC, ylim = c(0,0.6), xlab = 'log2(GT)', main = 'FrC', cex = 2); abline(h =0.25, lt = 2, col = 'red')
mtext("log2(GT) = 11.08294 - 0.12 scale(FrT) + 0.45 scale(FrC)", outer = TRUE, cex = 1.5)
########### question 2: which genes better correlate with GT (why T in ATP6,COX3 and ND4 do not correlate with GT and high absolute value - fast replication, no tRNA before them?)
## T is negatively and C is positively (T->C)
VecOfGenes = c('COX1','COX2','ATP8','ATP6','COX3','ND3','ND4L','ND4','ND5','ND6','CytB','ND1','ND2') # ND1 ND2 ND6
length(VecOfGenes)
par(mfcol=c(4,13), cex.main = 2, cex.lab = 2, cex = 2, pch = 16)
for (i in 1:length(VecOfGenes))
{ # i = 1
OneGene = SynNucGT[SynNucGT$Gene == VecOfGenes[i],]
main = VecOfGenes[i]
plot(log2(OneGene$GenerationLength_d),OneGene$FrA, col = ColA, main = main, ylim = c(0,0.7), xlab = '', ylab = '')
plot(log2(OneGene$GenerationLength_d),OneGene$FrT, col = ColT, main = main, ylim = c(0,0.7), xlab = '', ylab = '')
plot(log2(OneGene$GenerationLength_d),OneGene$FrG, col = ColG, main = main, ylim = c(0,0.7), xlab = '', ylab = '')
plot(log2(OneGene$GenerationLength_d),OneGene$FrC, col = ColC, main = main, ylim = c(0,0.7), xlab = '', ylab = '')
}
dev.off()
View(AGG)
A
cor.test(log2(AGG$GenerationLength_d),AGG$FrA, method = 'spearman')
###################################
######
###################################
rm(list=ls(all=TRUE))
############
library(gridExtra) # install.packages("gridExtra")
library(grid)
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
names(SynNuc)
### make ND6 complementary:
NotND6 = SynNuc[SynNuc$Gene != 'ND6',]
ND6 = SynNuc[SynNuc$Gene == 'ND6',]
A = ND6$NeutralT
T = ND6$NeutralA
G = ND6$NeutralC
C = ND6$NeutralG
ND6$NeutralA = A
ND6$NeutralT = T
ND6$NeutralG = G
ND6$NeutralC = C
SynNuc = rbind(NotND6,ND6)
### count fraction of nucleotides
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$TAXON = SynNuc$Class
VecOfTaxa = unique(SynNuc$TAXON)
############# GENERATION LENGTH FOR ALL MAMMALS
GT = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GT$Species = gsub(' ','_',GT$Scientific_name)
length(unique(GT$Species))
summary(GT$AdultBodyMass_g)     # 2        21        71    136058       614 154321304
summary(GT$GenerationLength_d)  # 129.0   624.4  1101.1  1578.8  2064.3 18980.0 # max = 18980 days => 52 years. ok
GT = GT[,c(11,13)]
summary(GT$GenerationLength_d)
############ merge (work only with mammals since GT is only for mammals)
SynNucGT = merge(GT,SynNuc)
length(unique(SynNucGT$Species))  # 649 species
table(SynNucGT$TAXON)
########### question 1: which nucleotides better correlate with GT: log2(GT) = 11 - 0.29*scale(FrT) + 0.33*scale(FrC) (in line with our mutational spectrum result that T->C correlates with generation time)
AGG = aggregate(list(SynNucGT$FrA,SynNucGT$FrT,SynNucGT$FrG,SynNucGT$FrC), by = list(SynNucGT$Species,SynNucGT$GenerationLength_d), FUN = mean)
names(AGG) = c('Species','GenerationLength_d','FrA','FrT','FrG','FrC')
cor.test(log2(AGG$GenerationLength_d),AGG$FrA, method = 'spearman') # rho -0.2506844; p = 1.434e-10
cor.test(log2(AGG$GenerationLength_d),AGG$FrT, method = 'spearman') # rho -0.3034538; p = 5.159e-15
cor.test(log2(AGG$GenerationLength_d),AGG$FrG, method = 'spearman')
cor.test(log2(AGG$GenerationLength_d),AGG$FrC, method = 'spearman') # rho 0.4741843;  p < 2.2e-16
A <- lm(log2(AGG$GenerationLength_d) ~ AGG$FrA + AGG$FrT + AGG$FrC); summary(A) # A is not significant - delete it
A <- lm(log2(AGG$GenerationLength_d) ~ AGG$FrT + AGG$FrC); summary(A)
A <- lm(log2(AGG$GenerationLength_d) ~ scale(AGG$FrT) + scale(AGG$FrC)); summary(A) # log2(GT) = 11.08294 - 0.12 scale(FrT) + 0.45 scale(FrC)
###################################
######
###################################
rm(list=ls(all=TRUE))
############
library(gridExtra) # install.packages("gridExtra")
library(grid)
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
names(SynNuc)
### make ND6 complementary:
NotND6 = SynNuc[SynNuc$Gene != 'ND6',]
ND6 = SynNuc[SynNuc$Gene == 'ND6',]
A = ND6$NeutralT
T = ND6$NeutralA
G = ND6$NeutralC
C = ND6$NeutralG
ND6$NeutralA = A
ND6$NeutralT = T
ND6$NeutralG = G
ND6$NeutralC = C
SynNuc = rbind(NotND6,ND6)
### count fraction of nucleotides
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$TAXON = SynNuc$Class
VecOfTaxa = unique(SynNuc$TAXON)
############# GENERATION LENGTH FOR ALL MAMMALS
GT = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GT$Species = gsub(' ','_',GT$Scientific_name)
length(unique(GT$Species))
summary(GT$AdultBodyMass_g)     # 2        21        71    136058       614 154321304
summary(GT$GenerationLength_d)  # 129.0   624.4  1101.1  1578.8  2064.3 18980.0 # max = 18980 days => 52 years. ok
GT = GT[,c(11,13)]
summary(GT$GenerationLength_d)
############ merge (work only with mammals since GT is only for mammals)
SynNucGT = merge(GT,SynNuc)
length(unique(SynNucGT$Species))  # 649 species
table(SynNucGT$TAXON)
########### question 1: which nucleotides better correlate with GT: log2(GT) = 11 - 0.29*scale(FrT) + 0.33*scale(FrC) (in line with our mutational spectrum result that T->C correlates with generation time)
AGG = aggregate(list(SynNucGT$FrA,SynNucGT$FrT,SynNucGT$FrG,SynNucGT$FrC), by = list(SynNucGT$Species,SynNucGT$GenerationLength_d), FUN = mean)
names(AGG) = c('Species','GenerationLength_d','FrA','FrT','FrG','FrC')
### start from pairwise correlations and go to multiple linear model:
cor.test(log2(AGG$GenerationLength_d),AGG$FrA, method = 'spearman') # rho -0.2681362; p = 3.635e-12
cor.test(log2(AGG$GenerationLength_d),AGG$FrT, method = 'spearman') # rho -0.3066279; p = 1.287e-15
cor.test(log2(AGG$GenerationLength_d),AGG$FrG, method = 'spearman') # rho  0.1804395; p = 3.665e-06
cor.test(log2(AGG$GenerationLength_d),AGG$FrC, method = 'spearman') # rho  0.4717114;  p < 2.2e-16
### for multiple linear backward model we choosed A,T & C, on the second step we delete A from the model and the final model is just with T and C
lm(log2(AGG$GenerationLength_d) ~ scale(AGG$FrT) + scale(AGG$FrC)); summary(A) # log2(GT) = 11.08294 - 0.12 scale(FrT) + 0.45 scale(FrC)
A <- lm(log2(AGG$GenerationLength_d) ~ scale(AGG$FrT) + scale(AGG$FrC)); summary(A) # log2(GT) = 11.08294 - 0.12 scale(FrT) + 0.45 scale(FrC)
###################################
######
###################################
rm(list=ls(all=TRUE))
############
library(gridExtra) # install.packages("gridExtra")
library(grid)
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
names(SynNuc)
### make ND6 complementary:
NotND6 = SynNuc[SynNuc$Gene != 'ND6',]
ND6 = SynNuc[SynNuc$Gene == 'ND6',]
A = ND6$NeutralT
T = ND6$NeutralA
G = ND6$NeutralC
C = ND6$NeutralG
ND6$NeutralA = A
ND6$NeutralT = T
ND6$NeutralG = G
ND6$NeutralC = C
SynNuc = rbind(NotND6,ND6)
### count fraction of nucleotides
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$TAXON = SynNuc$Class
VecOfTaxa = unique(SynNuc$TAXON)
############# GENERATION LENGTH FOR ALL MAMMALS
GT = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GT$Species = gsub(' ','_',GT$Scientific_name)
length(unique(GT$Species))
summary(GT$AdultBodyMass_g)     # 2        21        71    136058       614 154321304
summary(GT$GenerationLength_d)  # 129.0   624.4  1101.1  1578.8  2064.3 18980.0 # max = 18980 days => 52 years. ok
GT = GT[,c(11,13)]
summary(GT$GenerationLength_d)
############ merge (work only with mammals since GT is only for mammals)
SynNucGT = merge(GT,SynNuc)
length(unique(SynNucGT$Species))  # 649 species
table(SynNucGT$TAXON)
########### question 1: which nucleotides better correlate with GT: log2(GT) = 11 - 0.29*scale(FrT) + 0.33*scale(FrC) (in line with our mutational spectrum result that T->C correlates with generation time)
AGG = aggregate(list(SynNucGT$FrA,SynNucGT$FrT,SynNucGT$FrG,SynNucGT$FrC), by = list(SynNucGT$Species,SynNucGT$GenerationLength_d), FUN = mean)
names(AGG) = c('Species','GenerationLength_d','FrA','FrT','FrG','FrC')
### start from pairwise correlations and go to multiple linear model:
cor.test(log2(AGG$GenerationLength_d),AGG$FrA, method = 'spearman') # rho -0.2681362; p = 3.635e-12
cor.test(log2(AGG$GenerationLength_d),AGG$FrT, method = 'spearman') # rho -0.3066279; p = 1.287e-15
cor.test(log2(AGG$GenerationLength_d),AGG$FrG, method = 'spearman') # rho  0.1804395; p = 3.665e-06
cor.test(log2(AGG$GenerationLength_d),AGG$FrC, method = 'spearman') # rho  0.4717114;  p < 2.2e-16
### for multiple linear backward model we choosed A,T & C, on the second step we delete A from the model and the final model is just with T and C
A <- lm(log2(AGG$GenerationLength_d) ~ AGG$FrA + AGG$FrT + AGG$FrC); summary(A) # A is not significant - delete it
A <- lm(log2(AGG$GenerationLength_d) ~ AGG$FrT + AGG$FrC); summary(A)
A <- lm(log2(AGG$GenerationLength_d) ~ scale(AGG$FrT) + scale(AGG$FrC)); summary(A) # log2(GT) = 11.08294 - 0.12 scale(FrT) + 0.45 scale(FrC)
# Adjusted R-squared:  0.2321 - not bad!!!
## next step is PIC, ALINA!!!!!! SOS!!!!!
# plot it:
pdf("../../Body/4Figures/WholeGenomeAnalyses.MutagensWithinMammalsNoOverlap.R.01.pdf", width = 50, height = 30)
#ColG = rainbow(4)[1]
#ColT = rainbow(4)[2]
#ColC = rainbow(4)[3]
#ColA = rainbow(4)[4]
ColG = rgb(0.1,0.1,0.1,0.2)
ColT = rgb(0.1,0.1,1,0.2)
ColC = rgb(0.1,1,0.1,0.2)
ColA = rgb(1,0.1,0.1,0.2)
par(oma = c(2, 2, 0, 0), cex.main = 2, cex.lab = 1.5, cex = 6, pch =16)
plot(log2(AGG$GenerationLength_d),AGG$FrA, col = ColA, ylim = c(0,0.6), xlab = '', ylab = '', main = ''); par(new=TRUE);
plot(log2(AGG$GenerationLength_d),AGG$FrT, col = ColT, ylim = c(0,0.6), xlab = '', ylab = '', main = ''); par(new=TRUE);
plot(log2(AGG$GenerationLength_d),AGG$FrG, col = ColG, ylim = c(0,0.6), xlab = '', ylab = '', main = ''); par(new=TRUE);
plot(log2(AGG$GenerationLength_d),AGG$FrC, col = ColC, ylim = c(0,0.6), xlab = 'log2(Generation Time in days)', ylab = 'Nucleotide Content', main = ''); par(new=TRUE);
abline(h =0.25, lt = 1, col = 'red');
legend("topright",legend=c('A','C','T','G'), col = c(ColA,ColC,ColT,ColG), pch = 16, horiz = FALSE)
grid.newpage()
par(mfrow=c(2,2))
grid.table(res)
par(mfrow=c(2,2), oma = c(0, 0, 2, 0),cex.main = 2, cex.lab = 2, cex = 2, pch = 16)
plot(log2(AGG$GenerationLength_d),AGG$FrA, col = ColA, ylim = c(0,0.6), xlab = 'log2(GT)', main = 'FrA', cex = 2); abline(h =0.25, lt = 2, col = 'red')
plot(log2(AGG$GenerationLength_d),AGG$FrT, col = ColT, ylim = c(0,0.6), xlab = 'log2(GT)', main = 'FrT', cex = 2); abline(h =0.25, lt = 2, col = 'red')
plot(log2(AGG$GenerationLength_d),AGG$FrG, col = ColG, ylim = c(0,0.6), xlab = 'log2(GT)', main = 'FrG', cex = 2); abline(h =0.25, lt = 2, col = 'red')
plot(log2(AGG$GenerationLength_d),AGG$FrC, col = ColC, ylim = c(0,0.6), xlab = 'log2(GT)', main = 'FrC', cex = 2); abline(h =0.25, lt = 2, col = 'red')
mtext("log2(GT) = 11.08294 - 0.12 scale(FrT) + 0.45 scale(FrC)", outer = TRUE, cex = 1.5)
########### question 2: which genes better correlate with GT (why T in ATP6,COX3 and ND4 do not correlate with GT and high absolute value - fast replication, no tRNA before them?)
## T is negatively and C is positively (T->C)
VecOfGenes = c('COX1','COX2','ATP8','ATP6','COX3','ND3','ND4L','ND4','ND5','ND6','CytB','ND1','ND2') # ND1 ND2 ND6
length(VecOfGenes)
par(mfcol=c(4,13), cex.main = 2, cex.lab = 2, cex = 2, pch = 16)
for (i in 1:length(VecOfGenes))
{ # i = 1
OneGene = SynNucGT[SynNucGT$Gene == VecOfGenes[i],]
main = VecOfGenes[i]
plot(log2(OneGene$GenerationLength_d),OneGene$FrA, col = ColA, main = main, ylim = c(0,0.7), xlab = '', ylab = '')
plot(log2(OneGene$GenerationLength_d),OneGene$FrT, col = ColT, main = main, ylim = c(0,0.7), xlab = '', ylab = '')
plot(log2(OneGene$GenerationLength_d),OneGene$FrG, col = ColG, main = main, ylim = c(0,0.7), xlab = '', ylab = '')
plot(log2(OneGene$GenerationLength_d),OneGene$FrC, col = ColC, main = main, ylim = c(0,0.7), xlab = '', ylab = '')
}
dev.off()
