NotND6$FrC = NotND6$NeutralC / (NotND6$NeutralA + NotND6$NeutralT + NotND6$NeutralG + NotND6$NeutralC)
ND6 = SynNuc[SynNuc$Gene == 'ND6',]
ND6$FrA = ND6$NeutralT / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrT = ND6$NeutralA / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrG = ND6$NeutralC / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
ND6$FrC = ND6$NeutralG / (ND6$NeutralA + ND6$NeutralT + ND6$NeutralG + ND6$NeutralC)
SynNuc = rbind(NotND6,ND6)
VecOfTaxa = unique(SynNuc$Class)
SynNucAMPH = SynNuc[SynNuc$Class == 'Amphibia',]; length(unique(SynNucAMPH$Species))
SynNucREPT = SynNuc[SynNuc$Class == 'Reptilia',]; length(unique(SynNucREPT$Species))
SynNucACTI = SynNuc[SynNuc$Class == 'Actinopterygii',]; length(unique(SynNucACTI$Species))
AGG = aggregate(list(SynNuc$FrA,SynNuc$FrT,SynNuc$FrG,SynNuc$FrC), by = list(SynNuc$Species), FUN = mean)
names(AGG)=c('Species','FrA','FrT','FrG','FrC')
View(AGG)
amph = merge(amph,AGG, by = 'Species'); # just 10
rept = merge(rept,AGG, by = 'Species'); # just 17
fish = merge(fish,AGG, by = 'Species'); # 86
######### try cor.test between G and temperature: amph - nothing; rept - nothing; fishes - T and G
cor.test(amph$T..oC.,amph$FrA, method = 'spearman')
c<-lm(fish$T..oC. ~ scale(fish$FrA) + scale(fish$FrT) + scale(fish$FrG)); summary(c); # similar negative coefficients -> either T is also partially driven by temperature, or it is indurectly linked through ecology.
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
library(ape)
install.packages("ape")
library(ape)
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
View(fish)
data = fish[which(as.character(fish$Species) %in% tree$tip.label),]
df_vec <- as.character(fish$Species)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
row.names(data) = data$Species
tree2 <- drop.tip(tree, b)
contrasts <- apply(data, 2, pic, tree2)
View(data)
contrasts <- apply(data[, -1], 2, pic, tree2)
nrow(data) == length(tree2$tip.label)
contrasts <- apply(data[, -c(1,5)], 2, pic, tree2)
TempData = data[, -c('Species', 'Tax')]
TempData = data[, -c(1, 5)]
contrasts <- apply(TempData, 2, pic, tree2)
names(contrasts) = names(TempData)
View(contrasts)
cor.test(contrasts$T..oC.,fish$FrA, method = 'spearman') # a bit positive:                                   # 0.2095367, 0.05283
contrasts <- as.data.frame(apply(TempData, 2, pic, tree2))
names(contrasts) = names(TempData)
cor.test(contrasts$T..oC.,fish$FrA, method = 'spearman') # a bit positive:                                   # 0.2095367, 0.05283
cor.test(contrasts$T..oC., contrasts$FrA, method = 'spearman') # a bit positive:                                   # 0.2095367, 0.05283
cor.test(contrasts$T..oC., contrasts$FrT, method = 'spearman') # a bit negative. Warm fishes live longer!?         # -0.2669443; 0.01297
cor.test(contrasts$T..oC., contrasts$FrA, method = 'spearman') # rho 0.3002067                                 # 0.2095367, 0.05283
cor.test(contrasts$T..oC., contrasts$FrT, method = 'spearman') # -0.2361942         # -0.2669443; 0.01297
cor.test(contrasts$T..oC., contrasts$FrG, method = 'spearman') # a bit negative. Effect of the temperature alone!? # -0.2170128; 0.04475
cor.test(contrasts$T..oC., contrasts$FrC, method = 'spearman') # nothing
c<-lm(contrasts$T..oC. ~ scale(contrasts$FrA) + scale(contrasts$FrT) + scale(contrasts$FrG)); summary(c); # similar negative coefficients -> either T is also partially driven by temperature, or it is indurectly linked through ecology.
b<-lm(contrasts$T..oC. ~ scale(contrasts$FrT) + scale(contrasts$FrG)); summary(b) # similar negative coefficients -> either T is also partially driven by temperature, or it is indurectly linked through ecology.
Ref = read.table("../../Body/1Raw/RevisedCambridgeReferenceSequences.fasta", header = FALSE, sep = '')
View(Ref)
Ref = paste(Ref, collapse = TRUE)
Ref = paste(Ref, collapse = '')
Ref
Ref
Ref = read.table("../../Body/1Raw/RevisedCambridgeReferenceSequences.fasta", header = FALSE, sep = '')
View(Ref)
as.character(Ref$V1)
Ref = paste(as.character(Ref$V1), collapse = '')
Ref
Ref = unlist(strsplit(Ref))
Ref = unlist(strsplit(Ref, ''))
length(Ref)
SomMut = read.table("../../Body/1Raw/TissueSpecificMtDNAMutationsGTEx.txt", header = TRUE, sep = '\t')
View(SomMut)
table(Ref)
SomMut = read.table("../../Body/1Raw/TissueSpecificMtDNAMutationsGTEx.txt", header = TRUE, sep = '\t')
View(SomMut)
View(SomMut)
SomMut$Position = gsub('_(.*)','',SomMut$Mutation)  # gsub("_(.*)",'',READS$patient)
View(SomMut)
SomMut$DerivedAllele = gsub('(.*)_','',SomMut$Mutation)  # gsub("_(.*)",'',READS$patient)
View(SomMut)
Position = seq(1:length(Ref))
RefSeq = data.frame(Position,Ref)
View(RefSeq)
rm(list=ls(all=TRUE))
############ read human ref seq:
Ref = read.table("../../Body/1Raw/RevisedCambridgeReferenceSequences.fasta", header = FALSE, sep = '')
Ref = paste(as.character(Ref$V1), collapse = '')
Ref = unlist(strsplit(Ref, '')); length(Ref) # 16569
table(Ref)
# A    C    G    N    T
# 5124 5181 2169    1 4094
Position = seq(1:length(Ref))
RefSeq = data.frame(Position,Ref); names(RefSeq)=c('Position','DerivedAllele')
############ read GTEx mutations:
SomMut = read.table("../../Body/1Raw/TissueSpecificMtDNAMutationsGTEx.txt", header = TRUE, sep = '\t')
SomMut$Position = gsub('_(.*)','',SomMut$Mutation)  # gsub("_(.*)",'',READS$patient)
SomMut$DerivedAllele = gsub('(.*)_','',SomMut$Mutation)  # gsub("_(.*)",'',READS$patient)
Final = c()
for (step in 1:nrow(WholeGenomes))
{ # step = 3
if (WholeGenomes$Quality[step] == 1)
{
species = as.character(WholeGenomes$Species[step])
gene = as.character(WholeGenomes$Gene[step])
############ translate codons to aminoacids
### make triplets
Codons = as.character(WholeGenomes$Codons[step])
AminoSeq = as.character(WholeGenomes$ModifiedAmino[step])
AminoSeqVec = unlist(strsplit(AminoSeq,''))
length(Codons)
length(AminoSeq)
CodonsVec = unlist(strsplit(Codons,''))
StartNuc = 1
CodonsVec1 = c()
# if length(CodonsVec)/3 == integer
for (i in 1:(length(CodonsVec)/3))
{
CodonsVec1 = c(CodonsVec1,paste(CodonsVec[StartNuc : (StartNuc+2)],collapse = ''))
StartNuc = StartNuc+3
}
TranslationalTest = data.frame(CodonsVec1,AminoSeqVec)
### translate them
Temp = as.character(TranslationalTest$CodonsVec1)
Temp = gsub("TTT|TTC",'F',Temp)
Temp = gsub("TTA|TTG|CTT|CTC|CTA|CTG",'L',Temp)
Temp = gsub("ATT|ATC",'I',Temp)
Temp = gsub("ATG|ATA",'M',Temp)
Temp = gsub("GTT|GTC|GTA|GTG",'V',Temp)
Temp = gsub("TCT|TCC|TCA|TCG|AGT|AGC",'S',Temp)
Temp = gsub("CCT|CCC|CCA|CCG",'P',Temp)
Temp = gsub("ACT|ACC|ACA|ACG",'T',Temp)
Temp = gsub("GCT|GCC|GCA|GCG",'A',Temp)
Temp = gsub("TAT|TAC",'Y',Temp)
Temp = gsub("AGA|AGG|TAA|TAG",'*',Temp)
Temp = gsub("CAT|CAC",'H',Temp)
Temp = gsub("CAA|CAG",'Q',Temp)
Temp = gsub("AAT|AAC",'N',Temp)
Temp = gsub("AAA|AAG",'K',Temp)
Temp = gsub("GAT|GAC",'D',Temp)
Temp = gsub("GAA|GAG",'E',Temp)
Temp = gsub("TGT|TGC",'C',Temp)
Temp = gsub("TGG|TGA",'W',Temp)
Temp = gsub("CGT|CGC|CGA|CGG",'R',Temp)
Temp = gsub("GGT|GGC|GGA|GGG",'G',Temp)
TranslationalTest$TranslatedAa = Temp
nrow(TranslationalTest[TranslationalTest$TranslatedAa != TranslationalTest$AminoSeqVec,]) # should be zero
VecOfAllCodons = c('TTT','TTC','TTA','TTG','CTT','CTC','CTA','CTG','ATT','ATC','ATG','ATA','GTT','GTC','GTA','GTG','TCT','TCC','TCA','TCG','AGT','AGC','CCT','CCC','CCA','CCG','ACT','ACC','ACA','ACG','GCT','GCC','GCA','GCG','TAT','TAC','AGA','AGG','TAA','TAG','CAT','CAC','CAA','CAG','AAT','AAC','AAA','AAG','GAT','GAC','GAA','GAG','TGT','TGC','TGG','TGA','CGT','CGC','CGA','CGG','GGT','GGC','GGA','GGG')
CodonUsage = c(VecOfAllCodons,as.character(TranslationalTest$CodonsVec1))
CU = data.frame(table(CodonUsage)); CU$Freq = CU$Freq-1
NamesOfCodons = as.character(CU$CodonUsage)
Line = c(species, gene, CU$Freq)
Final = rbind(Final,Line)
}
}
Names = c('Species','Gene',NamesOfCodons)
Final = as.data.frame(Final)
names(Final) = Names
str(Final$AAA)
Final <- data.frame(lapply(Final, as.character), stringsAsFactors=FALSE)
str(Final)
## count the number of A T G C in neutral positions of each gene (8 synon fourlfold codons)
Final$NeutralA = as.numeric(as.character(Final$CTA[1])) + as.numeric(Final$GTA) + as.numeric(Final$TCA) + as.numeric(Final$CCA)  + as.numeric(Final$ACA)  + as.numeric(Final$GCA)  + as.numeric(Final$CGA)  + as.numeric(Final$GGA)
Final$NeutralT = as.numeric(Final$CTT) + as.numeric(Final$GTT) + as.numeric(Final$TCT) + as.numeric(Final$CCT)  + as.numeric(Final$ACT)  + as.numeric(Final$GCT)  + as.numeric(Final$CGT)  + as.numeric(Final$GGT)
Final$NeutralG = as.numeric(Final$CTG) + as.numeric(Final$GTG) + as.numeric(Final$TCG) + as.numeric(Final$CCG)  + as.numeric(Final$ACG)  + as.numeric(Final$GCG)  + as.numeric(Final$CGG)  + as.numeric(Final$GGG)
Final$NeutralC = as.numeric(Final$CTC) + as.numeric(Final$GTC) + as.numeric(Final$TCC) + as.numeric(Final$CCC)  + as.numeric(Final$ACC)  + as.numeric(Final$GCC)  + as.numeric(Final$CGC)  + as.numeric(Final$GGC)
## merge with taxonomy
Taxa = read.table("../../Body/2Derived/full_table.txt", header = TRUE, sep = '\t')
Taxa = Taxa[,c(1,2)]
names(Taxa)=c('Species','Taxonomy')
nrow(Final)
Final = merge(Final,Taxa)
nrow(Final)  # somebody is missing!!! check it!!
## derive class from taxonomy
Final$Class = 'SOLYANKA';
for (i in 1:nrow(Final))
{
if (length(grep('Mammalia', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'Mammalia'; }
if (length(grep('Amphibia', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'Amphibia'; }
if (length(grep('Actinopterygii', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'Actinopterygii'; }
if (length(grep('Aves', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'Aves'; }
if (length(grep('Lepidosauria', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'Reptilia'; }
if (length(grep('Testudines', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'Reptilia'; }
if (length(grep('Crocodylia', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'Reptilia'; }
if (length(grep('Dipnoi', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'AncientFish'; }
if (length(grep('Coelacanthiformes', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'AncientFish'; }
if (length(grep('Cyclostomata', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'AncientFish'; }
if (length(grep('Chondrichthyes', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'AncientFish'; }
if (length(grep('Cephalochordata', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'AncientFish'; }
if (length(grep('Tunicata', Final$Taxonomy[i])) == 1) {Final$Class[i] = 'AncientFish'; }
}
table(Final$Class)
## print it out:
write.table(Final, "../../Body/3Results/AllGenesCodonUsage.txt", sep = '\t')
#### how many species has all 13 genes with high quality?
test = data.frame(table(Final$Species))
nrow(test[test$Freq == 13,]) # 3834
nrow(test[test$Freq != 13,]) # 43
nrow(test[test$Freq < 13,]) # 22
nrow(test[test$Freq > 13,]) # 21
#### who are they?
less = test[test$Freq < 13,]$Var1
# Aplidium_conicum          Asymmetron_inferum        Asymmetron_lucayanum      Botrylloides_leachii      Botrylloides_pizoni       Branchiostoma_belcheri    Branchiostoma_floridae    Branchiostoma_japonicum
#[9] Branchiostoma_lanceolatum Chionodraco_myersi        Ciona_intestinalis        Datnioides_microlepis     Epigonichthys_cultellus   Epigonichthys_maldivensis Herdmania_momus           Myrichthys_maculosus
#[17] Pelomedusa_subrufa        Podiceps_cristatus        Prioniturus_luconensis    Psittacus_erithacus       Sphenodon_punctatus       Styela_plicata
table(Final[Final$Species %in% less,]$Class)
#Actinopterygii    AncientFish           Aves       Reptilia
# 36             48             36             23
more = test[test$Freq > 13,]$Var1
#Aceros_waldeni             Ardeola_bacchus            Botaurus_stellaris         Butorides_striata          Champsocephalus_gunnari    Egretta_sacra              Gorsachius_magnificus
#[8] Heteronotia_binoei         Hoplobatrachus_rugulosus   Ixobrychus_eurhythmus      Ixobrychus_sinensis        Nannopterum_brasilianus    Notiomystis_cincta         Penelopides_panini
#[15] Phalacrocorax_carbo        Phoebastria_albatrus       Phoebastria_immutabilis    Phoebastria_nigripes       Thalassarche_melanophrys   Tropiocolotes_tripolitanus Turdus_philomelos
table(Final[Final$Species %in% more,]$Class)
#Actinopterygii       Amphibia           Aves       Reptilia
#16             14            262             33
rm(list=ls(all=TRUE))
############ read human ref seq:
Ref = read.table("../../Body/1Raw/RevisedCambridgeReferenceSequences.fasta", header = FALSE, sep = '')
Ref = paste(as.character(Ref$V1), collapse = '')
Ref = unlist(strsplit(Ref, '')); length(Ref) # 16569
table(Ref)
# A    C    G    N    T
# 5124 5181 2169    1 4094
Position = seq(1:length(Ref))
RefSeq = data.frame(Position,Ref); names(RefSeq)=c('Position','DerivedAllele')
############ read GTEx mutations:
SomMut = read.table("../../Body/1Raw/TissueSpecificMtDNAMutationsGTEx.txt", header = TRUE, sep = '\t')
SomMut$Position = gsub('_(.*)','',SomMut$Mutation)  # gsub("_(.*)",'',READS$patient)
SomMut$DerivedAllele = gsub('(.*)_','',SomMut$Mutation)  # gsub("_(.*)",'',READS$patient)
Som = merge(SomMut,RefSeq)
Som = merge(SomMut,RefSeq, by = 'Position', all.x = TRUE)
View(Som)
rm(list=ls(all=TRUE))
############ read human ref seq:
Ref = read.table("../../Body/1Raw/RevisedCambridgeReferenceSequences.fasta", header = FALSE, sep = '')
Ref = paste(as.character(Ref$V1), collapse = '')
Ref = unlist(strsplit(Ref, '')); length(Ref) # 16569
table(Ref)
# A    C    G    N    T
# 5124 5181 2169    1 4094
Position = seq(1:length(Ref))
RefSeq = data.frame(Position,Ref); names(RefSeq)=c('Position','AncestralAllele')
############ read GTEx mutations:
SomMut = read.table("../../Body/1Raw/TissueSpecificMtDNAMutationsGTEx.txt", header = TRUE, sep = '\t')
SomMut$Position = gsub('_(.*)','',SomMut$Mutation)  # gsub("_(.*)",'',READS$patient)
SomMut$DerivedAllele = gsub('(.*)_','',SomMut$Mutation)  # gsub("_(.*)",'',READS$patient)
Som = merge(SomMut,RefSeq, by = 'Position', all.x = TRUE)
Som = merge(SomMut,RefSeq, by = 'Position')
View(Som)
Som = Som[Som$DerivedAllele != Som$AncestralAllele,]
table(Som$tissue)
View(Som)
Som$Substitution = paste(Som$AncestralAllele,Som$DerivedAllele, sep = '_')
table(Som$Substitution)
rm(list=ls(all=TRUE))
### reading Input
Data = read.table("../../Body/1Raw/'12864_2017_4287_MOESM2_ESM.csv'", header = FALSE, sep = '')
# Data = read.csv('12864_2017_4287_MOESM2_ESM.csv')
NumberOfIndividuals = length(unique(Data$sampleID)); NumberOfIndividuals
### Adding random age to each sampleID
AgeVector = runif(n=NumberOfIndividuals, min=17, max=85)
Age = data.frame(unique(Data$sampleID),AgeVector); names(Age)=c('sampleID','Age')
Data = merge(Data,Age)
### Analyses
Data$Subs = paste(Data$reference_allele,Data$alternative_allele, sep = '_')
VecOfSubs = unique(Data$Subs); length(VecOfSubs) # 12
ALL = data.frame(VecOfSubs); names(ALL) = c('Subs')
rm(list=ls(all=TRUE))
### reading Input
Data = read.table("../../Body/1Raw/12864_2017_4287_MOESM2_ESM.csv", header = FALSE, sep = '')
# Data = read.csv('12864_2017_4287_MOESM2_ESM.csv')
NumberOfIndividuals = length(unique(Data$sampleID)); NumberOfIndividuals
### Adding random age to each sampleID
AgeVector = runif(n=NumberOfIndividuals, min=17, max=85)
Age = data.frame(unique(Data$sampleID),AgeVector); names(Age)=c('sampleID','Age')
Data = merge(Data,Age)
Data = read.table("../../Body/1Raw/12864_2017_4287_MOESM2_ESM.csv", header = FALSE, sep = '')
View(Age)
rm(list=ls(all=TRUE))
### reading Input
Data = read.table("../../Body/1Raw/12864_2017_4287_MOESM2_ESM.csv", header = FALSE, sep = '')
Data = read.table("../../Body/1Raw/12864_2017_4287_MOESM2_ESM.csv", header = FALSE, sep = '\t')
View(Data)
rm(list=ls(all=TRUE))
### reading Input
Data = read.csv("../../Body/1Raw/12864_2017_4287_MOESM2_ESM.csv")
# Data = read.csv('12864_2017_4287_MOESM2_ESM.csv')
NumberOfIndividuals = length(unique(Data$sampleID)); NumberOfIndividuals
### Adding random age to each sampleID
AgeVector = runif(n=NumberOfIndividuals, min=17, max=85)
Age = data.frame(unique(Data$sampleID),AgeVector); names(Age)=c('sampleID','Age')
Data = merge(Data,Age)
### Analyses
Data$Subs = paste(Data$reference_allele,Data$alternative_allele, sep = '_')
VecOfSubs = unique(Data$Subs); length(VecOfSubs) # 12
ALL = data.frame(VecOfSubs); names(ALL) = c('Subs')
View(Data)
hist(Data$ref_frequency)
hist(Data$alt_frequency)
par(mfrow=c(2,1))
hist(Data$ref_frequency)
hist(Data$alt_frequency)
par(mfrow=c(1,2))
hist(Data$ref_frequency)
hist(Data$alt_frequency)
par(mfrow=c(1,2))
hist(Data$ref_frequency, title = 'RefFreq')
hist(Data$alt_frequency)
par(mfrow=c(1,2))
hist(Data$ref_frequency, main = 'RefFreq')
hist(Data$alt_frequency)
par(mfrow=c(1,2))
hist(Data$ref_frequency, main = 'RefFreq')
hist(Data$alt_frequency, main = 'AltFreq')
rm(list=ls(all=TRUE))
### reading Input
Data = read.csv("../../Body/2Derived/Final_age.1.txt")
View(Data)
rm(list=ls(all=TRUE))
### reading Input
Data = read.table("../../Body/2Derived/Final_age.1.txt")
View(Data)
View(Data)
Alt = Data[Data$AltFreqThreshold < 0.5,]
View(Alt)
Agg = aggregate(list(Alt$FreqD1,Alt$FreqD2,Alt$FreqD3,Alt$FreqD4,Alt$FreqD5,Alt$FreqD6,Alt$FreqD7,Alt$FreqD8,Alt$FreqD9,Alt$FreqD10), by = Alt$Subs, FUN = sum)
Agg = aggregate(list(Alt$FreqD1,Alt$FreqD2,Alt$FreqD3,Alt$FreqD4,Alt$FreqD5,Alt$FreqD6,Alt$FreqD7,Alt$FreqD8,Alt$FreqD9,Alt$FreqD10), by = list(Alt$Subs), FUN = sum)
View(Agg)
names(Agg) = c('FreqD1','FreqD2','FreqD3','FreqD4','FreqD5','FreqD6','FreqD7','FreqD8','FreqD9','FreqD10')
View(Agg)
View(Agg)
Agg = aggregate(list(Alt$FreqD1,Alt$FreqD2,Alt$FreqD3,Alt$FreqD4,Alt$FreqD5,Alt$FreqD6,Alt$FreqD7,Alt$FreqD8,Alt$FreqD9,Alt$FreqD10), by = list(Alt$Subs), FUN = sum)
View(Agg)
rm(list=ls(all=TRUE))
### reading Input
Data = read.table("../../Body/2Derived/Final_age.1.txt")
Alt = Data[Data$AltFreqThreshold < 0.5,] # I expect that alternatie alleles are rare.
Alt = Data[Data$AltFreqThreshold < 0.5,] # I expect that alternatie alleles are rare.
Agg = aggregate(list(Alt$FreqD1,Alt$FreqD2,Alt$FreqD3,Alt$FreqD4,Alt$FreqD5,Alt$FreqD6,Alt$FreqD7,Alt$FreqD8,Alt$FreqD9,Alt$FreqD10), by = list(Alt$Subs), FUN = sum)
names(Agg) = c('Subs','FreqD1','FreqD2','FreqD3','FreqD4','FreqD5','FreqD6','FreqD7','FreqD8','FreqD9','FreqD10')
cor.test(Agg)
View(Agg)
AggT = t(Agg)
View(Alt)
AggT = data.frame(t(Agg))
View(AggT)
View(Agg)
AggT = data.frame(t(Agg[,c(2:11)]))
View(AggT)
rm(list=ls(all=TRUE))
### reading Input
Data = read.table("../../Body/2Derived/Final_age.1.txt")
Alt = Data[Data$AltFreqThreshold < 0.5,] # I expect that alternatie alleles are rare.
Alt = Data[Data$AltFreqThreshold < 0.5,] # I expect that alternatie alleles are rare.
Agg = aggregate(list(Alt$FreqD1,Alt$FreqD2,Alt$FreqD3,Alt$FreqD4,Alt$FreqD5,Alt$FreqD6,Alt$FreqD7,Alt$FreqD8,Alt$FreqD9,Alt$FreqD10), by = list(Alt$Subs), FUN = sum)
names(Agg) = c('Subs','FreqD1','FreqD2','FreqD3','FreqD4','FreqD5','FreqD6','FreqD7','FreqD8','FreqD9','FreqD10')
View(Agg)
row.names(Agg)=c(Agg$Subs)
AggT = data.frame(t(Agg[,c(2:11)]))
View(AggT)
rm(list=ls(all=TRUE))
### reading Input
Data = read.table("../../Body/2Derived/Final_age.1.txt")
Alt = Data[Data$AltFreqThreshold < 0.5,] # I expect that alternatie alleles are rare.
Alt = Data[Data$AltFreqThreshold < 0.5,] # I expect that alternatie alleles are rare.
Agg = aggregate(list(Alt$FreqD1,Alt$FreqD2,Alt$FreqD3,Alt$FreqD4,Alt$FreqD5,Alt$FreqD6,Alt$FreqD7,Alt$FreqD8,Alt$FreqD9,Alt$FreqD10), by = list(Alt$Subs), FUN = sum)
names(Agg) = c('Subs','FreqD1','FreqD2','FreqD3','FreqD4','FreqD5','FreqD6','FreqD7','FreqD8','FreqD9','FreqD10')
row.names(Agg)=c(Agg$Subs)
AggT = data.frame(t(Agg[,c(2:11)]))
View(AggT)
names(AggT) = Agg$Subs
View(AggT)
View(AggT)
AggT$Age = c(1:10)
View(AggT)
cor.test(AggT$G_A,AggT$Age)
cor.test(AggT$G_A,AggT$Age, method = 'spearman')
cor.test(AggT$T_C,AggT$Age, method = 'spearman')
cor.test(AggT$A_G,AggT$Age, method = 'spearman')
cor.test(AggT$C_T,AggT$Age, method = 'spearman')
cor.test(AggT$A_G,AggT$Age, method = 'spearman')
cor.test(AggT$G_A,AggT$Age, method = 'spearman')
cor.test(AggT$T_C,AggT$Age, method = 'spearman')
colnames(AggT)
AggT$Tv = (AggT$A_C + AggT$C_A + AggT$A_T + AggT$T_A + AggT$G_C + AggT$C_G + AggT$G_T + AggT$T_G)
AggT$Tv = (AggT$A_C + AggT$C_A + AggT$A_T + AggT$T_A + AggT$G_C + AggT$C_G + AggT$G_T + AggT$T_G)
AggT$Ts = (AggT$G_A + AggT$A_G + AggT$T_C + AggT$C_T)
cor.test(AggT$Ts,AggT$Age, method = 'spearman') # positive trend
cor.test(AggT$Tv,AggT$Age, method = 'spearman') # zero!
cor.test(AggT$G_A,AggT$Age, method = 'spearman') # positive trend
cor.test(AggT$G_A,AggT$Age, method = 'spearman') # positive trend
cor.test(AggT$T_C,AggT$Age, method = 'spearman') # positive trend
cor.test((AggT$G_A + AggT$T_C),AggT$Age, method = 'spearman') # positive trend
rm(list=ls(all=TRUE))
### reading Input
Data = read.table("../../Body/2Derived/Final_age.1.txt")
Alt = Data[Data$AltFreqThreshold < 0.3,] # I expect that alternatie alleles are rare.
View(Alt)
Alt = Data[Data$AltFreqThreshold < 0.5,] # I expect that alternatie alleles are rare.
Agg = aggregate(list(Alt$FreqD1,Alt$FreqD2,Alt$FreqD3,Alt$FreqD4,Alt$FreqD5,Alt$FreqD6,Alt$FreqD7,Alt$FreqD8,Alt$FreqD9,Alt$FreqD10), by = list(Alt$Subs), FUN = sum)
names(Agg) = c('Subs','FreqD1','FreqD2','FreqD3','FreqD4','FreqD5','FreqD6','FreqD7','FreqD8','FreqD9','FreqD10')
Agg$Subs
AggT = data.frame(t(Agg[,c(2:11)])); names(AggT) = Agg$Subs
AggT$Age = c(1:10)
cor.test(AggT$G_A,AggT$Age, method = 'spearman') # positive trend
cor.test(AggT$T_C,AggT$Age, method = 'spearman') # positive trend
cor.test((AggT$G_A + AggT$T_C),AggT$Age, method = 'spearman') # positive trend
rm(list=ls(all=TRUE))
### reading Input
Data = read.table("../../Body/2Derived/Final_age.1.txt")
Alt = Data[Data$AltFreqThreshold < 0.3,] # I expect that alternatie alleles are rare.
Alt = Data[Data$AltFreqThreshold < 0.5,] # I expect that alternatie alleles are rare.
Agg = aggregate(list(Alt$FreqD1,Alt$FreqD2,Alt$FreqD3,Alt$FreqD4,Alt$FreqD5,Alt$FreqD6,Alt$FreqD7,Alt$FreqD8,Alt$FreqD9,Alt$FreqD10), by = list(Alt$Subs), FUN = sum)
names(Agg) = c('Subs','FreqD1','FreqD2','FreqD3','FreqD4','FreqD5','FreqD6','FreqD7','FreqD8','FreqD9','FreqD10')
Agg$Subs
AggT = data.frame(t(Agg[,c(2:11)])); names(AggT) = Agg$Subs
AggT$Age = c(1:10)
cor.test(AggT$G_A,AggT$Age, method = 'spearman') # positive trend
cor.test(AggT$T_C,AggT$Age, method = 'spearman') # positive trend
cor.test((AggT$G_A + AggT$T_C),AggT$Age, method = 'spearman') # positive trend
cor.test(AggT$A_G,AggT$Age, method = 'spearman') # nothing or negative
cor.test(AggT$C_T,AggT$Age, method = 'spearman') # nothing or negative
cor.test(AggT$C_T,AggT$Age, method = 'spearman') # nothing or negative
cor.test(AggT$A_G,AggT$Age, method = 'spearman') # nothing or negative
cor.test((AggT$C_T + AggT$A_G),AggT$Age, method = 'spearman') # nothing or negative
rm(list=ls(all=TRUE))
### reading Input
Data = read.table("../../Body/2Derived/Final_age.1.txt")
#Alt = Data[Data$AltFreqThreshold < 0.3,] # I expect that alternatie alleles are rare.
#Alt = Data[Data$AltFreqThreshold < 0.5,] # I expect that alternatie alleles are rare.
Alt = Data[Data$AltFreqThreshold < 0.2,] # I expect that alternatie alleles are rare.
Agg = aggregate(list(Alt$FreqD1,Alt$FreqD2,Alt$FreqD3,Alt$FreqD4,Alt$FreqD5,Alt$FreqD6,Alt$FreqD7,Alt$FreqD8,Alt$FreqD9,Alt$FreqD10), by = list(Alt$Subs), FUN = sum)
names(Agg) = c('Subs','FreqD1','FreqD2','FreqD3','FreqD4','FreqD5','FreqD6','FreqD7','FreqD8','FreqD9','FreqD10')
Agg$Subs
AggT = data.frame(t(Agg[,c(2:11)])); names(AggT) = Agg$Subs
AggT$Age = c(1:10)
cor.test(AggT$G_A,AggT$Age, method = 'spearman') # positive trend
c
cor.test(AggT$T_C,AggT$Age, method = 'spearman') # positive trend
cor.test((AggT$G_A + AggT$T_C),AggT$Age, method = 'spearman') # positive trend
cor.test(AggT$A_G,AggT$Age, method = 'spearman') # negative trend
cor.test(AggT$C_T,AggT$Age, method = 'spearman') # negative trend
cor.test(AggT$C_T,AggT$Age, method = 'spearman') # negative trend
cor.test((AggT$C_T + AggT$A_G),AggT$Age, method = 'spearman') # negative trend
colnames(AggT)
AggT$Tv = (AggT$A_C + AggT$C_A + AggT$A_T + AggT$T_A + AggT$G_C + AggT$C_G + AggT$G_T + AggT$T_G)
AggT$Ts = (AggT$G_A + AggT$A_G + AggT$T_C + AggT$C_T)
cor.test(AggT$Ts,AggT$Age, method = 'spearman') # zero!
cor.test(AggT$Tv,AggT$Age, method = 'spearman') # a bit positive
rm(list=ls(all=TRUE))
### reading Input
Data = read.table("../../Body/2Derived/Final_age.1.txt")
#Alt = Data[Data$AltFreqThreshold < 0.3,] # I expect that alternative alleles are rare.
#Alt = Data[Data$AltFreqThreshold < 0.5,] # I expect that alternative alleles are rare.
#Alt = Data[Data$AltFreqThreshold < 0.2,] # I expect that alternatie alleles are rare.
Agg = aggregate(list(Alt$FreqD1,Alt$FreqD2,Alt$FreqD3,Alt$FreqD4,Alt$FreqD5,Alt$FreqD6,Alt$FreqD7,Alt$FreqD8,Alt$FreqD9,Alt$FreqD10), by = list(Alt$Subs), FUN = sum)
names(Agg) = c('Subs','FreqD1','FreqD2','FreqD3','FreqD4','FreqD5','FreqD6','FreqD7','FreqD8','FreqD9','FreqD10')
Agg$Subs
AggT = data.frame(t(Agg[,c(2:11)])); names(AggT) = Agg$Subs
AggT$Age = c(1:10)
cor.test(AggT$G_A,AggT$Age, method = 'spearman') # positive trend
rm(list=ls(all=TRUE))
### reading Input
Data = read.table("../../Body/2Derived/Final_age.1.txt")
#Alt = Data[Data$AltFreqThreshold < 0.3,] # I expect that alternative alleles are rare.
#Alt = Data[Data$AltFreqThreshold < 0.5,] # I expect that alternative alleles are rare.
Alt = Data[Data$AltFreqThreshold < 1,] # I expect that alternatie alleles are rare.
Agg = aggregate(list(Alt$FreqD1,Alt$FreqD2,Alt$FreqD3,Alt$FreqD4,Alt$FreqD5,Alt$FreqD6,Alt$FreqD7,Alt$FreqD8,Alt$FreqD9,Alt$FreqD10), by = list(Alt$Subs), FUN = sum)
names(Agg) = c('Subs','FreqD1','FreqD2','FreqD3','FreqD4','FreqD5','FreqD6','FreqD7','FreqD8','FreqD9','FreqD10')
Agg$Subs
AggT = data.frame(t(Agg[,c(2:11)])); names(AggT) = Agg$Subs
AggT$Age = c(1:10)
cor.test(AggT$G_A,AggT$Age, method = 'spearman') # positive trend
cor.test(AggT$T_C,AggT$Age, method = 'spearman') # positive trend
cor.test((AggT$G_A + AggT$T_C),AggT$Age, method = 'spearman') # positive trend
cor.test(AggT$A_G,AggT$Age, method = 'spearman') # negative trend
cor.test(AggT$C_T,AggT$Age, method = 'spearman') # negative trend
cor.test((AggT$C_T + AggT$A_G),AggT$Age, method = 'spearman') # negative trend
colnames(AggT)
AggT$Tv = (AggT$A_C + AggT$C_A + AggT$A_T + AggT$T_A + AggT$G_C + AggT$C_G + AggT$G_T + AggT$T_G)
AggT$Ts = (AggT$G_A + AggT$A_G + AggT$T_C + AggT$C_T)
cor.test(AggT$Ts,AggT$Age, method = 'spearman') # zero!
cor.test(AggT$Tv,AggT$Age, method = 'spearman') # a bit positive
rm(list=ls(all=TRUE))
############ read human ref seq:
Ref = read.table("../../Body/1Raw/RevisedCambridgeReferenceSequences.fasta", header = FALSE, sep = '')
Ref = paste(as.character(Ref$V1), collapse = '')
Ref = unlist(strsplit(Ref, '')); length(Ref) # 16569
table(Ref)
# A    C    G    N    T
# 5124 5181 2169    1 4094
Position = seq(1:length(Ref))
RefSeq = data.frame(Position,Ref); names(RefSeq)=c('Position','AncestralAllele')
View(RefSeq)
SomMut = read.table("../../Body/1Raw/TissueSpecificMtDNAMutationsGTEx.txt", header = TRUE, sep = '\t')
SomMut$Position = gsub('_(.*)','',SomMut$Mutation)  # gsub("_(.*)",'',READS$patient)
SomMut$DerivedAllele = gsub('(.*)_','',SomMut$Mutation)  # gsub("_(.*)",'',READS$patient)
Som = merge(SomMut,RefSeq, by = 'Position')
View(Som)
rm(list=ls(all=TRUE))
############ read human ref seq:
Ref = read.table("../../Body/1Raw/chrM_refAllele.txt", header = FALSE, sep = '')
View(Ref)
names(RefSeq)=c('Position','AncestralAllele')
RefSeq = read.table("../../Body/1Raw/chrM_refAllele.txt", header = FALSE, sep = '')
names(RefSeq)=c('Position','AncestralAllele')
View(RefSeq)
SomMut = read.table("../../Body/1Raw/TissueSpecificMtDNAMutationsGTEx.txt", header = TRUE, sep = '\t')
SomMut$Position = gsub('_(.*)','',SomMut$Mutation)  # gsub("_(.*)",'',READS$patient)
SomMut$DerivedAllele = gsub('(.*)_','',SomMut$Mutation)  # gsub("_(.*)",'',READS$patient)
Som = merge(SomMut,RefSeq, by = 'Position')
Som = Som[Som$DerivedAllele != Som$AncestralAllele,]
Som$Substitution = paste(Som$AncestralAllele,Som$DerivedAllele, sep = '_')
table(Som$Substitution)
