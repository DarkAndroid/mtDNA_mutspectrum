unzip("../../Body/2Derived/POLARIZEDBR_DATA.zip", exdir= "../../Body/2Derived/")
List = list.files("../../Body/2Derived/POLARIZEDBR_DATA/")
for (i in 1:length(List))
{ # i = 1303
infile = paste("../../Body/2Derived/POLARIZEDBR_DATA/",as.character(List[i]),sep='')
if (length(grep('POLARISED',infile)) > 0)
{
Species = gsub('\\..*','',as.character(List[i]))
Gene = gsub(Species,'',as.character(List[i])); Gene = gsub('.POLARISED.txt','',Gene); Gene = gsub('\\.POLARISED.txt','',Gene); Gene = gsub('\\.','',Gene);
GeneSpecies = read.table(infile, header = TRUE)
GeneSpecies = GeneSpecies[GeneSpecies$BranchPosition == 'External',]
ExternalSeqsTogether = paste(GeneSpecies$MoreShallowNodeSeq,collapse = '')
ExternalSeqsTogether = unlist(strsplit(ExternalSeqsTogether,'')) # 5700/3
CodonsVec = c(); StartNuc = 1
if (length(ExternalSeqsTogether)/3 == round(length(ExternalSeqsTogether)/3))  # if divide by 3 without the rest
{
for (j in 1:(length(ExternalSeqsTogether)/3))
{
CodonsVec = c(CodonsVec,paste(ExternalSeqsTogether[StartNuc : (StartNuc+2)],collapse = ''))
StartNuc = StartNuc+3
}
AllCodons = length(CodonsVec)        # 1021
CodonsVecNeutral = CodonsVec[CodonsVec %in% VecOfSynFourFoldDegenerateSites]
NeutralCodons = length(CodonsVecNeutral) # 1900
data.frame(table(CodonsVecNeutral))
CodonsVecNeutral = gsub("CTA|GTA|TCA|CCA|ACA|GCA|CGA|GGA",'A',CodonsVecNeutral)
CodonsVecNeutral = gsub("CTT|GTT|TCT|CCT|ACT|GCT|CGT|GGT",'T',CodonsVecNeutral)
CodonsVecNeutral = gsub("CTG|GTG|TCG|CCG|ACG|GCG|CGG|GGG",'G',CodonsVecNeutral)
CodonsVecNeutral = gsub("CTC|GTC|TCC|CCC|ACC|GCC|CGC|GGC",'C',CodonsVecNeutral)
Line=c(Species,Gene,length(CodonsVecNeutral[CodonsVecNeutral == 'A']),length(CodonsVecNeutral[CodonsVecNeutral == 'T']),length(CodonsVecNeutral[CodonsVecNeutral == 'G']),length(CodonsVecNeutral[CodonsVecNeutral == 'C']), AllCodons, NeutralCodons)
if (i == 1) {Final = Line}
if (i >  1) {Final = rbind(Final,Line)}
}
}
}
Final = as.data.frame(Final); names(Final)=c('Species','Gene','A','T','G','C','NumberOfAllCodons',"NumberOfFourFoldDegenCodons")
write.table(Final, "../../Body/3Results/VertebratePolymorphisms.Normalization.NeutralATGC.txt", quote = FALSE, row.names = FALSE)
## delete all unziped files
files <- list.files("../../Body/2Derived/POLARIZEDBR_DATA/")
for (i in 1:length(files))
{ # i = 1
file = paste('../../Body/2Derived/POLARIZEDBR_DATA/',files[i],sep='')
if (file.exists(file)) file.remove(file)
}
################### merge with classes (from Taxa & MoreTaxa), average A T G C for each species, average it for classes and draw it.
#### associate species name with Class
### Taxa 1, Cut out the third word!!!!!!!!!!!!!!!!!
Taxa = read.table("../../Body/1Raw/TaxaFromKostya.Names.stat", sep = '\t',header = FALSE)
Taxa$Species = gsub(";.*",'',Taxa$V1);
for (i in (1:nrow(Taxa)))  {Taxa$Species[i] = paste(unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[1],unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[2], sep = '_')}
Taxa$Class = gsub(";Chordata;.*",'',Taxa$V1); Taxa$Class = gsub(".*;",'',Taxa$Class); table(Taxa$Class)
Taxa$Class = gsub('Actinopteri','Actinopterygii',Taxa$Class)
Taxa$Class = gsub("Testudines|Squamata|Crocodylia|Sphenodontia",'Reptilia',Taxa$Class)
length(unique(Taxa$Species)) # 1708
table(Taxa$Class)
Taxa = Taxa[,-1]
### Taxa 2, Cut out the third word!!!!!!!!!!!!!!!!!
TaxaMore = read.table("../../Body/1Raw/TaxaFromKostya.2NeedTaxa.tax.txt", sep = '\t',header = FALSE)
TaxaMore$Species = ''
for (i in (1:nrow(TaxaMore)))
{TaxaMore$Species[i] = paste(unlist(strsplit(as.character(TaxaMore$V1[i]),split = ' '))[1],unlist(strsplit(as.character(TaxaMore$V1[i]),split = ' '))[2], sep = '_')}
TaxaMore$Class = gsub("; Chordata;.*",'',TaxaMore$V2);
TaxaMore$Class = gsub(".*; ",'',TaxaMore$Class);
TaxaMore$Class = gsub('Actinopteri','Actinopterygii',TaxaMore$Class)
TaxaMore$Class = gsub("Testudines|Squamata|Crocodylia",'Reptilia',TaxaMore$Class)
table(TaxaMore$Class)
TaxaMore = TaxaMore[,-c(1,2)]
Taxa = rbind(Taxa,TaxaMore); Taxa = unique(Taxa)
###
Final = merge(Final,Taxa)
str(Final)
Final[,3:6] <- sapply(Final[,3:6], function(x) as.numeric(as.character(x)))
Agg1 = aggregate(list(Final$A,Final$T,Final$G,Final$C), by = list(Final$Species, Final$Class), FUN = sum); names(Agg1) = c('Species','Class','A','T','G','C')
Agg1$FrA = Agg1$A/(Agg1$A+Agg1$T+Agg1$G+Agg1$C)
Agg1$FrT = Agg1$T/(Agg1$A+Agg1$T+Agg1$G+Agg1$C)
Agg1$FrG = Agg1$G/(Agg1$A+Agg1$T+Agg1$G+Agg1$C)
Agg1$FrC = Agg1$C/(Agg1$A+Agg1$T+Agg1$G+Agg1$C)
Agg2 = aggregate(list(Agg1$FrA,Agg1$FrT,Agg1$FrG,Agg1$FrC), by = list(Agg1$Class), FUN = mean); names(Agg2) = c('Class','FrA','FrT','FrG','FrC')
Agg2$Sum = Agg2$FrA + Agg2$FrT + Agg2$FrG + Agg2$FrC # 1
Agg2 = Agg2[Agg2$Class %in% c('Actinopterygii','Amphibia','Reptilia','Mammalia','Aves'),]
row.names(Agg2)=Agg2$Class
BARPLOT = t(as.matrix(Agg2[,c(2:5)]))
BARPLOT = BARPLOT[,c(1,5,2,4,3)] # column order
BARPLOT = BARPLOT[c(3,2,4,1),] # row order
colnames(data)=c("A","B","C","D","E")
rownames(data)=c("var1","var2","var3")
# Get the stacked barplot
ColG = rgb(0.1,0.1,0.1,0.5)
ColT = rgb(0.1,0.1,1,0.5)
ColC = rgb(0.1,1,0.1,0.5)
ColA = rgb(1,0.1,0.1,0.5)
pdf("../../Body/4Figures/VertebratePolymorphisms.Normalization.R.01.pdf", width = 30, height = 20)
barplot(BARPLOT, col = c(ColG,ColT,ColC,ColA), border="white", space=0.04, font.axis=2, xlab="")
PieChartTable = read.table("../../Body/3Results/VertebratePolymorphisms.BetweenClassesWithoutNormalization.PieChartTable.txt")
PieChartTable$AncestralNuc = NA
for (i in 1:nrow(PieChartTable)) {PieChartTable$AncestralNuc[i] = unlist(strsplit(as.character(PieChartTable$Subs[i]),split = '_'))[1]}
PieChartTable = merge(PieChartTable,Agg2[,c(1:5)])
PieChartTable$Normalised1Number = 0
for (i in 1:nrow(PieChartTable))
{
if (PieChartTable$AncestralNuc[i] == 'A') {PieChartTable$Normalised1Number[i] = PieChartTable$Number[i] / PieChartTable$FrA[i]}
if (PieChartTable$AncestralNuc[i] == 'T') {PieChartTable$Normalised1Number[i] = PieChartTable$Number[i] / PieChartTable$FrT[i]}
if (PieChartTable$AncestralNuc[i] == 'G') {PieChartTable$Normalised1Number[i] = PieChartTable$Number[i] / PieChartTable$FrG[i]}
if (PieChartTable$AncestralNuc[i] == 'C') {PieChartTable$Normalised1Number[i] = PieChartTable$Number[i] / PieChartTable$FrC[i]}
}
Agg = aggregate(PieChartTable$Normalised1Number, by = list(PieChartTable$Class), FUN = sum); names(Agg) = c('Class','Total')
PieChartTable = merge(PieChartTable,Agg)
PieChartTable$Normalised2Number = PieChartTable$Normalised1Number/PieChartTable$Total
write.table(PieChartTable,"../../Body/3Results/VertebratePolymorphisms.Normalization.Normalized12Fractions.txt", quote = FALSE, row.names = FALSE)
par(mfrow=c(1,5))
VecOfClasses = c('Actinopterygii','Amphibia','Reptilia','Mammalia','Aves')
for (i in 1:length(VecOfClasses))
{
pie(PieChartTable[PieChartTable$Class == VecOfClasses[i],]$Normalised2Number, labels = PieChartTable[PieChartTable$Class == VecOfClasses[i],]$Subs, main = VecOfClasses[i], col=rainbow(12))
}
dev.off()
rm(list=ls(all=TRUE))
### neutral ATGC
NeutralATGC = read.table('../../Body/3Results/VertebratePolymorphisms.Normalization.NeutralATGC.txt', header = TRUE)
rm(list=ls(all=TRUE))
### neutral ATGC
NeutralATGC = read.table('../../Body/3Results/VertebratePolymorphisms.Normalization.NeutralATGC.txt', header = TRUE)
####### READ
MUT = read.table("../../Body/3Results/Mutational_spectra_in_Chordata_ML.txt", header = TRUE)
length(unique(MUT$Species)) # 2404  SOME SPECIES HAVE THREE WORDS => CUT THE LAST AND MERGE WITH TAXA, OR EVEN CUT TWO LAST AND LEAVE JUST GENUS
View(MUT)
##### FILTER 1: to take only normal substitutions and filter out species with too high fraction (> 5%) of unnormal substitutions
VecOfNormalSubstitutions <- c('A_C','C_A',
'A_G','G_A',
'C_G','G_C',
'C_T','T_C',
'G_T','T_G',
'T_A','A_T')
nrow(MUT)
table(MUT$Subs)   # MANY CRAPPY SUBSTITUTIONS!!!!!!!!!!!!!!!!!! WHY?????????????????????
SP = data.frame(table(MUT$Species)); names(SP) = c('Species','NumberOfAllSubst')
SPN = data.frame(table(MUT[MUT$Subs %in% VecOfNormalSubstitutions,]$Species)); names(SPN) = c('Species','NumberOfNormalSubst')
SP = merge(SP,SPN); SP$FractionOfNormal = SP$NumberOfNormalSubst/SP$NumberOfAllSubst
hist(SP$FractionOfNormal)
summary(SP$FractionOfNormal) # how many to delete? ask to have more than 95% of substitutions as normal
SpeciesToDelete = SP[SP$FractionOfNormal <=0.95,]$Species; length(SpeciesToDelete) # 279 - delete
MUT = MUT[!MUT$Species %in% SpeciesToDelete,]
MUT = MUT[MUT$Subs %in% VecOfNormalSubstitutions,]
nrow(MUT) # 461215
MUT = MUT[MUT$AncestralAA == MUT$DescendantAA,]; nrow(MUT) # 395157
table(MUT$AncestralAA)
table(MUT$DescendantAA)
VecOfSynFourFoldDegenerateSites <- c('CTT', 'CTC', 'CTA', 'CTG',
'GTT', 'GTC', 'GTA', 'GTG',
'TCT', 'TCC', 'TCA', 'TCG',
'CCT', 'CCC', 'CCA', 'CCG',
'ACT', 'ACC', 'ACA', 'ACG',
'GCT', 'GCC', 'GCA', 'GCG',
'CGT', 'CGC', 'CGA', 'CGG',
'GGT', 'GGC', 'GGA', 'GGG')
length(unique(VecOfSynFourFoldDegenerateSites)) # 32
VecOfAllOthersSites <-              c('TTT', 'TTC', 'TTA', 'TTG',
'ATT', 'ATC', 'ATA', 'ATG',
'TAT', 'TAC', 'TAA', 'TAG',
'CAT', 'CAC', 'CAA', 'CAG',
'AAT', 'AAC', 'AAA', 'AAG',
'GAT', 'GAC', 'GAA', 'GAG',
'TGT', 'TGC', 'TGA', 'TGG',
'AGT', 'AGC', 'AGA', 'AGG')
length(unique(VecOfAllOthersSites)) # 32
length(unique(c(VecOfAllOthersSites,VecOfSynFourFoldDegenerateSites))) # 64
nrow(MUT) # 395157 = 209120 + 186037
MUT4fold = MUT[MUT$AncestorCodon %in% VecOfSynFourFoldDegenerateSites & MUT$DescendantCodon %in% VecOfSynFourFoldDegenerateSites,]; nrow(MUT4fold) # 209120
MUTOthers = MUT[MUT$AncestorCodon %in% VecOfAllOthersSites | MUT$DescendantCodon %in% VecOfAllOthersSites,]; nrow(MUTOthers) # 186037
MUT4fold$MutType = 'FourFold'; MUTOthers$MutType = 'Syn'
MUT = rbind(MUT4fold,MUTOthers)
MUT$Number = 1
# Count number of different mutations
AGG1 = aggregate(MUT[MUT$MutType == 'FourFold',]$Number, by = list(MUT[MUT$MutType == 'FourFold',]$Species), FUN = sum); names(AGG1) = c('Species','NumOfFourFoldMut')
AGG2 = aggregate(MUT[MUT$MutType == 'Syn',]$Number, by = list(MUT[MUT$MutType == 'Syn',]$Species), FUN = sum); names(AGG2) = c('Species','NumOfSynMut')
AGG3 = aggregate(MUT[MUT$MutType == 'FourFold' & MUT$Gene == 'CytB',]$Number, by = list(MUT[MUT$MutType == 'FourFold' & MUT$Gene == 'CytB',]$Species), FUN = sum); names(AGG3) = c('Species','NumOfFourFoldMutInCytB')
AGG4 = aggregate(MUT[MUT$MutType == 'Syn' & MUT$Gene == 'CytB',]$Number, by = list(MUT[MUT$MutType == 'Syn' & MUT$Gene == 'CytB',]$Species), FUN = sum); names(AGG4) = c('Species','NumOfSynInCytB')
AGG = merge(AGG1,AGG2, all = TRUE); AGG = merge(AGG,AGG3, all = TRUE); AGG = merge(AGG,AGG4, all = TRUE);
AGG[is.na(AGG)] <- 0
# merge with Neutral A T G C
nrow(MUT) # 395157
View(AGG)
View(NeutralATGC)
View(AGG)
MUT = merge(MUT,NeutralATGC[,c(1:6)], by = c("Species", "Gene"))
nrow(MUT) # 395269 ?????
MUT = merge(MUT,AGG, by = 'Species')
View(MUT)
write.table(MUT, file = '../../Body/3Results/VertebratePolymorphisms.MutSpecData.txt', quote = FALSE)
rm(list=ls(all=TRUE))
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.txt')
## filter set of species with more than minimal number of mutations (minimum is 15) for different settings
length(unique(MUT$Species))                                    # 2118
length(unique(MUT[MUT$NumOfSynMut >= 15,]$Species))            # 1560
length(unique(MUT[MUT$NumOfFourFoldMut >= 15,]$Species))       # 1631
length(unique(MUT[MUT$NumOfSynInCytB >= 15,]$Species))         # 1122
length(unique(MUT[MUT$NumOfFourFoldMutInCytB >= 15,]$Species)) # 1172
################ 1 AllSynonMut AllGenes
Mut = MUT[(MUT$NumOfSynMut + MUT$NumOfFourFoldMut) >= 15,]
Mut$Subs = as.character(Mut$Subs)
TRIM<-function(x)	 {unlist(strsplit(x,'_'))[1]}
Mut$AncestralNuc = apply(as.matrix(Mut$Subs), 1 , FUN = TRIM)
View(Mut)
A = Mut[Mut$AncestralNuc == 'A',]; A$Number = A$A/(A$A+A$T+A$G+A$C)
T = Mut[Mut$AncestralNuc == 'T',]; T$Number = T$T/(T$A+T$T+T$G+T$C)
G = Mut[Mut$AncestralNuc == 'G',]; G$Number = G$G/(G$A+G$T+G$G+G$C)
C = Mut[Mut$AncestralNuc == 'C',]; C$Number = C$C/(C$A+C$T+C$G+C$C)
Mut = rbind(A,T); Mut = rbind(Mut,G); Mut = rbind(Mut,C);
View(Mut)
agg = aggregate(Mut$Number, by = list(Mut$Species,Mut$Subs), FUN = sum)
names(agg)=c('Species','Subs','Freq')
View(agg)
View(Mut)
rm(list=ls(all=TRUE))
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.txt')
## filter set of species with more than minimal number of mutations (minimum is 15) for different settings
length(unique(MUT$Species))                                    # 2118
length(unique(MUT[MUT$NumOfSynMut >= 15,]$Species))            # 1560
length(unique(MUT[MUT$NumOfFourFoldMut >= 15,]$Species))       # 1631
length(unique(MUT[MUT$NumOfSynInCytB >= 15,]$Species))         # 1122
length(unique(MUT[MUT$NumOfFourFoldMutInCytB >= 15,]$Species)) # 1172
################ 1 AllSynonMut AllGenes
Mut = MUT[(MUT$NumOfSynMut + MUT$NumOfFourFoldMut) >= 15,]
#### generate MutSpec for each species
## get ancestral nucleotide
Mut$Subs = as.character(Mut$Subs)
TRIM<-function(x)	 {unlist(strsplit(x,'_'))[1]}
Mut$AncestralNuc = apply(as.matrix(Mut$Subs), 1 , FUN = TRIM)
## normalize by freq of ancestral nucleotides
A = Mut[Mut$AncestralNuc == 'A',]; A$Number = A$A/(A$A+A$T+A$G+A$C)
T = Mut[Mut$AncestralNuc == 'T',]; T$Number = T$T/(T$A+T$T+T$G+T$C)
G = Mut[Mut$AncestralNuc == 'G',]; G$Number = G$G/(G$A+G$T+G$G+G$C)
C = Mut[Mut$AncestralNuc == 'C',]; C$Number = C$C/(C$A+C$T+C$G+C$C)
Mut = rbind(A,T); Mut = rbind(Mut,G); Mut = rbind(Mut,C);
Mut$Number = 1/Mut$Number
agg = aggregate(Mut$Number, by = list(Mut$Species,Mut$Subs), FUN = sum)
names(agg)=c('Species','Subs','Freq')
Template = data.frame(unique(Mut$Subs)); names(Template) = c('Subs'); Template$Freq = 0;
VecOfSpecies = unique(agg$Species)
for (i in 1:length(VecOfSpecies))
{ # i = 2
Temp = agg[agg$Species == VecOfSpecies[i],]
Template$Species = VecOfSpecies[i]
Temp = merge(Temp,Template, by = c('Subs','Species'), all = TRUE)
Temp[is.na(Temp)] <- 0
Temp$Freq = Temp$Freq.x + Temp$Freq.y
ALL = sum(Temp$Freq)
Line = data.frame(VecOfSpecies[i], Temp[Temp$Subs == 'A_T',]$Freq/ALL, Temp[Temp$Subs == 'A_G',]$Freq/ALL, Temp[Temp$Subs == 'A_C',]$Freq/ALL, Temp[Temp$Subs == 'T_A',]$Freq/ALL, Temp[Temp$Subs == 'T_G',]$Freq/ALL, Temp[Temp$Subs == 'T_C',]$Freq/ALL, Temp[Temp$Subs == 'G_A',]$Freq/ALL, Temp[Temp$Subs == 'G_T',]$Freq/ALL, Temp[Temp$Subs == 'G_C',]$Freq/ALL, Temp[Temp$Subs == 'C_A',]$Freq/ALL, Temp[Temp$Subs == 'C_T',]$Freq/ALL, Temp[Temp$Subs == 'C_G',]$Freq/ALL)
names(Line)=c('Species','A_T','A_G','A_C','T_A','T_G','T_C','G_A','G_T','G_C','C_A','C_T','C_G')
if (i == 1) {Final = Line}
if (i >  1) {Final = rbind(Final,Line)}
}
write.table(Final, '../../Body/3Results/VertebratePolymorphisms.MutSpecData.AllSynMutationsAllGenes.txt', quote = FALSE, row.names = FALSE)
View(Final)
Mut = MUT[MUT$NumOfFourFoldMut >= 15,]
View(Mut)
Mut = Mut[Mut$MutType == 'FourFold',]
## get ancestral nucleotide
Mut$Subs = as.character(Mut$Subs)
TRIM<-function(x)	 {unlist(strsplit(x,'_'))[1]}
Mut$AncestralNuc = apply(as.matrix(Mut$Subs), 1 , FUN = TRIM)
## normalize by freq of ancestral nucleotides
Mut$Number = 1
A = Mut[Mut$AncestralNuc == 'A',]; A$Number = A$A/(A$A+A$T+A$G+A$C)
T = Mut[Mut$AncestralNuc == 'T',]; T$Number = T$T/(T$A+T$T+T$G+T$C)
G = Mut[Mut$AncestralNuc == 'G',]; G$Number = G$G/(G$A+G$T+G$G+G$C)
C = Mut[Mut$AncestralNuc == 'C',]; C$Number = C$C/(C$A+C$T+C$G+C$C)
Mut = rbind(A,T); Mut = rbind(Mut,G); Mut = rbind(Mut,C);
Mut$Number = 1/Mut$Number
agg = aggregate(Mut$Number, by = list(Mut$Species,Mut$Subs), FUN = sum)
names(agg)=c('Species','Subs','Freq')
## make vector of 12 Subs for each species
Template = data.frame(unique(Mut$Subs)); names(Template) = c('Subs'); Template$Freq = 0;
VecOfSpecies = unique(agg$Species)
for (i in 1:length(VecOfSpecies))
{ # i = 2
Temp = agg[agg$Species == VecOfSpecies[i],]
Template$Species = VecOfSpecies[i]
Temp = merge(Temp,Template, by = c('Subs','Species'), all = TRUE)
Temp[is.na(Temp)] <- 0
Temp$Freq = Temp$Freq.x + Temp$Freq.y
ALL = sum(Temp$Freq)
Line = data.frame(VecOfSpecies[i], Temp[Temp$Subs == 'A_T',]$Freq/ALL, Temp[Temp$Subs == 'A_G',]$Freq/ALL, Temp[Temp$Subs == 'A_C',]$Freq/ALL, Temp[Temp$Subs == 'T_A',]$Freq/ALL, Temp[Temp$Subs == 'T_G',]$Freq/ALL, Temp[Temp$Subs == 'T_C',]$Freq/ALL, Temp[Temp$Subs == 'G_A',]$Freq/ALL, Temp[Temp$Subs == 'G_T',]$Freq/ALL, Temp[Temp$Subs == 'G_C',]$Freq/ALL, Temp[Temp$Subs == 'C_A',]$Freq/ALL, Temp[Temp$Subs == 'C_T',]$Freq/ALL, Temp[Temp$Subs == 'C_G',]$Freq/ALL)
names(Line)=c('Species','A_T','A_G','A_C','T_A','T_G','T_C','G_A','G_T','G_C','C_A','C_T','C_G')
if (i == 1) {Final = Line}
if (i >  1) {Final = rbind(Final,Line)}
}
write.table(Final, '../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', quote = FALSE, row.names = FALSE)
Mut = MUT[MUT$NumOfFourFoldMut >= 15 & MUT$Gene == 'CytB',]
Mut = Mut[Mut$MutType == 'FourFold',]
Mut$Subs = as.character(Mut$Subs)
TRIM<-function(x)	 {unlist(strsplit(x,'_'))[1]}
Mut$AncestralNuc = apply(as.matrix(Mut$Subs), 1 , FUN = TRIM)
Mut$Number = 1
A = Mut[Mut$AncestralNuc == 'A',]; A$Number = A$A/(A$A+A$T+A$G+A$C)
T = Mut[Mut$AncestralNuc == 'T',]; T$Number = T$T/(T$A+T$T+T$G+T$C)
G = Mut[Mut$AncestralNuc == 'G',]; G$Number = G$G/(G$A+G$T+G$G+G$C)
C = Mut[Mut$AncestralNuc == 'C',]; C$Number = C$C/(C$A+C$T+C$G+C$C)
Mut = rbind(A,T); Mut = rbind(Mut,G); Mut = rbind(Mut,C);
Mut$Number = 1/Mut$Number
agg = aggregate(Mut$Number, by = list(Mut$Species,Mut$Subs), FUN = sum)
names(agg)=c('Species','Subs','Freq')
## make vector of 12 Subs for each species
Template = data.frame(unique(Mut$Subs)); names(Template) = c('Subs'); Template$Freq = 0;
VecOfSpecies = unique(agg$Species)
for (i in 1:length(VecOfSpecies))
{ # i = 2
Temp = agg[agg$Species == VecOfSpecies[i],]
Template$Species = VecOfSpecies[i]
Temp = merge(Temp,Template, by = c('Subs','Species'), all = TRUE)
Temp[is.na(Temp)] <- 0
Temp$Freq = Temp$Freq.x + Temp$Freq.y
ALL = sum(Temp$Freq)
Line = data.frame(VecOfSpecies[i], Temp[Temp$Subs == 'A_T',]$Freq/ALL, Temp[Temp$Subs == 'A_G',]$Freq/ALL, Temp[Temp$Subs == 'A_C',]$Freq/ALL, Temp[Temp$Subs == 'T_A',]$Freq/ALL, Temp[Temp$Subs == 'T_G',]$Freq/ALL, Temp[Temp$Subs == 'T_C',]$Freq/ALL, Temp[Temp$Subs == 'G_A',]$Freq/ALL, Temp[Temp$Subs == 'G_T',]$Freq/ALL, Temp[Temp$Subs == 'G_C',]$Freq/ALL, Temp[Temp$Subs == 'C_A',]$Freq/ALL, Temp[Temp$Subs == 'C_T',]$Freq/ALL, Temp[Temp$Subs == 'C_G',]$Freq/ALL)
names(Line)=c('Species','A_T','A_G','A_C','T_A','T_G','T_C','G_A','G_T','G_C','C_A','C_T','C_G')
if (i == 1) {Final = Line}
if (i >  1) {Final = rbind(Final,Line)}
}
write.table(Final, '../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegCytb.txt', quote = FALSE, row.names = FALSE)
Mut = MUT[MUT$NumOfSynMut >= 15,]
View(MUT)
Mut = MUT[(MUT$NumOfSynMut + MUT$NumOfFourFoldMut) >= 15,]
## get ancestral nucleotide
Mut$Subs = as.character(Mut$Subs)
TRIM<-function(x)	 {unlist(strsplit(x,'_'))[1]}
Mut$AncestralNuc = apply(as.matrix(Mut$Subs), 1 , FUN = TRIM)
## normalize by freq of ancestral nucleotides
Mut$Number = 1
A = Mut[Mut$AncestralNuc == 'A',]; A$Number = A$A/(A$A+A$T+A$G+A$C)
T = Mut[Mut$AncestralNuc == 'T',]; T$Number = T$T/(T$A+T$T+T$G+T$C)
G = Mut[Mut$AncestralNuc == 'G',]; G$Number = G$G/(G$A+G$T+G$G+G$C)
C = Mut[Mut$AncestralNuc == 'C',]; C$Number = C$C/(C$A+C$T+C$G+C$C)
Mut = rbind(A,T); Mut = rbind(Mut,G); Mut = rbind(Mut,C);
Mut$Number = 1/Mut$Number
agg = aggregate(Mut$Number, by = list(Mut$Species,Mut$Gene,Mut$Subs), FUN = sum)
names(agg)=c('Species','Gene','Subs','Freq')
agg$SpeciesGene = paste(agg$Species,agg$Gene, sep = '.')
## make vector of 12 Subs for each species X gene
Template = data.frame(unique(Mut$Subs)); names(Template) = c('Subs'); Template$Freq = 0;
VecOfSpeciesGenes = unique(agg$SpeciesGene)
for (i in 1:length(VecOfSpeciesGenes))
{ # i = 2
Temp = agg[agg$SpeciesGene == VecOfSpeciesGenes[i],]; Temp = Temp[,c(3,4,5)]
Template$SpeciesGene = VecOfSpeciesGenes[i]
Temp = merge(Temp,Template, by = c('SpeciesGene', 'Subs'), all = TRUE)
Temp[is.na(Temp)] <- 0
Temp$Freq = Temp$Freq.x + Temp$Freq.y
ALL = sum(Temp$Freq)
Line = data.frame(VecOfSpeciesGenes[i], Temp[Temp$Subs == 'A_T',]$Freq/ALL, Temp[Temp$Subs == 'A_G',]$Freq/ALL, Temp[Temp$Subs == 'A_C',]$Freq/ALL, Temp[Temp$Subs == 'T_A',]$Freq/ALL, Temp[Temp$Subs == 'T_G',]$Freq/ALL, Temp[Temp$Subs == 'T_C',]$Freq/ALL, Temp[Temp$Subs == 'G_A',]$Freq/ALL, Temp[Temp$Subs == 'G_T',]$Freq/ALL, Temp[Temp$Subs == 'G_C',]$Freq/ALL, Temp[Temp$Subs == 'C_A',]$Freq/ALL, Temp[Temp$Subs == 'C_T',]$Freq/ALL, Temp[Temp$Subs == 'C_G',]$Freq/ALL)
names(Line)=c('SpeciesGene','A_T','A_G','A_C','T_A','T_G','T_C','G_A','G_T','G_C','C_A','C_T','C_G')
if (i == 1) {Final = Line}
if (i >  1) {Final = rbind(Final,Line)}
}
write.table(Final, '../../Body/3Results/VertebratePolymorphisms.MutSpecData.AllSynMutSepForEachGene.txt', quote = FALSE, row.names = FALSE)
#####  COUNT NUCLEOTIDE CONTENT CAREFULLY (BODY/2Derived/polarizedbr_data => external + More Shallow => codons, 4fold nucl, FrA,T,G,C) => barplot?
#####  normalized average MutSpec (pie charts or 12 boxplots for each class)?
rm(list=ls(all=TRUE))
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.txt')
## filter set of species with more than minimal number of mutations (minimum is 15) for different settings
length(unique(MUT$Species))                                    # 2118
length(unique(MUT[MUT$NumOfSynMut >= 15,]$Species))            # 1560
length(unique(MUT[MUT$NumOfFourFoldMut >= 15,]$Species))       # 1631
length(unique(MUT[MUT$NumOfSynInCytB >= 15,]$Species))         # 1122
length(unique(MUT[MUT$NumOfFourFoldMutInCytB >= 15,]$Species)) # 1172
################ 1 AllSynonMut AllGenes
Mut = MUT[(MUT$NumOfSynMut + MUT$NumOfFourFoldMut) >= 15,]
#### generate MutSpec for each species
## get ancestral nucleotide
Mut$Subs = as.character(Mut$Subs)
TRIM<-function(x)	 {unlist(strsplit(x,'_'))[1]}
Mut$AncestralNuc = apply(as.matrix(Mut$Subs), 1 , FUN = TRIM)
## normalize by freq of ancestral nucleotides
A = Mut[Mut$AncestralNuc == 'A',]; A$Number = A$A/(A$A+A$T+A$G+A$C)
T = Mut[Mut$AncestralNuc == 'T',]; T$Number = T$T/(T$A+T$T+T$G+T$C)
G = Mut[Mut$AncestralNuc == 'G',]; G$Number = G$G/(G$A+G$T+G$G+G$C)
C = Mut[Mut$AncestralNuc == 'C',]; C$Number = C$C/(C$A+C$T+C$G+C$C)
Mut = rbind(A,T); Mut = rbind(Mut,G); Mut = rbind(Mut,C);
Mut$Number = 1/Mut$Number
agg = aggregate(Mut$Number, by = list(Mut$Species,Mut$Subs), FUN = sum)
names(agg)=c('Species','Subs','Freq')
## make vector of 12 Subs for each species
Template = data.frame(unique(Mut$Subs)); names(Template) = c('Subs'); Template$Freq = 0;
VecOfSpecies = unique(agg$Species)
for (i in 1:length(VecOfSpecies))
{ # i = 2
Temp = agg[agg$Species == VecOfSpecies[i],]
Template$Species = VecOfSpecies[i]
Temp = merge(Temp,Template, by = c('Subs','Species'), all = TRUE)
Temp[is.na(Temp)] <- 0
Temp$Freq = Temp$Freq.x + Temp$Freq.y
ALL = sum(Temp$Freq)
Line = data.frame(VecOfSpecies[i], Temp[Temp$Subs == 'A_T',]$Freq/ALL, Temp[Temp$Subs == 'A_G',]$Freq/ALL, Temp[Temp$Subs == 'A_C',]$Freq/ALL, Temp[Temp$Subs == 'T_A',]$Freq/ALL, Temp[Temp$Subs == 'T_G',]$Freq/ALL, Temp[Temp$Subs == 'T_C',]$Freq/ALL, Temp[Temp$Subs == 'G_A',]$Freq/ALL, Temp[Temp$Subs == 'G_T',]$Freq/ALL, Temp[Temp$Subs == 'G_C',]$Freq/ALL, Temp[Temp$Subs == 'C_A',]$Freq/ALL, Temp[Temp$Subs == 'C_T',]$Freq/ALL, Temp[Temp$Subs == 'C_G',]$Freq/ALL)
names(Line)=c('Species','A_T','A_G','A_C','T_A','T_G','T_C','G_A','G_T','G_C','C_A','C_T','C_G')
if (i == 1) {Final = Line}
if (i >  1) {Final = rbind(Final,Line)}
}
write.table(Final, '../../Body/3Results/VertebratePolymorphisms.MutSpecData.AllSynMutationsAllGenes.txt', quote = FALSE, row.names = FALSE)
################ 2 OnlyFourFoldMut AllGenes
Mut = MUT[MUT$NumOfFourFoldMut >= 15,]
Mut = Mut[Mut$MutType == 'FourFold',]
#### generate MutSpec for each species
## get ancestral nucleotide
Mut$Subs = as.character(Mut$Subs)
TRIM<-function(x)	 {unlist(strsplit(x,'_'))[1]}
Mut$AncestralNuc = apply(as.matrix(Mut$Subs), 1 , FUN = TRIM)
## normalize by freq of ancestral nucleotides
Mut$Number = 1
A = Mut[Mut$AncestralNuc == 'A',]; A$Number = A$A/(A$A+A$T+A$G+A$C)
T = Mut[Mut$AncestralNuc == 'T',]; T$Number = T$T/(T$A+T$T+T$G+T$C)
G = Mut[Mut$AncestralNuc == 'G',]; G$Number = G$G/(G$A+G$T+G$G+G$C)
C = Mut[Mut$AncestralNuc == 'C',]; C$Number = C$C/(C$A+C$T+C$G+C$C)
Mut = rbind(A,T); Mut = rbind(Mut,G); Mut = rbind(Mut,C);
Mut$Number = 1/Mut$Number
agg = aggregate(Mut$Number, by = list(Mut$Species,Mut$Subs), FUN = sum)
names(agg)=c('Species','Subs','Freq')
## make vector of 12 Subs for each species
Template = data.frame(unique(Mut$Subs)); names(Template) = c('Subs'); Template$Freq = 0;
VecOfSpecies = unique(agg$Species)
for (i in 1:length(VecOfSpecies))
{ # i = 2
Temp = agg[agg$Species == VecOfSpecies[i],]
Template$Species = VecOfSpecies[i]
Temp = merge(Temp,Template, by = c('Subs','Species'), all = TRUE)
Temp[is.na(Temp)] <- 0
Temp$Freq = Temp$Freq.x + Temp$Freq.y
ALL = sum(Temp$Freq)
Line = data.frame(VecOfSpecies[i], Temp[Temp$Subs == 'A_T',]$Freq/ALL, Temp[Temp$Subs == 'A_G',]$Freq/ALL, Temp[Temp$Subs == 'A_C',]$Freq/ALL, Temp[Temp$Subs == 'T_A',]$Freq/ALL, Temp[Temp$Subs == 'T_G',]$Freq/ALL, Temp[Temp$Subs == 'T_C',]$Freq/ALL, Temp[Temp$Subs == 'G_A',]$Freq/ALL, Temp[Temp$Subs == 'G_T',]$Freq/ALL, Temp[Temp$Subs == 'G_C',]$Freq/ALL, Temp[Temp$Subs == 'C_A',]$Freq/ALL, Temp[Temp$Subs == 'C_T',]$Freq/ALL, Temp[Temp$Subs == 'C_G',]$Freq/ALL)
names(Line)=c('Species','A_T','A_G','A_C','T_A','T_G','T_C','G_A','G_T','G_C','C_A','C_T','C_G')
if (i == 1) {Final = Line}
if (i >  1) {Final = rbind(Final,Line)}
}
write.table(Final, '../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', quote = FALSE, row.names = FALSE)
################ 3  OnlyFourFoldMut CytB
Mut = MUT[MUT$NumOfFourFoldMut >= 15 & MUT$Gene == 'CytB',]
Mut = Mut[Mut$MutType == 'FourFold',]
#### generate MutSpec for each species
## get ancestral nucleotide
Mut$Subs = as.character(Mut$Subs)
TRIM<-function(x)	 {unlist(strsplit(x,'_'))[1]}
Mut$AncestralNuc = apply(as.matrix(Mut$Subs), 1 , FUN = TRIM)
## normalize by freq of ancestral nucleotides
Mut$Number = 1
A = Mut[Mut$AncestralNuc == 'A',]; A$Number = A$A/(A$A+A$T+A$G+A$C)
T = Mut[Mut$AncestralNuc == 'T',]; T$Number = T$T/(T$A+T$T+T$G+T$C)
G = Mut[Mut$AncestralNuc == 'G',]; G$Number = G$G/(G$A+G$T+G$G+G$C)
C = Mut[Mut$AncestralNuc == 'C',]; C$Number = C$C/(C$A+C$T+C$G+C$C)
Mut = rbind(A,T); Mut = rbind(Mut,G); Mut = rbind(Mut,C);
Mut$Number = 1/Mut$Number
agg = aggregate(Mut$Number, by = list(Mut$Species,Mut$Subs), FUN = sum)
names(agg)=c('Species','Subs','Freq')
## make vector of 12 Subs for each species
Template = data.frame(unique(Mut$Subs)); names(Template) = c('Subs'); Template$Freq = 0;
VecOfSpecies = unique(agg$Species)
for (i in 1:length(VecOfSpecies))
{ # i = 2
Temp = agg[agg$Species == VecOfSpecies[i],]
Template$Species = VecOfSpecies[i]
Temp = merge(Temp,Template, by = c('Subs','Species'), all = TRUE)
Temp[is.na(Temp)] <- 0
Temp$Freq = Temp$Freq.x + Temp$Freq.y
ALL = sum(Temp$Freq)
Line = data.frame(VecOfSpecies[i], Temp[Temp$Subs == 'A_T',]$Freq/ALL, Temp[Temp$Subs == 'A_G',]$Freq/ALL, Temp[Temp$Subs == 'A_C',]$Freq/ALL, Temp[Temp$Subs == 'T_A',]$Freq/ALL, Temp[Temp$Subs == 'T_G',]$Freq/ALL, Temp[Temp$Subs == 'T_C',]$Freq/ALL, Temp[Temp$Subs == 'G_A',]$Freq/ALL, Temp[Temp$Subs == 'G_T',]$Freq/ALL, Temp[Temp$Subs == 'G_C',]$Freq/ALL, Temp[Temp$Subs == 'C_A',]$Freq/ALL, Temp[Temp$Subs == 'C_T',]$Freq/ALL, Temp[Temp$Subs == 'C_G',]$Freq/ALL)
names(Line)=c('Species','A_T','A_G','A_C','T_A','T_G','T_C','G_A','G_T','G_C','C_A','C_T','C_G')
if (i == 1) {Final = Line}
if (i >  1) {Final = rbind(Final,Line)}
}
write.table(Final, '../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegCytb.txt', quote = FALSE, row.names = FALSE)
################ 4  AllSynonMut for EachGeneSeparately
Mut = MUT[(MUT$NumOfSynMut + MUT$NumOfFourFoldMut) >= 15,]
#### generate MutSpec for each species
## get ancestral nucleotide
Mut$Subs = as.character(Mut$Subs)
TRIM<-function(x)	 {unlist(strsplit(x,'_'))[1]}
Mut$AncestralNuc = apply(as.matrix(Mut$Subs), 1 , FUN = TRIM)
## normalize by freq of ancestral nucleotides
Mut$Number = 1
A = Mut[Mut$AncestralNuc == 'A',]; A$Number = A$A/(A$A+A$T+A$G+A$C)
T = Mut[Mut$AncestralNuc == 'T',]; T$Number = T$T/(T$A+T$T+T$G+T$C)
G = Mut[Mut$AncestralNuc == 'G',]; G$Number = G$G/(G$A+G$T+G$G+G$C)
C = Mut[Mut$AncestralNuc == 'C',]; C$Number = C$C/(C$A+C$T+C$G+C$C)
Mut = rbind(A,T); Mut = rbind(Mut,G); Mut = rbind(Mut,C);
Mut$Number = 1/Mut$Number
agg = aggregate(Mut$Number, by = list(Mut$Species,Mut$Gene,Mut$Subs), FUN = sum)
names(agg)=c('Species','Gene','Subs','Freq')
agg$SpeciesGene = paste(agg$Species,agg$Gene, sep = '.')
## make vector of 12 Subs for each species X gene
Template = data.frame(unique(Mut$Subs)); names(Template) = c('Subs'); Template$Freq = 0;
VecOfSpeciesGenes = unique(agg$SpeciesGene)
for (i in 1:length(VecOfSpeciesGenes))
{ # i = 2
Temp = agg[agg$SpeciesGene == VecOfSpeciesGenes[i],]; Temp = Temp[,c(3,4,5)]
Template$SpeciesGene = VecOfSpeciesGenes[i]
Temp = merge(Temp,Template, by = c('SpeciesGene', 'Subs'), all = TRUE)
Temp[is.na(Temp)] <- 0
Temp$Freq = Temp$Freq.x + Temp$Freq.y
ALL = sum(Temp$Freq)
Line = data.frame(VecOfSpeciesGenes[i], Temp[Temp$Subs == 'A_T',]$Freq/ALL, Temp[Temp$Subs == 'A_G',]$Freq/ALL, Temp[Temp$Subs == 'A_C',]$Freq/ALL, Temp[Temp$Subs == 'T_A',]$Freq/ALL, Temp[Temp$Subs == 'T_G',]$Freq/ALL, Temp[Temp$Subs == 'T_C',]$Freq/ALL, Temp[Temp$Subs == 'G_A',]$Freq/ALL, Temp[Temp$Subs == 'G_T',]$Freq/ALL, Temp[Temp$Subs == 'G_C',]$Freq/ALL, Temp[Temp$Subs == 'C_A',]$Freq/ALL, Temp[Temp$Subs == 'C_T',]$Freq/ALL, Temp[Temp$Subs == 'C_G',]$Freq/ALL)
names(Line)=c('SpeciesGene','A_T','A_G','A_C','T_A','T_G','T_C','G_A','G_T','G_C','C_A','C_T','C_G')
if (i == 1) {Final = Line}
if (i >  1) {Final = rbind(Final,Line)}
}
write.table(Final, '../../Body/3Results/VertebratePolymorphisms.MutSpecData.AllSynMutSepForEachGene.txt', quote = FALSE, row.names = FALSE)
rm(list=ls(all=TRUE))
MUT = read.table('../../Body/3Results/VertebratePolymorphisms.MutSpecData.OnlyFourFoldDegAllGenes.txt', header = TRUE)
MUT$total = sum(MUT[1,2:13])
summary(MUT$A_G)
summary(MUT$G_A)
GT = read.table('../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt', sep = '\t', header = TRUE)
GT$Species = gsub(' ','_',GT$Scientific_name)
MamGt = merge(GT,MUT, by = 'Species')
cor.test(MamGt$GenerationLength_d,MamGt$T_C, method = 'spearman') # negative
cor.test(MamGt$GenerationLength_d,MamGt$G_A, method = 'spearman')
