a = iris
a[,1]
View(a)
cor.test(a[,1], a[,2])
cor.test(a[,1], a[,2]).coef
summary(cor.test(a[,1], a[,2]))
summary(cor.test(a[,1], a[,2])).estimate
as.data.frame(summary(cor.test(a[,1], a[,2])))
abs
?abs
a = c(1, 2, 3, -1)
-a
a = read.table('Alina/Kostya/ComparativeGenomics/Body/2Derived/MitGenomics.txt', header=TRUE, sep='\t')
View(a)
10*(2^10)-10*10-10
rm(list = ls())
library(gdata)
# pairwise correlations
CHOR = read.table('../../Body/2Derived/MitGenomics.txt', header=TRUE, sep='\t')
GenLength = read.xls('../../Body/1Raw/GenerationLengthForMammals.xlsx')
GenLength$Species = gsub(' ', '_', GenLength$Scientific_name)
GenLength = GenLength[, c(14,16)]
data = merge(CHOR, GenLength, by='Species')
summary(data$REP.DirRepLength)
data = data[, c('Species', 'A', 'T', 'G', 'C', 'REP.DirRepLength', 'GenomeLength', 'GenerationLength_d')]
data$FrA = data$A / data$GenomeLength
data$FrT = data$T / data$GenomeLength
data$FrG = data$G / data$GenomeLength
data$FrC = data$C / data$GenomeLength
data$DRCoverage = data$REP.DirRepLength / data$GenomeLength
a = read.table('Alina/Kostya/ComparativeGenomics/Body/2Derived/MitGenomics.txt', header=TRUE, sep='\t')
by(a, a$TAXON, summary)
by(a[, c('TAXON', 'GenomeLength')], a$TAXON, summary)
by(a[, c('TAXON', 'REP.NumberOfTandemRepeats')], a$TAXON, summary)
library(dplyr)
install.packages("ggplot2")
library(ggplot2)
?seq
d = slice(diamonds, seq(1, nrow(seq), by=2))
d = slice(diamonds, seq(1, nrow(diamonds), by=2))
my_df = mtcars %>%
select(mpg, hp, am, vs)
my_df = mtcars %>%
select(mpg, hp, am, vs) %>%
filter(mpg > 14, hp > 100) %>%
arrange()
?arrange
?rename
my_df = mtcars %>%
select(mpg, hp, am, vs) %>%
filter(mpg > 14, hp > 100) %>%
arrange(desc(mpg)) %>%
slice(1:10) %>%
rename(mpg = Miles per gallon, hp = Gross horsepower)
my_df = mtcars %>%
select(mpg, hp, am, vs) %>%
filter(mpg > 14, hp > 100) %>%
arrange(desc(mpg)) %>%
slice(1:10) %>%
rename(mpg = 'Miles per gallon', hp = 'Gross horsepower')
my_df = mtcars %>%
select(mpg, hp, am, vs) %>%
filter(mpg > 14, hp > 100) %>%
arrange(desc(mpg)) %>%
slice(1:10) %>%
rename(mpg = Miles per gallon, hp = Gross horsepower)
my_df = mtcars %>%
select(mpg, hp, am, vs) %>%
filter(mpg > 14, hp > 100) %>%
arrange(desc(mpg)) %>%
slice(1:10) %>%
rename(Miles per gallon = mpg, Gross horsepower = hp)
my_df = mtcars %>%
select(mpg, hp, am, vs) %>%
filter(mpg > 14, hp > 100) %>%
arrange(desc(mpg)) %>%
slice(1:10) %>%
rename(Miles per gallon = mpg, Gross horsepower = hp)
my_df = mtcars %>%
select(mpg, hp, am, vs) %>%
filter(mpg > 14, hp > 100) %>%
arrange(desc(mpg)) %>%
slice(1:10) %>%
rename(`Miles per gallon` = mpg, `Gross horsepower` = hp)
CHOR = read.table('~/Alina/Kostya/ComparativeGenomics/Body/2Derived/MitGenomics.txt', header=TRUE, sep='\t')
library(ggplot2)
CHOR = CHOR[CHOR$TAXON != 'AncientFish',]
ggplot(CHOR, aes(TAXON, GenomeLength)) +
geom_violin()
ggplot(CHOR, aes(TAXON, GenomeLength)) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома')
ggplot(CHOR, aes(TAXON, GenomeLength), col = rgb(0, 0, 1, 0)) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома')
ggplot(CHOR, aes(TAXON, GenomeLength), col = rgb(0, 0, 1, 1)) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома')
ggplot(CHOR, aes(TAXON, GenomeLength), col = 'red') +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома')
ggplot(CHOR, aes(TAXON, GenomeLength, col = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома')
ggplot(CHOR, aes(TAXON, GenomeLength, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома')
ggplot(CHOR, aes(TAXON, GenomeLength, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома, bp')
ggplot(CHOR, aes(TAXON, GCCont, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома, bp')
ggplot(CHOR, aes(TAXON, GenomeLength, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue') +
stat_summary(fun.y = 'median', geom = 'point', shape = 2, size = 3, col = 'red') +
ggplot(CHOR, aes(TAXON, GCCont, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома, bp')
ggplot(CHOR, aes(TAXON, GenomeLength, fill = 'darkred')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue') +
stat_summary(fun.y = 'median', geom = 'point', shape = 2, size = 3, col = 'red') +
ggplot(CHOR, aes(TAXON, GCCont, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома, bp')
ggplot(CHOR, aes(TAXON, GenomeLength, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue') +
stat_summary(fun.y = 'median', geom = 'point', shape = 2, size = 3, col = 'red')
ggplot(CHOR, aes(TAXON, GenomeLength, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue')
ggplot(CHOR, aes(TAXON, GCCont, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('ГЦ состав, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue')
ggplot(CHOR, aes(TAXON, GCCont, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('ГЦ состав') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue')
ggplot(CHOR, aes(TAXON, GenomeLength, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue')
ggplot(CHOR, aes(TAXON, REP.LengthOfTandemRepeats, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Суммарная длина тандемных повторов, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue')
a = CHOR[CHOR$REP.LengthOfTandemRepeats < quantile(CHOR$REP.LengthOfTandemRepeats, 0.9)]
a = CHOR[CHOR$REP.LengthOfTandemRepeats < quantile(CHOR$REP.LengthOfTandemRepeats, 0.9),]
ggplot(a, aes(TAXON, REP.LengthOfTandemRepeats, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Суммарная длина тандемных повторов, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue')
names(CHOR)
a = CHOR[CHOR$TAXON = 'Mammals',
c('REP.LengthOfTandemRepeats', 'REP.DirRepLength', 'REP.SymmRepLength', 'REP.ComplRepLength', 'InvRepLength',
'GenomeLength', 'GCCont', 'ECO.Maximum.longevity..yrs.')]
a = CHOR[CHOR$TAXON = 'Mammals',
c('REP.LengthOfTandemRepeats', 'REP.DirRepLength', 'REP.SymmRepLength', 'REP.ComplRepLength', 'InvRepLength', 'GenomeLength', 'GCCont', 'ECO.Maximum.longevity..yrs.')]
a = CHOR[CHOR$TAXON == 'Mammals', c('REP.LengthOfTandemRepeats', 'REP.DirRepLength', 'REP.SymmRepLength', 'REP.ComplRepLength', 'InvRepLength', 'GenomeLength', 'GCCont', 'ECO.Maximum.longevity..yrs.')]
a = CHOR[CHOR$TAXON == 'Mammals', c('REP.LengthOfTandemRepeats', 'REP.DirRepLength', 'REP.SymmRepLength', 'REP.ComplRepLength', 'InvRepLength', 'GenomeLength', 'GCCont', 'ECO.Maximum.longevity..yrs.')]
a = CHOR[CHOR$TAXON == 'Mammalia', c('REP.LengthOfTandemRepeats', 'REP.DirRepLength', 'REP.SymmRepLength', 'REP.ComplRepLength', 'InvRepLength', 'GenomeLength', 'GCCont', 'ECO.Maximum.longevity..yrs.')]
unique(CHOR$TAXON)
a = CHOR[CHOR$TAXON == 'Mammalia', c('REP.LengthOfTandemRepeats', 'REP.DirRepLength', 'REP.SymmRepLength', 'REP.ComplRepLength', 'REP.InvRepLength', 'GenomeLength', 'GCCont', 'ECO.Maximum.longevity..yrs.')]
heatmap(a)
heatmap(as.matrix(a))
names(a) = c('Тандемные повторы', 'Прямые повторы', 'Симметричные повторы', 'Комплементарные повторы', 'Инвертированные повторы', 'Длина Генома', 'ГЦ состав', 'Продолжительность жизни')
View(a)
cormat <- round(cor(a),2)
head(cormat)
a = a[!is.na(a$`Продолжительность жизни`,)]
a = a[!is.na(a$`Продолжительность жизни`),]
cormat <- round(cor(a),2)
head(cormat)
View(a)
install.packages("reshape2")
library(reshape2)
melted_cormat <- melt(cormat)
head(melted_cormat)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1))+
coord_fixed()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 19, hjust = 1))+
coord_fixed()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 9, hjust = 1))+
coord_fixed()
cormat <- round(cor.test(a, method = 'Spearman'),2)
cormat <- round(cor.test(a, method = 'apearman'),2)
cormat <- round(cor.test(a, method = 'spearman'),2)
?cor
cormat <- round(cor(a, method = 'spearman'),2)
head(cormat)
library(reshape2)
melted_cormat <- melt(cormat)
head(melted_cormat)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 9, hjust = 1))+
coord_fixed()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Корреляция\nСпирмана") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 9, hjust = 1))+
coord_fixed()
a = CHOR[CHOR$REP.LengthOfTandemRepeats < quantile(CHOR$REP.LengthOfTandemRepeats, 0.9),]
ggplot(a, aes(TAXON, REP.LengthOfTandemRepeats, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Суммарная длина тандемных повторов, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue')
ggplot(a, aes(TAXON, log2(REP.LengthOfTandemRepeats), fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Суммарная длина тандемных повторов, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue')
ggplot(CHOR, aes(TAXON, log2(REP.LengthOfTandemRepeats), fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Суммарная длина тандемных повторов, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue')
library(ggplot2)
CHOR = read.table('~/Alina/Kostya/ComparativeGenomics/Body/2Derived/MitGenomics.txt', header=TRUE, sep='\t')
CHOR = CHOR[CHOR$TAXON != 'AncientFish',]
ggplot(CHOR, aes(TAXON, GenomeLength, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue')
library(ape)
library(gdata)
GenLength <- read.xls("../../Body/1Raw/GenerationLengthForMammals.xlsx")
library(gdata)
GenLength <- read.xls("../../Body/1Raw/GenerationLengthForMammals.xlsx")
library(ape)
install.packages("gdata")
library(ape)
library(gdata)
GenLength <- read.xls("../../Body/1Raw/GenerationLengthForMammals.xlsx")
GenLength <- read.xls("../../Body/1Raw/GenerationLengthForMammals.xlsx")
GenLength <- read.xls("../../Body/1Raw/GenerationLengthForMammals.xlsx")
install.packages("readxl")
GenLength <- read.xls("../../Body/1Raw/GenerationLengthForMammals.xlsx")
library(readxl)
GenLength <- read_xlsx("../../Body/1Raw/GenerationLengthForMammals.xlsx")
library(seqinr)
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
setwd('Alina/Kostya/mtDNA_mutspectrum/Head/2Scripts/')
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")){file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
names(SynNuc)
SynNuc = SynNuc[!(SynNuc$Gene %in% c('ND1', 'ND2', 'ND6')),]
GT = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GT$Species = gsub(' ','_',GT$Scientific_name)
GT = GT[,c(11,13)]
shortestGT = GT[GT$GenerationLength_d == min(GT$GenerationLength_d), 'Species']
longestGT = GT[GT$GenerationLength_d == max(GT$GenerationLength_d), 'Species']
VecOfSynFourFoldDegenerateSites <- c('CTT', 'CTC', 'CTA', 'CTG',
'GTT', 'GTC', 'GTA', 'GTG',
'TCT', 'TCC', 'TCA', 'TCG',
'CCT', 'CCC', 'CCA', 'CCG',
'ACT', 'ACC', 'ACA', 'ACG',
'GCT', 'GCC', 'GCA', 'GCG',
'CGT', 'CGC', 'CGA', 'CGG',
'GGT', 'GGC', 'GGA', 'GGG')
getVecOfThirdNucleotides4f = function(x){
codonsVec = splitseq(s2c(x))
codons4f = codonsVec[codonsVec %in% VecOfSynFourFoldDegenerateSites]
thirdPosList = gsub("CTA|GTA|TCA|CCA|ACA|GCA|CGA|GGA", 'A', codons4f)
thirdPosList = gsub("CTT|GTT|TCT|CCT|ACT|GCT|CGT|GGT", 'T', thirdPosList)
thirdPosList = gsub("CTG|GTG|TCG|CCG|ACG|GCG|CGG|GGG", 'G', thirdPosList)
thirdPosList = gsub("CTC|GTC|TCC|CCC|ACC|GCC|CGC|GGC", 'C', thirdPosList)
thirdPosVec = paste(as.vector(thirdPosList), collapse = '')
return(thirdPosVec)
}
SynNuc$ThirdPos4f = lapply(as.character(SynNuc$CodonsNoOverlap), getVecOfThirdNucleotides4f)
M = merge(SynNuc, GT, by ='Species')
M$Gene =  ordered(M$Gene, levels = c('COX1','COX2','ATP8','ATP6','COX3','ND3','ND4L','ND4','ND5','CytB'))
M = M[order(M$Gene),]
shortestGT = M[M$GenerationLength_d == min(M$GenerationLength_d),]
longestGT = M[M$GenerationLength_d == max(M$GenerationLength_d),]
shortGlVec4f = paste(shortestGT$ThirdPos4f, collapse = '')
longGlVec4f = paste(longestGT$ThirdPos4f, collapse = '')
shortSeq = splitseq(s2c(shortGlVec4f), word = 20)
longSeq = splitseq(s2c(longGlVec4f), word = 20)
nuclCount = function(seq, char){
cnt = nchar(as.character(seq)) - nchar(gsub(char, "", seq))
return(cnt)
}
tCount = sapply(shortSeq, nuclCount, char='T')
cCount = sapply(shortSeq, nuclCount, char='C')
plot(1:length(tCount), tCount)
plot(1:length(cCount), cCount)
tCountlong = sapply(longSeq, nuclCount, char='T')
cCountlong = sapply(longSeq, nuclCount, char='C')
plot(1:length(tCountlong), tCount)
plot(1:length(tCountlong), tCountlong)
plot(1:length(tCount), tCount)
plot(1:length(tCountlong), tCountlong)
plot(1:length(cCountlong), cCountlong)
library(ggplot2)
shortTC = cbind(cCount, tCount)
shortTC = as.data.frame(cbind(cCount, tCount))
View(shortTC)
shortTC$cCount = shortTC$cCount / 20
View(shortTC)
shortTC = as.data.frame(cbind(cCount, tCount))
shortTC$cCount = - (shortTC$cCount / 20)
View(shortTC)
shortTC$tCount = shortTC$tCount / 20
longTC = as.data.frame(cbind(cCountlong, tCountlong))
longTC$cCountlong = - (longTC$cCountlong / 20)
longTC$tCountlong = longTC$tCountlong / 20
a = ggplot(shortTC, aes(tCount)) +
geom_bar()
a = ggplot(shortTC, aes(tCount)) +
geom_bar(); a
num = 1:nrow(shortTC)
cbind(shortTC, num)
shortTC = cbind(shortTC, num)
View(shortestGT)
View(shortTC)
num = 1:nrow(longTC)
shortTC = cbind(longTC, num)
shortTC = as.data.frame(cbind(cCount, tCount))
shortTC$cCount = - (shortTC$cCount / 20)
shortTC$tCount = shortTC$tCount / 20
num = 1:nrow(shortTC)
shortTC = cbind(shortTC, num)
longTC = cbind(longTC, num)
longTC = as.data.frame(cbind(cCountlong, tCountlong))
longTC$cCountlong = - (longTC$cCountlong / 20)
longTC$tCountlong = longTC$tCountlong / 20
num = 1:nrow(longTC)
longTC = cbind(longTC, num)
View(shortTC)
a = ggplot(shortTC, aes(num, tCount)) +
geom_step(); a
a = ggplot(shortTC, aes(num, tCount)) +
geom_step() +
geom_step(num, cCount); a
a = ggplot(shortTC, aes(num, tCount)) +
geom_step() +
geom_step(aes(num, cCount)); a
a = ggplot(shortTC, aes(num, tCount)) +
geom_point() +
geom_point(aes(num, cCount)); a
a = ggplot(shortTC, aes(num, tCount)) +
geom_bar() +
geom_bar(aes(num, cCount)); a
a = ggplot(shortTC, aes(num, tCount)) +
geom_bar(stat = "identity") +
geom_bar(aes(num, cCount), stat = "identity"); a
a = ggplot(shortTC, aes(num, tCount)) +
geom_bar(aes(col = 'red'), stat = "identity") +
geom_bar(aes(num, cCount), stat = "identity"); a
a = ggplot(shortTC, aes(num, tCount)) +
geom_bar(aes(fill = 'red'), stat = "identity") +
geom_bar(aes(num, cCount), stat = "identity"); a
a = ggplot(shortTC, aes(num, tCount)) +
geom_bar(aes(fill = 'red'), stat = "identity") +
geom_bar(aes(num, cCount, fill = 'green'), stat = "identity"); a
a = ggplot(longTC, aes(num, tCount)) +
geom_bar(aes(fill = 'red'), stat = "identity") +
geom_bar(aes(num, cCount, fill = 'green'), stat = "identity"); a
a = ggplot(longTC, aes(num, tCountlong)) +
geom_bar(aes(fill = 'red'), stat = "identity") +
geom_bar(aes(num, cCountlong, fill = 'green'), stat = "identity"); a
a = ggplot(shortTC, aes(num, tCount)) +
geom_bar(aes(fill = 'red'), stat = "identity") +
geom_bar(aes(num, cCount, fill = 'green'), stat = "identity") +
xlab('Position') + ylab('') + title(main = 'low Generation time'); a
a = ggplot(shortTC, aes(num, tCount)) +
geom_bar(aes(fill = 'red'), stat = "identity") +
geom_bar(aes(num, cCount, fill = 'green'), stat = "identity") +
title(main = 'low Generation time'); a
a = ggplot(shortTC, aes(num, tCount)) +
geom_bar(aes(fill = 'red'), stat = "identity") +
geom_bar(aes(num, cCount, fill = 'green'), stat = "identity") +
ggtitle('low Generation time'); a
a = ggplot(shortTC, aes(num, tCount)) +
geom_bar(aes(fill = 'red'), stat = "identity") +
geom_bar(aes(num, cCount, fill = 'green'), stat = "identity") +
ggtitle('low Generation time') + xlab('Position') + ylab(''); a
a = ggplot(shortTC, aes(num, tCount)) +
geom_bar(aes(fill = 'red'), stat = "identity") +
geom_bar(aes(num, cCount, fill = 'green'), stat = "identity") +
ggtitle('low Generation time') + xlab('Position') + ylab('') +
guides(); a
a = ggplot(shortTC, aes(num, tCount)) +
geom_bar(aes(fill = 'red'), stat = "identity") +
geom_bar(aes(num, cCount, fill = 'green'), stat = "identity") +
ggtitle('low Generation time') + xlab('Position') + ylab('') +
guides(fill = guide_legend(reverse=TRUE)); a
a = ggplot(shortTC, aes(num, tCount)) +
geom_bar(aes(fill = 'red'), stat = "identity") +
geom_bar(aes(num, cCount, fill = 'green'), stat = "identity") +
ggtitle('low Generation time') + xlab('Position') + ylab('') +
scale_fill_discrete(name = "Nucleotide", labels = c("A", "G")); a
a = ggplot(shortTC, aes(num, tCount)) +
geom_bar(aes(fill = 'red'), stat = "identity") +
geom_bar(aes(num, cCount, fill = 'green'), stat = "identity") +
ggtitle('low Generation time') + xlab('Position') + ylab('') +
scale_fill_discrete(name = "Nucleotide", labels = c("G", "A")); a
a = ggplot(longTC, aes(num, tCountlong)) +
geom_bar(aes(fill = 'red'), stat = "identity") +
geom_bar(aes(num, cCountlong, fill = 'green'), stat = "identity") +
ggtitle('high Generation time') + xlab('Position') + ylab('') +
scale_fill_discrete(name = "Nucleotide", labels = c("G", "A")); a
pdf('../../Body/4Figures/WholeGenomeAnalyses.NoOverlapAgAlongGenome.pdf')
a = ggplot(shortTC, aes(num, tCount)) +
geom_bar(aes(fill = 'red'), stat = "identity") +
geom_bar(aes(num, cCount, fill = 'green'), stat = "identity") +
ggtitle('low Generation time') + xlab('Position') + ylab('') +
scale_fill_discrete(name = "Nucleotide", labels = c("G", "A")); a
a = ggplot(longTC, aes(num, tCountlong)) +
geom_bar(aes(fill = 'red'), stat = "identity") +
geom_bar(aes(num, cCountlong, fill = 'green'), stat = "identity") +
ggtitle('high Generation time') + xlab('Position') + ylab('') +
scale_fill_discrete(name = "Nucleotide", labels = c("G", "A")); a
dev.off()
