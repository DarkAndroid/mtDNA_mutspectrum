'CGT', 'CGC', 'CGA', 'CGG',
'GGT', 'GGC', 'GGA', 'GGG')
length(unique(VecOfSynFourFoldDegenerateSites)) # 32
nrow(MUT) # 395157
MUT = MUT[MUT$AncestorCodon %in% VecOfSynFourFoldDegenerateSites & MUT$DescendantCodon %in% VecOfSynFourFoldDegenerateSites,]; nrow(MUT) # 209120
##### FILTER: Gene
table(MUT$Gene)
# ATP6   ATP8   COX1   COX2   COX3   CytB    ND1    ND2    ND3    ND4   ND4L
# 9752    625  13233   4264   4873 109049  14314  33809   2635  14511   2055  # there are quite many genes - do I need to analyse all of them focus on CYTB? Better - all and from time to time to check that results based on CYTB only are robust!!!
MUT = merge(MUT,Taxa, all.x = TRUE)  ##### NOT ALL SPECIES HAVE TAXONOMY!!!!
##### derive observed number of mutations for each class (no normalization)
Equil = c()
par(mfrow = c(1,5))
VecOfClasses = c('Actinopterygii','Amphibia','Reptilia','Mammalia','Aves')
for (i in 1:length(VecOfClasses))
{ # i = 1
Temp = MUT[MUT$Class == VecOfClasses[i],]
NumberOfSpecies = length(unique(Temp$Species))
title = paste(VecOfClasses[i],', N = ',NumberOfSpecies, sep = '')
Temp$number = 1
Agg = aggregate(Temp$number, by = list(Temp$Subs), FUN = sum); names(Agg) = c('Subs','Number')
Agg$Number = Agg$Number/sum(Agg$Number)
sum(Agg$Number) # 1 - 100%
pie(Agg$Number, labels = Agg$Subs, main = title, col=rainbow(length(Agg$Subs)))
ToGFromG = sum(Agg[Agg$Subs %in% c('A_G','T_G','C_G'),]$Number) /  sum(Agg[Agg$Subs %in% c('G_A','G_T','G_C'),]$Number)
ToTFromT = sum(Agg[Agg$Subs %in% c('A_T','G_T','C_T'),]$Number) /  sum(Agg[Agg$Subs %in% c('T_A','T_G','T_C'),]$Number)
ToAFromA = sum(Agg[Agg$Subs %in% c('T_A','G_A','C_A'),]$Number) /  sum(Agg[Agg$Subs %in% c('A_T','A_G','A_C'),]$Number)
ToCFromC =  sum(Agg[Agg$Subs %in% c('T_C','G_C','A_C'),]$Number) / sum(Agg[Agg$Subs %in% c('C_T','C_G','C_A'),]$Number)
Equil = rbind(Equil,c(i,VecOfClasses[i],ToGFromG,ToTFromT,ToAFromA,ToCFromC))
}
Equil = data.frame(Equil); names(Equil) = c('i','Classes','G','T','C','A')
View(Equil)
View(Agg)
View(Agg)
VecOfClasses[i]
Agg$Class = VecOfClasses[i]
Agg
str(Agg)
PieChartTable = c()
Equil = c()
par(mfrow = c(1,5))
VecOfClasses = c('Actinopterygii','Amphibia','Reptilia','Mammalia','Aves')
for (i in 1:length(VecOfClasses))
{ # i = 1
Temp = MUT[MUT$Class == VecOfClasses[i],]
NumberOfSpecies = length(unique(Temp$Species))
title = paste(VecOfClasses[i],', N = ',NumberOfSpecies, sep = '')
Temp$number = 1
Agg = aggregate(Temp$number, by = list(Temp$Subs), FUN = sum); names(Agg) = c('Subs','Number')
Agg$Number = Agg$Number/sum(Agg$Number)
sum(Agg$Number) # 1 - 100%
pie(Agg$Number, labels = Agg$Subs, main = title, col=rainbow(length(Agg$Subs)))
Agg$Class = VecOfClasses[i];
PieChartTable = rbind(PieChartTable,Agg)
ToGFromG = sum(Agg[Agg$Subs %in% c('A_G','T_G','C_G'),]$Number) /  sum(Agg[Agg$Subs %in% c('G_A','G_T','G_C'),]$Number)
ToTFromT = sum(Agg[Agg$Subs %in% c('A_T','G_T','C_T'),]$Number) /  sum(Agg[Agg$Subs %in% c('T_A','T_G','T_C'),]$Number)
ToAFromA = sum(Agg[Agg$Subs %in% c('T_A','G_A','C_A'),]$Number) /  sum(Agg[Agg$Subs %in% c('A_T','A_G','A_C'),]$Number)
ToCFromC =  sum(Agg[Agg$Subs %in% c('T_C','G_C','A_C'),]$Number) / sum(Agg[Agg$Subs %in% c('C_T','C_G','C_A'),]$Number)
Equil = rbind(Equil,c(i,VecOfClasses[i],ToGFromG,ToTFromT,ToAFromA,ToCFromC))
}
Equil = data.frame(Equil); names(Equil) = c('i','Classes','G','T','C','A')
View(PieChartTable)
PieChartTable = data.frame(PieChartTable)
View(PieChartTable)
write.table(PieChartTable,"../../Body/3Results/VertebratePolymorphisms.BetweenClassesWithoutNormalization.PieChartTable.txt")
### equilibrium for each species:
Equilibrium = c()
MUT$number = 1
AGG = aggregate(MUT$number, by = list(MUT$Subs,MUT$Species,MUT$Class), FUN = sum); names(AGG) = c('Subs','Species','Class','Number')
VecOfSpecies = unique(MUT$Species)
for (i in 1:length(VecOfSpecies))
{ # i = 1
Agg = AGG[AGG$Species == VecOfSpecies[i],]
if (sum(Agg$Number) >= 15)
{
ToGFromG = log2(sum(Agg[Agg$Subs %in% c('A_G','T_G','C_G'),]$Number) /  sum(Agg[Agg$Subs %in% c('G_A','G_T','G_C'),]$Number))
ToTFromT = log2(sum(Agg[Agg$Subs %in% c('A_T','G_T','C_T'),]$Number) /  sum(Agg[Agg$Subs %in% c('T_A','T_G','T_C'),]$Number))
ToAFromA = log2(sum(Agg[Agg$Subs %in% c('T_A','G_A','C_A'),]$Number) /  sum(Agg[Agg$Subs %in% c('A_T','A_G','A_C'),]$Number))
ToCFromC =  log2(sum(Agg[Agg$Subs %in% c('T_C','G_C','A_C'),]$Number) / sum(Agg[Agg$Subs %in% c('C_T','C_G','C_A'),]$Number))
Equilibrium = rbind(Equilibrium,c(as.character(VecOfSpecies[i]),Agg$Class[1],ToGFromG,ToTFromT,ToAFromA,ToCFromC))
}
}
Equilibrium = data.frame(Equilibrium); names(Equilibrium)=c('Species','Class','G','T','A','C')
View(Equilibrium)
Equilibrium[,3:6] <- sapply(Equilibrium[,3:6], function(x) as.numeric(as.character(x)))
View(Equilibrium)
write.table(Equilibrium,"../../Body/3Results/VertebratePolymorphisms.BetweenClassesWithoutNormalization.EquilibriumLog2ToFrom.txt", quote = FALSE, row.names = FALSE)
par(mfrow=c(1,1))
Equilibrium = Equilibrium[Equilibrium$Class %in% VecOfClasses,]
boxplot(
Equilibrium[Equilibrium$Class == 'Actinopterygii',]$G,Equilibrium[Equilibrium$Class == 'Actinopterygii',]$T, Equilibrium[Equilibrium$Class == 'Actinopterygii',]$C, Equilibrium[Equilibrium$Class == 'Actinopterygii',]$A,
Equilibrium[Equilibrium$Class == 'Amphibia',]$G,Equilibrium[Equilibrium$Class == 'Amphibia',]$T, Equilibrium[Equilibrium$Class == 'Amphibia',]$C, Equilibrium[Equilibrium$Class == 'Amphibia',]$A,
Equilibrium[Equilibrium$Class == 'Reptilia',]$G,Equilibrium[Equilibrium$Class == 'Reptilia',]$T, Equilibrium[Equilibrium$Class == 'Reptilia',]$C, Equilibrium[Equilibrium$Class == 'Reptilia',]$A,
Equilibrium[Equilibrium$Class == 'Mammalia',]$G,Equilibrium[Equilibrium$Class == 'Mammalia',]$T, Equilibrium[Equilibrium$Class == 'Mammalia',]$C, Equilibrium[Equilibrium$Class == 'Mammalia',]$A,
Equilibrium[Equilibrium$Class == 'Aves',]$G,Equilibrium[Equilibrium$Class == 'Aves',]$T, Equilibrium[Equilibrium$Class == 'Aves',]$C, Equilibrium[Equilibrium$Class == 'Aves',]$A,
outline = FALSE, notch = TRUE, col = c(ColG,ColT,ColC,ColA), names = rep(c('G','T','C','A'),5))
abline(h = 0, col = 'red')
dev.off()
###################################
###################################
rm(list=ls(all=TRUE))
pdf("../../Body/4Figures/VertebratePolymorphisms.BetweenClassesWithoutNormalization.R.01.pdf", width = 30, height = 20)
ColG = rgb(0.1,0.1,0.1,0.5)
ColT = rgb(0.1,0.1,1,0.5)
ColC = rgb(0.1,1,0.1,0.5)
ColA = rgb(1,0.1,0.1,0.5)
MUT = read.table("../../Body/3Results/Mutational_spectra_in_Chordata_ML.txt", header = TRUE)
length(unique(MUT$Species)) # 2404  SOME SPECIES HAVE THREE WORDS => CUT THE LAST AND MERGE WITH TAXA, OR EVEN CUT TWO LAST AND LEAVE JUST GENUS
####### associate species name with Class
### Taxa 1, Cut out the third world!!!!!!!!!!!!!!!!!
Taxa = read.table("../../Body/1Raw/TaxaFromKostya.Names.stat", sep = '\t',header = FALSE)
Taxa$Species = gsub(";.*",'',Taxa$V1);
for (i in (1:nrow(Taxa)))  {Taxa$Species[i] = paste(unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[1],unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[2], sep = '_')}
Taxa$Class = gsub(";Chordata;.*",'',Taxa$V1); Taxa$Class = gsub(".*;",'',Taxa$Class); table(Taxa$Class)
Taxa$Class = gsub('Actinopteri','Actinopterygii',Taxa$Class)
Taxa$Class = gsub("Testudines|Squamata|Crocodylia|Sphenodontia",'Reptilia',Taxa$Class)
length(unique(Taxa$Species)) # 1708
table(Taxa$Class)
Taxa = Taxa[,-1]
### Taxa 2, Cut out the third world!!!!!!!!!!!!!!!!!
TaxaMore = read.table("../../Body/1Raw/TaxaFromKostya.2NeedTaxa.tax.txt", sep = '\t',header = FALSE)
TaxaMore$Species = ''
for (i in (1:nrow(TaxaMore)))
{TaxaMore$Species[i] = paste(unlist(strsplit(as.character(TaxaMore$V1[i]),split = ' '))[1],unlist(strsplit(as.character(TaxaMore$V1[i]),split = ' '))[2], sep = '_')}
TaxaMore$Class = gsub("; Chordata;.*",'',TaxaMore$V2);
TaxaMore$Class = gsub(".*; ",'',TaxaMore$Class);
TaxaMore$Class = gsub('Actinopteri','Actinopterygii',TaxaMore$Class)
TaxaMore$Class = gsub("Testudines|Squamata|Crocodylia",'Reptilia',TaxaMore$Class)
table(TaxaMore$Class)
TaxaMore = TaxaMore[,-c(1,2)]
Taxa = rbind(Taxa,TaxaMore); Taxa = unique(Taxa)
table(TaxaMore$Class)
SpeciesWithoutTaxonomy = setdiff(unique(MUT$Species),unique(Taxa$Species)); length(SpeciesWithoutTaxonomy) # 63
write.table(SpeciesWithoutTaxonomy, "../../Body/2Derived/NeedTaxa.txt", row.names = FALSE, quote = FALSE, col.names = FALSE)
##### FILTER 1: to take only normal substitutions and filter out species with too high fraction (> 5%) of unnormal substitutions
VecOfNormalSubstitutions <- c('A_C','C_A',
'A_G','G_A',
'C_G','G_C',
'C_T','T_C',
'G_T','T_G',
'T_A','A_T')
nrow(MUT)
table(MUT$Subs)   # MANY CRAPPY SUBSTITUTIONS!!!!!!!!!!!!!!!!!! WHY?????????????????????
SP = data.frame(table(MUT$Species)); names(SP) = c('Species','NumberOfAllSubst')
SPN = data.frame(table(MUT[MUT$Subs %in% VecOfNormalSubstitutions,]$Species)); names(SPN) = c('Species','NumberOfNormalSubst')
SP = merge(SP,SPN); SP$FractionOfNormal = SP$NumberOfNormalSubst/SP$NumberOfAllSubst
hist(SP$FractionOfNormal)
summary(SP$FractionOfNormal) # how many to delete? ask to have more than 95% of substitutions as normal
SpeciesToDelete = SP[SP$FractionOfNormal <=0.95,]$Species; length(SpeciesToDelete) # 279 - delete
MUT = MUT[!MUT$Species %in% SpeciesToDelete,]
MUT = MUT[MUT$Subs %in% VecOfNormalSubstitutions,]
##### FILTER 2: Synonymous Substitutions
nrow(MUT) # 461215
MUT = MUT[MUT$AncestralAA == MUT$DescendantAA,]; nrow(MUT) # 395157
##### FILTER 3: fourfold degenerate sites:
VecOfSynFourFoldDegenerateSites <- c('CTT', 'CTC', 'CTA', 'CTG',
'GTT', 'GTC', 'GTA', 'GTG',
'TCT', 'TCC', 'TCA', 'TCG',
'CCT', 'CCC', 'CCA', 'CCG',
'ACT', 'ACC', 'ACA', 'ACG',
'GCT', 'GCC', 'GCA', 'GCG',
'CGT', 'CGC', 'CGA', 'CGG',
'GGT', 'GGC', 'GGA', 'GGG')
length(unique(VecOfSynFourFoldDegenerateSites)) # 32
nrow(MUT) # 395157
MUT = MUT[MUT$AncestorCodon %in% VecOfSynFourFoldDegenerateSites & MUT$DescendantCodon %in% VecOfSynFourFoldDegenerateSites,]; nrow(MUT) # 209120
##### FILTER: Gene
table(MUT$Gene)
# ATP6   ATP8   COX1   COX2   COX3   CytB    ND1    ND2    ND3    ND4   ND4L
# 9752    625  13233   4264   4873 109049  14314  33809   2635  14511   2055  # there are quite many genes - do I need to analyse all of them focus on CYTB? Better - all and from time to time to check that results based on CYTB only are robust!!!
MUT = merge(MUT,Taxa, all.x = TRUE)  ##### NOT ALL SPECIES HAVE TAXONOMY!!!!
##### derive observed number of mutations for each class (no normalization)
PieChartTable = c()
Equil = c()
par(mfrow = c(1,5))
VecOfClasses = c('Actinopterygii','Amphibia','Reptilia','Mammalia','Aves')
for (i in 1:length(VecOfClasses))
{ # i = 1
Temp = MUT[MUT$Class == VecOfClasses[i],]
NumberOfSpecies = length(unique(Temp$Species))
title = paste(VecOfClasses[i],', N = ',NumberOfSpecies, sep = '')
Temp$number = 1
Agg = aggregate(Temp$number, by = list(Temp$Subs), FUN = sum); names(Agg) = c('Subs','Number')
Agg$Number = Agg$Number/sum(Agg$Number)
sum(Agg$Number) # 1 - 100%
pie(Agg$Number, labels = Agg$Subs, main = title, col=rainbow(length(Agg$Subs)))
Agg$Class = VecOfClasses[i];
PieChartTable = rbind(PieChartTable,Agg)
ToGFromG = sum(Agg[Agg$Subs %in% c('A_G','T_G','C_G'),]$Number) /  sum(Agg[Agg$Subs %in% c('G_A','G_T','G_C'),]$Number)
ToTFromT = sum(Agg[Agg$Subs %in% c('A_T','G_T','C_T'),]$Number) /  sum(Agg[Agg$Subs %in% c('T_A','T_G','T_C'),]$Number)
ToAFromA = sum(Agg[Agg$Subs %in% c('T_A','G_A','C_A'),]$Number) /  sum(Agg[Agg$Subs %in% c('A_T','A_G','A_C'),]$Number)
ToCFromC =  sum(Agg[Agg$Subs %in% c('T_C','G_C','A_C'),]$Number) / sum(Agg[Agg$Subs %in% c('C_T','C_G','C_A'),]$Number)
Equil = rbind(Equil,c(i,VecOfClasses[i],ToGFromG,ToTFromT,ToAFromA,ToCFromC))
}
PieChartTable = data.frame(PieChartTable)
write.table(PieChartTable,"../../Body/3Results/VertebratePolymorphisms.BetweenClassesWithoutNormalization.PieChartTable.txt")
Equil = data.frame(Equil); names(Equil) = c('i','Classes','G','T','C','A')
# i        Classes                 G                 T                C                 A
# 1 Actinopterygii 0.594741697416974  0.88695652173913 1.64319645994664  1.04326864396436
# 2       Amphibia   0.5125284738041  1.04096989966555 1.76627712854758 0.917777777777778
# 3       Reptilia 0.532318741450068 0.869721115537849 1.69920494699647   1.0426957687153
# 4       Mammalia 0.538739462063428 0.899331180811808 1.77489626556017  1.02578796561605
# 5           Aves 0.569868001820665 0.766223612197029  1.8578811369509  1.08779093507554
### equilibrium for each species:
Equilibrium = c()
MUT$number = 1
AGG = aggregate(MUT$number, by = list(MUT$Subs,MUT$Species,MUT$Class), FUN = sum); names(AGG) = c('Subs','Species','Class','Number')
VecOfSpecies = unique(MUT$Species)
for (i in 1:length(VecOfSpecies))
{ # i = 1
Agg = AGG[AGG$Species == VecOfSpecies[i],]
if (sum(Agg$Number) >= 15)
{
ToGFromG = log2(sum(Agg[Agg$Subs %in% c('A_G','T_G','C_G'),]$Number) /  sum(Agg[Agg$Subs %in% c('G_A','G_T','G_C'),]$Number))
ToTFromT = log2(sum(Agg[Agg$Subs %in% c('A_T','G_T','C_T'),]$Number) /  sum(Agg[Agg$Subs %in% c('T_A','T_G','T_C'),]$Number))
ToAFromA = log2(sum(Agg[Agg$Subs %in% c('T_A','G_A','C_A'),]$Number) /  sum(Agg[Agg$Subs %in% c('A_T','A_G','A_C'),]$Number))
ToCFromC =  log2(sum(Agg[Agg$Subs %in% c('T_C','G_C','A_C'),]$Number) / sum(Agg[Agg$Subs %in% c('C_T','C_G','C_A'),]$Number))
Equilibrium = rbind(Equilibrium,c(as.character(VecOfSpecies[i]),Agg$Class[1],ToGFromG,ToTFromT,ToAFromA,ToCFromC))
}
}
Equilibrium = data.frame(Equilibrium); names(Equilibrium)=c('Species','Class','G','T','A','C')
Equilibrium[,3:6] <- sapply(Equilibrium[,3:6], function(x) as.numeric(as.character(x)))
write.table(Equilibrium,"../../Body/3Results/VertebratePolymorphisms.BetweenClassesWithoutNormalization.EquilibriumLog2ToFrom.txt", quote = FALSE, row.names = FALSE)
par(mfrow=c(1,1))
Equilibrium = Equilibrium[Equilibrium$Class %in% VecOfClasses,]
boxplot(
Equilibrium[Equilibrium$Class == 'Actinopterygii',]$G,Equilibrium[Equilibrium$Class == 'Actinopterygii',]$T, Equilibrium[Equilibrium$Class == 'Actinopterygii',]$C, Equilibrium[Equilibrium$Class == 'Actinopterygii',]$A,
Equilibrium[Equilibrium$Class == 'Amphibia',]$G,Equilibrium[Equilibrium$Class == 'Amphibia',]$T, Equilibrium[Equilibrium$Class == 'Amphibia',]$C, Equilibrium[Equilibrium$Class == 'Amphibia',]$A,
Equilibrium[Equilibrium$Class == 'Reptilia',]$G,Equilibrium[Equilibrium$Class == 'Reptilia',]$T, Equilibrium[Equilibrium$Class == 'Reptilia',]$C, Equilibrium[Equilibrium$Class == 'Reptilia',]$A,
Equilibrium[Equilibrium$Class == 'Mammalia',]$G,Equilibrium[Equilibrium$Class == 'Mammalia',]$T, Equilibrium[Equilibrium$Class == 'Mammalia',]$C, Equilibrium[Equilibrium$Class == 'Mammalia',]$A,
Equilibrium[Equilibrium$Class == 'Aves',]$G,Equilibrium[Equilibrium$Class == 'Aves',]$T, Equilibrium[Equilibrium$Class == 'Aves',]$C, Equilibrium[Equilibrium$Class == 'Aves',]$A,
outline = FALSE, notch = TRUE, col = c(ColG,ColT,ColC,ColA), names = rep(c('G','T','C','A'),5))
abline(h = 0, col = 'red')
dev.off()
GT = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt")
GT = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", sep = '\t')
View(GT)
GT = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", sep = '\t', header = TRUE)
View(GT)
GT$Species = gsub(' ','_',GT$Scientific_name)
View(GT)
View(Equilibrium)
GT = merge(Equilibrium,GT)
View(GT)
cor.test(GT$G,GT$GenerationLength_d, method = 'spearman')
cor.test(GT$C,GT$GenerationLength_d, method = 'spearman') # positive a bit - small are running away faster...
cor.test(GT$T,GT$GenerationLength_d, method = 'spearman') # nothing
cor.test(GT$A,GT$GenerationLength_d, method = 'spearman') # nothing
cor.test(GT$G,GT$GenerationLength_d, method = 'spearman') # positive a bit - small are running away faster...
#####  COUNT NUCLEOTIDE CONTENT CAREFULLY (BODY/2Derived/polarizedbr_data => external + More Shallow => codons, 4fold nucl, FrA,T,G,C) => barplot?
#####  normalized average MutSpec (pie charts or 12 boxplots for each class)?
rm(list=ls(all=TRUE))
VecOfSynFourFoldDegenerateSites <- c('CTT', 'CTC', 'CTA', 'CTG',
'GTT', 'GTC', 'GTA', 'GTG',
'TCT', 'TCC', 'TCA', 'TCG',
'CCT', 'CCC', 'CCA', 'CCG',
'ACT', 'ACC', 'ACA', 'ACG',
'GCT', 'GCC', 'GCA', 'GCG',
'CGT', 'CGC', 'CGA', 'CGG',
'GGT', 'GGC', 'GGA', 'GGG')
length(unique(VecOfSynFourFoldDegenerateSites)) # 32
unzip("../../Body/2Derived/POLARIZEDBR_DATA.zip", exdir= "../../Body/2Derived/")
List = list.files("../../Body/2Derived/POLARIZEDBR_DATA/")
for (i in 1:length(List))
{ # i = 1303
infile = paste("../../Body/2Derived/POLARIZEDBR_DATA/",as.character(List[i]),sep='')
if (length(grep('POLARISED',infile)) > 0)
{
Species = gsub('\\..*','',as.character(List[i]))
Gene = gsub(Species,'',as.character(List[i])); Gene = gsub('.POLARISED.txt','',Gene); Gene = gsub('\\.POLARISED.txt','',Gene); Gene = gsub('\\.','',Gene);
GeneSpecies = read.table(infile, header = TRUE)
GeneSpecies = GeneSpecies[GeneSpecies$BranchPosition == 'External',]
ExternalSeqsTogether = paste(GeneSpecies$MoreShallowNodeSeq,collapse = '')
ExternalSeqsTogether = unlist(strsplit(ExternalSeqsTogether,'')) # 5700/3
CodonsVec = c(); StartNuc = 1
if (length(ExternalSeqsTogether)/3 == round(length(ExternalSeqsTogether)/3))  # if divide by 3 without the rest
{
for (j in 1:(length(ExternalSeqsTogether)/3))
{
CodonsVec = c(CodonsVec,paste(ExternalSeqsTogether[StartNuc : (StartNuc+2)],collapse = ''))
StartNuc = StartNuc+3
}
AllCodons = length(CodonsVec)        # 1021
CodonsVecNeutral = CodonsVec[CodonsVec %in% VecOfSynFourFoldDegenerateSites]
NeutralCodons = length(CodonsVecNeutral) # 1900
data.frame(table(CodonsVecNeutral))
CodonsVecNeutral = gsub("CTA|GTA|TCA|CCA|ACA|GCA|CGA|GGA",'A',CodonsVecNeutral)
CodonsVecNeutral = gsub("CTT|GTT|TCT|CCT|ACT|GCT|CGT|GGT",'T',CodonsVecNeutral)
CodonsVecNeutral = gsub("CTG|GTG|TCG|CCG|ACG|GCG|CGG|GGG",'G',CodonsVecNeutral)
CodonsVecNeutral = gsub("CTC|GTC|TCC|CCC|ACC|GCC|CGC|GGC",'C',CodonsVecNeutral)
Line=c(Species,Gene,length(CodonsVecNeutral[CodonsVecNeutral == 'A']),length(CodonsVecNeutral[CodonsVecNeutral == 'T']),length(CodonsVecNeutral[CodonsVecNeutral == 'G']),length(CodonsVecNeutral[CodonsVecNeutral == 'C']), AllCodons, NeutralCodons)
if (i == 1) {Final = Line}
if (i >  1) {Final = rbind(Final,Line)}
}
}
}
Final = as.data.frame(Final); names(Final)=c('Species','Gene','A','T','G','C',"NumberOfFourFoldDegenCodons",'NumberOfAllCodons')
write.table(Final, "../../Body/3Results/VertebratePolymorphisms.Normalization.NeutralATGC.txt", quote = FALSE, row.names = FALSE)
## delete all unziped files
files <- list.files("../../Body/2Derived/POLARIZEDBR_DATA/")
for (i in 1:length(files))
{ # i = 1
file = paste('../../Body/2Derived/POLARIZEDBR_DATA/',files[i],sep='')
if (file.exists(file)) file.remove(file)
}
#### associate species name with Class
### Taxa 1, Cut out the third world!!!!!!!!!!!!!!!!!
Taxa = read.table("../../Body/1Raw/TaxaFromKostya.Names.stat", sep = '\t',header = FALSE)
Taxa$Species = gsub(";.*",'',Taxa$V1);
for (i in (1:nrow(Taxa)))  {Taxa$Species[i] = paste(unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[1],unlist(strsplit(as.character(Taxa$Species[i]),split = ' '))[2], sep = '_')}
Taxa$Class = gsub(";Chordata;.*",'',Taxa$V1); Taxa$Class = gsub(".*;",'',Taxa$Class); table(Taxa$Class)
Taxa$Class = gsub('Actinopteri','Actinopterygii',Taxa$Class)
Taxa$Class = gsub("Testudines|Squamata|Crocodylia|Sphenodontia",'Reptilia',Taxa$Class)
length(unique(Taxa$Species)) # 1708
table(Taxa$Class)
Taxa = Taxa[,-1]
### Taxa 2, Cut out the third world!!!!!!!!!!!!!!!!!
TaxaMore = read.table("../../Body/1Raw/TaxaFromKostya.2NeedTaxa.tax.txt", sep = '\t',header = FALSE)
TaxaMore$Species = ''
for (i in (1:nrow(TaxaMore)))
{TaxaMore$Species[i] = paste(unlist(strsplit(as.character(TaxaMore$V1[i]),split = ' '))[1],unlist(strsplit(as.character(TaxaMore$V1[i]),split = ' '))[2], sep = '_')}
TaxaMore$Class = gsub("; Chordata;.*",'',TaxaMore$V2);
TaxaMore$Class = gsub(".*; ",'',TaxaMore$Class);
TaxaMore$Class = gsub('Actinopteri','Actinopterygii',TaxaMore$Class)
TaxaMore$Class = gsub("Testudines|Squamata|Crocodylia",'Reptilia',TaxaMore$Class)
table(TaxaMore$Class)
TaxaMore = TaxaMore[,-c(1,2)]
Taxa = rbind(Taxa,TaxaMore); Taxa = unique(Taxa)
View(Taxa)
View(Final)
View(Taxa)
Final = merge(Final,Taxa)
Agg1 = aggregate(list(Final$A,Final$T,Final$G,Final$C), by = list(Final$Species), FUN = sum)
View(Final)
Agg1 = aggregate(c(Final$A,Final$T,Final$G,Final$C), by = list(Final$Species), FUN = sum)
View(Final)
str(Final)
View(Final)
Final[,3:6] <- sapply(Final[,3:6], function(x) as.numeric(as.character(x)))
Agg1 = aggregate(c(Final$A,Final$T,Final$G,Final$C), by = list(Final$Species), FUN = sum)
View(Final)
names(Agg1)
names(Final)
Agg1 = aggregate(c(Final$A,Final$T,Final$G,Final$C), by = list(Final$Species), FUN = sum)
Agg1 = aggregate(list(Final$A,Final$T,Final$G,Final$C), by = list(Final$Species), FUN = sum)
View(Agg1)
Agg1 = aggregate(list(Final$A,Final$T,Final$G,Final$C), by = list(Final$Species, Final$Class), FUN = sum)
Agg1 = aggregate(list(Final$A,Final$T,Final$G,Final$C), by = list(Final$Species, Final$Class), FUN = sum)
View(Agg1)
View(Agg1)
Agg1 = aggregate(list(Final$A,Final$T,Final$G,Final$C), by = list(Final$Species, Final$Class), FUN = sum); names(Agg1) = c('Species','Class','A','T','G','C')
View(Agg1)
Agg1$FrA = Agg1$FrA / (Agg1$FrA+Agg1$FrT+Agg1$FrG+Agg1$FrC)
str(Agg1)
(Agg1$FrA+Agg1$FrT+Agg1$FrG+Agg1$FrC)
Agg1$FrA = Agg1$A / (Agg1$A+Agg1$T+Agg1$G+Agg1$C)
Agg1$FrA = Agg1$A/(Agg1$A+Agg1$T+Agg1$G+Agg1$C)
Agg1$FrT = Agg1$T/(Agg1$A+Agg1$T+Agg1$G+Agg1$C)
Agg1$FrG = Agg1$G/(Agg1$A+Agg1$T+Agg1$G+Agg1$C)
Agg1$FrC = Agg1$C/(Agg1$A+Agg1$T+Agg1$G+Agg1$C)
View(Agg1)
View(Agg1)
Agg2 = aggregate(list(Agg1$FrA,Agg1$FrT,Agg1$FrG,Agg1$FrC), by = list(Agg1$Class), FUN = mean);
View(Agg2)
names(Agg2) = c('Class','FrA','FrT','FrG','FrC')
View(Agg2)
Agg2$Sum = Agg2$FrA + Agg2$FrT + Agg2$FrG + Agg2$FrC
View(Agg2)
View(Agg2)
Agg2 = Agg2[Agg2$Class %in% c('Actinopterygii','Amphibia','Reptilia','Mammalia','Aves')]
Agg2 = Agg2[Agg2$Class %in% c('Actinopterygii','Amphibia','Reptilia','Mammalia','Aves'),]
View(Agg2)
Agg2 = Agg2[,-6]
barplot(Agg2, border="white", space=0.04, font.axis=2, xlab="group")
Agg2
barplot(Agg2[,2:5], border="white", space=0.04, font.axis=2, xlab="group")
barplot(Agg2[,c(2:5)], border="white", space=0.04, font.axis=2, xlab="group")
barplot(as.matrix(Agg2[,c(2:5)]), border="white", space=0.04, font.axis=2, xlab="group")
barplot(t(as.matrix(Agg2[,c(2:5)])), border="white", space=0.04, font.axis=2, xlab="group")
Agg2 = aggregate(list(Agg1$FrA,Agg1$FrT,Agg1$FrG,Agg1$FrC), by = list(Agg1$Class), FUN = mean); names(Agg2) = c('Class','FrA','FrT','FrG','FrC')
Agg2$Sum = Agg2$FrA + Agg2$FrT + Agg2$FrG + Agg2$FrC # 1
Agg2 = Agg2[Agg2$Class %in% c('Actinopterygii','Amphibia','Reptilia','Mammalia','Aves'),]
barplot(t(as.matrix(Agg2[,c(2:5)])), border="white", space=0.04, font.axis=2, xlab="group")
BARPLOT = t(as.matrix(Agg2[,c(2:5)]))
BARPLOT
row.names(Agg2)=Agg2$Class
BARPLOT = t(as.matrix(Agg2[,c(2:5)]))
BARPLOT
BARPLOT = BARPLOT[,c(1,5,2,4,3)]
BARPLOT
BARPLOT = BARPLOT[c(3,2,4,1),] # row order
BARPLOT
barplot(t(as.matrix(Agg2[,c(2:5)])), border="white", space=0.04, font.axis=2, xlab="group")
barplot(BARPLOT, border="white", space=0.04, font.axis=2, xlab="")
barplot(BARPLOT, col = c(ColG,ColT,ColC,ColA), border="white", space=0.04, font.axis=2, xlab="")
ColG = rgb(0.1,0.1,0.1,0.5)
ColT = rgb(0.1,0.1,1,0.5)
ColC = rgb(0.1,1,0.1,0.5)
ColA = rgb(1,0.1,0.1,0.5)
barplot(BARPLOT, col = c(ColG,ColT,ColC,ColA), border="white", space=0.04, font.axis=2, xlab="")
pdf("../../Body/4Figures/VertebratePolymorphisms.Normalization.R.01.pdf", width = 30, height = 20)
barplot(BARPLOT, col = c(ColG,ColT,ColC,ColA), border="white", space=0.04, font.axis=2, xlab="")
dev.off()
pdf("../../Body/4Figures/VertebratePolymorphisms.Normalization.R.01.pdf", width = 30, height = 20)
barplot(BARPLOT, col = c(ColG,ColT,ColC,ColA), border="white", space=0.04, font.axis=2, xlab="")
dev.off()
pdf("../../Body/4Figures/VertebratePolymorphisms.Normalization.R.01.pdf")
barplot(BARPLOT, col = c(ColG,ColT,ColC,ColA), border="white", space=0.04, font.axis=2, xlab="")
dev.off()
PieChartTable = read.table("../../Body/3Results/VertebratePolymorphisms.BetweenClassesWithoutNormalization.PieChartTable.txt")
PieChartTable
BARPLOT
PieChartTable$AncestralNuc = unlist(strsplit(PieChartTable$Subs,'_'))[1]
PieChartTable$AncestralNuc = unlist(strsplit(PieChartTable$Subs,split = '_'))[1]
PieChartTable$Subs
PieChartTable$AncestralNuc = unlist(strsplit(as.character(PieChartTable$Subs),split = '_'))[1]
PieChartTable$AncestralNuc
View(PieChartTable)
PieChartTable = read.table("../../Body/3Results/VertebratePolymorphisms.BetweenClassesWithoutNormalization.PieChartTable.txt")
PieChartTable$AncestralNuc = unlist(strsplit(as.character(PieChartTable$Subs),split = '_'))[1]
View(PieChartTable)
PieChartTable$AncestralNuc = NA
for i in 1:nrow(PieChartTable) {PieChartTable$AncestralNuc[i] = unlist(strsplit(as.character(PieChartTable$Subs[i]),split = '_'))[1]}
for (i in 1:nrow(PieChartTable)) {PieChartTable$AncestralNuc[i] = unlist(strsplit(as.character(PieChartTable$Subs[i]),split = '_'))[1]}
View(PieChartTable)
Agg2
PieChartTable = merge(PieChartTable,Agg2[,c(1:5)])
PieChartTable$NormalisedNumber = 0
PieChartTable$NormalisedNumber = 0
for (i in 1:nrow(PieChartTable))
{
if (PieChartTable$AncestralNuc[i] == 'A') {PieChartTable$NormalisedNumber[i] = PieChartTable$Number[i] / PieChartTable$FrA[i]}
}
View(PieChartTable)
if (PieChartTable$AncestralNuc[i] == 'G') {PieChartTable$NormalisedNumber[i] = PieChartTable$Number[i] / PieChartTable$FrG[i]}
PieChartTable$NormalisedNumber = 0
for (i in 1:nrow(PieChartTable))
{
if (PieChartTable$AncestralNuc[i] == 'A') {PieChartTable$NormalisedNumber[i] = PieChartTable$Number[i] / PieChartTable$FrA[i]}
if (PieChartTable$AncestralNuc[i] == 'T') {PieChartTable$NormalisedNumber[i] = PieChartTable$Number[i] / PieChartTable$FrT[i]}
if (PieChartTable$AncestralNuc[i] == 'G') {PieChartTable$NormalisedNumber[i] = PieChartTable$Number[i] / PieChartTable$FrG[i]}
if (PieChartTable$AncestralNuc[i] == 'C') {PieChartTable$NormalisedNumber[i] = PieChartTable$Number[i] / PieChartTable$FrC[i]}
}
PieChartTable = read.table("../../Body/3Results/VertebratePolymorphisms.BetweenClassesWithoutNormalization.PieChartTable.txt")
PieChartTable$AncestralNuc = NA
for (i in 1:nrow(PieChartTable)) {PieChartTable$AncestralNuc[i] = unlist(strsplit(as.character(PieChartTable$Subs[i]),split = '_'))[1]}
PieChartTable = merge(PieChartTable,Agg2[,c(1:5)])
PieChartTable$Normalised1Number = 0
for (i in 1:nrow(PieChartTable))
{
if (PieChartTable$AncestralNuc[i] == 'A') {PieChartTable$Normalised1Number[i] = PieChartTable$Number[i] / PieChartTable$FrA[i]}
if (PieChartTable$AncestralNuc[i] == 'T') {PieChartTable$Normalised1Number[i] = PieChartTable$Number[i] / PieChartTable$FrT[i]}
if (PieChartTable$AncestralNuc[i] == 'G') {PieChartTable$Normalised1Number[i] = PieChartTable$Number[i] / PieChartTable$FrG[i]}
if (PieChartTable$AncestralNuc[i] == 'C') {PieChartTable$Normalised1Number[i] = PieChartTable$Number[i] / PieChartTable$FrC[i]}
}
Agg = aggregate(PieChartTable$Normalised1Number, by = list(PieChartTable$Class), FUN = sum)
View(Agg)
Agg = aggregate(PieChartTable$Normalised1Number, by = list(PieChartTable$Class), FUN = sum); names(Agg) = c('Class','Total')
PieChartTable = merge(PieChartTable,Agg)
View(PieChartTable)
PieChartTable$Normalised2Number = PieChartTable$Normalised1Number/PieChartTable$Total
pie(PieChartTable[PieChartTable$Class == 'Actinopterygii',]$Normalised2Number, labels = PieChartTable[PieChartTable$Class == 'Actinopterygii',]$Subs, main = title, col=rainbow(12))
pie(PieChartTable[PieChartTable$Class == 'Actinopterygii',]$Normalised2Number, labels = PieChartTable[PieChartTable$Class == 'Actinopterygii',]$Subs, main = title, col=rainbow(12))
rainbow(12)
pie(PieChartTable[PieChartTable$Class == 'Actinopterygii',]$Normalised2Number, labels = PieChartTable[PieChartTable$Class == 'Actinopterygii',]$Subs, main = title, col=rainbow(12))
str(PieChartTable)
dev.off()
dev.off()
pie(PieChartTable[PieChartTable$Class == 'Actinopterygii',]$Normalised2Number, labels = PieChartTable[PieChartTable$Class == 'Actinopterygii',]$Subs, main = title, col=rainbow(12))
pie(PieChartTable[PieChartTable$Class == 'Actinopterygii',]$Normalised2Number, labels = PieChartTable[PieChartTable$Class == 'Actinopterygii',]$Subs, main = 'Actinopterygii', col=rainbow(12))
VecOfClasses = c('Actinopterygii','Amphibia','Reptilia','Mammalia','Aves')
par(mfrow=c(1,5))
VecOfClasses = c('Actinopterygii','Amphibia','Reptilia','Mammalia','Aves')
for (i in 1:length(VecOfClasses))
{
pie(PieChartTable[PieChartTable$Class == VecOfClasses[i],]$Normalised2Number, labels = PieChartTable[PieChartTable$Class == VecOfClasses[i],]$Subs, main = VecOfClasses[i], col=rainbow(12))
}
BARPLOT = t(as.matrix(Agg2[,c(2:5)]))
BARPLOT = BARPLOT[,c(1,5,2,4,3)] # column order
BARPLOT = BARPLOT[c(3,2,4,1),] # row order
colnames(data)=c("A","B","C","D","E")
rownames(data)=c("var1","var2","var3")
# Get the stacked barplot
ColG = rgb(0.1,0.1,0.1,0.5)
ColT = rgb(0.1,0.1,1,0.5)
ColC = rgb(0.1,1,0.1,0.5)
ColA = rgb(1,0.1,0.1,0.5)
pdf("../../Body/4Figures/VertebratePolymorphisms.Normalization.R.01.pdf", width = 30, height = 20)
barplot(BARPLOT, col = c(ColG,ColT,ColC,ColA), border="white", space=0.04, font.axis=2, xlab="")
PieChartTable = read.table("../../Body/3Results/VertebratePolymorphisms.BetweenClassesWithoutNormalization.PieChartTable.txt")
PieChartTable$AncestralNuc = NA
for (i in 1:nrow(PieChartTable)) {PieChartTable$AncestralNuc[i] = unlist(strsplit(as.character(PieChartTable$Subs[i]),split = '_'))[1]}
PieChartTable = merge(PieChartTable,Agg2[,c(1:5)])
PieChartTable$Normalised1Number = 0
for (i in 1:nrow(PieChartTable))
{
if (PieChartTable$AncestralNuc[i] == 'A') {PieChartTable$Normalised1Number[i] = PieChartTable$Number[i] / PieChartTable$FrA[i]}
if (PieChartTable$AncestralNuc[i] == 'T') {PieChartTable$Normalised1Number[i] = PieChartTable$Number[i] / PieChartTable$FrT[i]}
if (PieChartTable$AncestralNuc[i] == 'G') {PieChartTable$Normalised1Number[i] = PieChartTable$Number[i] / PieChartTable$FrG[i]}
if (PieChartTable$AncestralNuc[i] == 'C') {PieChartTable$Normalised1Number[i] = PieChartTable$Number[i] / PieChartTable$FrC[i]}
}
Agg = aggregate(PieChartTable$Normalised1Number, by = list(PieChartTable$Class), FUN = sum); names(Agg) = c('Class','Total')
PieChartTable = merge(PieChartTable,Agg)
PieChartTable$Normalised2Number = PieChartTable$Normalised1Number/PieChartTable$Total
par(mfrow=c(1,5))
VecOfClasses = c('Actinopterygii','Amphibia','Reptilia','Mammalia','Aves')
for (i in 1:length(VecOfClasses))
{
pie(PieChartTable[PieChartTable$Class == VecOfClasses[i],]$Normalised2Number, labels = PieChartTable[PieChartTable$Class == VecOfClasses[i],]$Subs, main = VecOfClasses[i], col=rainbow(12))
}
dev.off()
write.table(PieChartTable,"../../Body/3Results/VertebratePolymorphisms.Normalization.Normalized12Fractions.txt", quote = FALSE, row.names = FALSE)
