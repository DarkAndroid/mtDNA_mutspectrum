library(pacman) # install.packages("pacman")
View(TempData)
p_load(tibble, dplyr, magrittr, purrr)
contrasts <- TempData %>%
#  select(generlen, TLOfADRRreal, TLOfADRR1) %>%
#  mutate_if(is.numeric, log2) %>%
map(pic, tree2)
View(contrasts)
cor.test(contrasts$GenerationLength_d, contrasts$FrT, method= 'spearman')  # p = 0.02491, rho = -0.08810244  # PAPER
cor.test(contrasts$GenerationLength_d, contrasts$FrC, method= 'spearman')  # p = 0.02121, rho =  0.09050626  # PAPER
cor.test(contrasts$GenerationLength_d, contrasts$FrA, method= 'spearman')  # p = 0.09415
cor.test(contrasts$GenerationLength_d, contrasts$FrG, method= 'spearman')  # p = 0.06404
View(contrasts)
contrasts2 <- as.data.frame(apply(TempData, 2, pic, tree2))
# contrasts2 <- as.data.frame(apply(TempData, 2, pic, tree2))
names(contrasts2) = names(TempData)
summary(contrasts2$GenerationLength_d)
summary(contrasts$GenerationLength_d)
sumary(pic(TempData$GenerationLength_d, tree2))
summary(pic(TempData$GenerationLength_d, tree2))
summary(pic(TempData$FrA, tree2))
summary(contrasts$FrA)
summary(pic(TempData$GenerationLength_d, tree2)) == summary(contrasts$GenerationLength_d)
cor.test(contrasts$GenerationLength_d, contrasts$FrT, method= 'spearman')  # p = 0.02491, rho = -0.08810244  # PAPER
cor.test(contrasts$GenerationLength_d, contrasts$FrC, method= 'spearman')  # p = 0.02121, rho =  0.09050626  # PAPER
cor.test(contrasts$GenerationLength_d, contrasts$FrA, method= 'spearman')  # p = 0.09415
cor.test(contrasts$GenerationLength_d, contrasts$FrG, method= 'spearman')  # p = 0.06404
### start from pairwise correlations and go to multiple linear model:
cor.test(log2(AGG$GenerationLength_d),AGG$FrA, method = 'spearman') # rho -0.2681362; p = 3.635e-12
cor.test(log2(AGG$GenerationLength_d),AGG$FrT, method = 'spearman') # rho -0.3066279; p = 1.287e-15
cor.test(log2(AGG$GenerationLength_d),AGG$FrG, method = 'spearman') # rho  0.1804395; p = 3.665e-06
cor.test(log2(AGG$GenerationLength_d),AGG$FrC, method = 'spearman') # rho  0.4717114;  p < 2.2e-16
A <- lm(log2(AGG$GenerationLength_d) ~ AGG$FrA + AGG$FrT + AGG$FrC); summary(A) # A is not significant - delete it
A <- lm(log2(AGG$GenerationLength_d) ~ AGG$FrT + AGG$FrC); summary(A)
A <- lm(log2(AGG$GenerationLength_d) ~ scale(AGG$FrT) + scale(AGG$FrC)); summary(A) # log2(GT) = 11.08294 - 0.12 scale(FrT) + 0.45 scale(FrC)
A <- lm(scale(contrasts$GenerationLength_d) ~ contrasts$FrA + contrasts$FrT + contrasts$FrC); summary(A) # A is not significant - delete it
A <- lm(scale(contrasts$GenerationLength_d) ~ contrasts$FrT + contrasts$FrC); summary(A) # only C is significant
A <- lm(scale(contrasts$GenerationLength_d) ~ contrasts$FrC); summary(A) # only C is significant: 0.00596 **
data = AGG[which(as.character(AGG$Species) %in% tree$tip.label),]
TempData = data[, -1]
contrasts <- TempData %>%
#  select(generlen, TLOfADRRreal, TLOfADRR1) %>%
#  mutate_if(is.numeric, log2) %>%
map(pic, tree2)
data = AGG[which(as.character(AGG$Species) %in% tree$tip.label),]
data$GenerationLength_d = log2(data$GenerationLength_d)  # I added log of generation length
data = data[-597,] # It is duplicate
row.names(data) = data$Species
tree2 <- drop.tip(tree, b)
TempData = data[, -1]
contrasts <- TempData %>%
#  select(generlen, TLOfADRRreal, TLOfADRR1) %>%
#  mutate_if(is.numeric, log2) %>%
map(pic, tree2)
summary(pic(TempData$GenerationLength_d, tree2)) == summary(contrasts$GenerationLength_d)
summary(contrasts$GenerationLength_d)
summary(TempData$GenerationLength_d)
summary(pic(TempData$GenerationLength_d, tree2))
A <- lm(scale(contrasts$GenerationLength_d) ~ contrasts$FrA + contrasts$FrT + contrasts$FrC); summary(A) # A is not significant - delete it
summary(pic(TempData$GenerationLength_d, tree2))
summary(contrasts$FrA)
?pic
summary(pic(TempData$GenerationLength_d, tree2, scaled = FALSE))
data = AGG[which(as.character(AGG$Species) %in% tree$tip.label),]
data = data[-597,] # It is duplicate
TempData = data[, -1]
summary(pic(TempData$GenerationLength_d, tree2))
Rep = read.table('../../../ComparativeGenomics/Body/3Results/ecoreps.csv', sep = ';', header = TRUE)
data = Rep[which(as.character(Rep$spece) %in% tree$tip.label),]
row.names(data) = data$spece
df_vec <- as.character(Rep$spece)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
tree2 <- drop.tip(tree, b)
contrasts <- data %>%
select(generlen, TLOfADRRreal, TLOfADRR1) %>%
mutate_if(is.numeric, log2) %>%
map(pic, tree2)
summary(contrasts$generlen)
summary(pic(log2(data$generlen), tree2))
summary(data$generlen)
summary(TempData)
summary(TempData$GenerationLength_d)
contrasts <- TempData %>%
#  select(generlen, TLOfADRRreal, TLOfADRR1) %>%
#  mutate_if(is.numeric, log2) %>%
map(pic, tree2)
data = AGG[which(as.character(AGG$Species) %in% tree$tip.label),]
data$GenerationLength_d = log2(data$GenerationLength_d)  # I added log of generation length
df_vec <- as.character(AGG$Species)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
data = data[-597,] # It is duplicate
row.names(data) = data$Species
tree2 <- drop.tip(tree, b)
TempData = data[, -1]
contrasts <- TempData %>%
#  select(generlen, TLOfADRRreal, TLOfADRR1) %>%
#  mutate_if(is.numeric, log2) %>%
map(pic, tree2)
summary(pic(TempData$GenerationLength_d, tree2))
data = AGG[which(as.character(AGG$Species) %in% tree$tip.label),]
df_vec <- as.character(AGG$Species)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
data = data[-597,] # It is duplicate
row.names(data) = data$Species
tree2 <- drop.tip(tree, b)
TempData = data[, -1]
contrasts <- TempData %>%
#  select(generlen, TLOfADRRreal, TLOfADRR1) %>%
mutate_if(is.numeric, log2) %>%
map(pic, tree2)
summary(contrasts$GenerationLength_d)
summary(pic(TempData$GenerationLength_d, tree2)) == summary(contrasts$GenerationLength_d)
summary(pic(TempData$GenerationLength_d, tree2))
View(contrasts)
summary(log2(pic(TempData$GenerationLength_d, tree2))) == summary(contrasts$GenerationLength_d)
cor.test(contrasts$GenerationLength_d, contrasts$FrT, method= 'spearman')  # p = 0.02491, rho = -0.08810244  # PAPER
View(TempData)
View(contrasts)
length(tree2$tip.label)
summary(log2(pic(TempData$GenerationLength_d, tree2))) == summary(contrasts$GenerationLength_d)
summary(pic(log2(TempData$GenerationLength_d), tree2)) == summary(contrasts$GenerationLength_d)
summary(pic(log2(TempData$GenerationLength_d), tree2))
data = Rep[which(as.character(Rep$spece) %in% tree$tip.label),]
row.names(data) = data$spece
df_vec <- as.character(Rep$spece)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
tree2 <- drop.tip(tree, b)
length(tree2$tip.label)
contrasts <- data %>%
select(generlen, TLOfADRRreal, TLOfADRR1) %>%
mutate_if(is.numeric, log2) %>%
map(pic, tree2)
summary(contrasts$generlen)
summary(pic(log2(data$generlen), tree2))
data = AGG[which(as.character(AGG$Species) %in% tree$tip.label),]
# data$GenerationLength_d = log2(data$GenerationLength_d)  # I added log of generation length
df_vec <- as.character(AGG$Species)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
data = data[-597,] # It is duplicate
row.names(data) = data$Species
tree2 <- drop.tip(tree, b)
TempData = data[, -1]
contrasts <- TempData %>%
#  select(generlen, TLOfADRRreal, TLOfADRR1) %>%
mutate_if(is.numeric, log2) %>%
map(pic, tree2)
summary(pic(log2(TempData$GenerationLength_d), tree2)) == summary(contrasts$GenerationLength_d)
summary(pic(log2(TempData$GenerationLength_d), tree2))
contrasts2 <- as.data.frame(apply(TempData, 2, pic, tree2))
names(contrasts2) = names(TempData)
View(contrasts)
View(contrasts2)
names(data)
contrasts <- data %>%
select(GenerationLength_d, FrA, FrT, FrG, FrC) %>%
mutate_if(is.numeric, log2) %>%
map(pic, tree2)
summary(pic(log2(TempData$GenerationLength_d), tree2)) == summary(contrasts$GenerationLength_d)
summary(pic(log2(TempData$GenerationLength_d), tree2))
summary(TempData$GenerationLength_d)
data = Rep[which(as.character(Rep$spece) %in% tree$tip.label),]
summary(data$generlen)
rm(list=ls(all=TRUE))
############ read aminoacid and codon sequences
unzip("../../Body/2Derived/AllGenesCodons.zip", exdir = "../../Body/2Derived/")
WholeGenomes = read.table("../../Body/2Derived/AllGenesCodons.csv", header = TRUE, sep = '\t')
if (file.exists("../../Body/2Derived/AllGenesCodons.csv")) file.remove("../../Body/2Derived/AllGenesCodons.csv")
View(WholeGenomes)
unzip("../../Body/2Derived/full_table.zip", exdir = "../../Body/2Derived/")
Taxa = read.table("../../Body/2Derived/full_table.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/2Derived/full_table.txt")) file.remove("../../Body/2Derived/full_table.txt")
View(Taxa)
View(Taxa)
rm(list=ls(all=TRUE))
########### read
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/") # AllGenesCodonUsageNoOverlap.txt
NeutralATGC = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
View(NeutralATGC)
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
table(NeutralATGC$Class)
NeutralATGC = NeutralATGC[NeutralATGC == 'Mammalia',]
nrow(NeutralATGC)/13
View(NeutralATGC)
rm(list=ls(all=TRUE))
########### read species x gene nucleotide content table:
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/") # AllGenesCodonUsageNoOverlap.txt
NeutralATGC = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
########### filter out all classes except mammals (788 species x 13 genes)
table(NeutralATGC$Class)
NeutralATGC = NeutralATGC[NeutralATGC$Class == 'Mammalia',]
nrow(NeutralATGC)/13 # 788
View(NeutralATGC)
NeutralAtgcSum = aggregate(list(NeutralATGC$NeutralA,NeutralATGC$NeutralT,NeutralATGC$NeutralG,NeutralATGC$NeutralC), by = list(NeutralATGC$Species), FUN = sum)
View(NeutralAtgcSum)
View(NeutralAtgcSum)
names(NeutralAtgcSum) = c('Species','TotalNeutralA','TotalNeutralT','TotalNeutralG','TotalNeutralC')
View(NeutralAtgcSum)
unzip("../../Body/2Derived/full_table.zip", exdir = "../../Body/2Derived/")
Taxa = read.table("../../Body/2Derived/full_table.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/2Derived/full_table.txt")) file.remove("../../Body/2Derived/full_table.txt")
View(Taxa)
rm(list=ls(all=TRUE))
########### read species x gene nucleotide content table:
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/") # AllGenesCodonUsageNoOverlap.txt
NeutralATGC = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
########### filter out all classes except mammals (788 species x 13 genes)
table(NeutralATGC$Class)
NeutralATGC = NeutralATGC[NeutralATGC$Class == 'Mammalia',]
nrow(NeutralATGC)/13 # 788
########### summ up all neutral A T G C per species
NeutralAtgcSum = aggregate(list(NeutralATGC$NeutralA,NeutralATGC$NeutralT,NeutralATGC$NeutralG,NeutralATGC$NeutralC), by = list(NeutralATGC$Species), FUN = sum)
names(NeutralAtgcSum) = c('species','TotalNeutralA','TotalNeutralT','TotalNeutralG','TotalNeutralC')
########### read A T G C in the whole genome and taxonomy
unzip("../../Body/2Derived/full_table.zip", exdir = "../../Body/2Derived/")
Taxa = read.table("../../Body/2Derived/full_table.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/2Derived/full_table.txt")) file.remove("../../Body/2Derived/full_table.txt")
unzip("../../Body/2Derived/full_table.zip", exdir = "../../Body/2Derived/")
WholeGenomeATGC = read.table("../../Body/2Derived/full_table.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/2Derived/full_table.txt")) file.remove("../../Body/2Derived/full_table.txt")
View(WholeGenomeATGC)
ATGC = merge(NeutralATGC,WholeGenomeATGC, by ='species')
View(WholeGenomeATGC)
View(NeutralAtgcSum)
ATGC = merge(NeutralAtgcSum,WholeGenomeATGC, by ='species')
View(ATGC)
nrow(ATGC)
GL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
View(GL)
GL$species = gsub(' ','_',GL$Scientific_name)
View(GL)
View(GL)
View(GL)
GL = GL[which(colnames(GL) == "species|GenerationLength_d")]
GL = GL[which(colnames(GL) %in% c('species','GenerationLength_d')]
GL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GL$species = gsub(' ','_',GL$Scientific_name)
GL = GL[which(colnames(GL) %in% c('species','GenerationLength_d')]
GL = GL[which(colnames(GL) %in% c('species','GenerationLength_d'),]
GL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GL$species = gsub(' ','_',GL$Scientific_name)
my_data %>% select(GL$species, GL$GenerationLength_d)
which(colnames(GL) %in% c('species','GenerationLength_d')
Temp = which(colnames(GL) %in% c('species','GenerationLength_d')
Temp = which(colnames(GL) %in% c('species','GenerationLength_d')
Temp = which(colnames(GL) %in% c('species','GenerationLength_d')
Temp = which(colnames(GL) %in% c('species','GenerationLength_d')
Temp = which(colnames(GL) %in% c('species','GenerationLength_d'))
Temp = which(colnames(GL) %in% c('species','GenerationLength_d'))
Temp = which(colnames(GL) %in% c('species','GenerationLength_d'))
Temp = which(colnames(GL) %in% c('species','GenerationLength_d'))
GL = GL[which(colnames(GL) %in% c('species','GenerationLength_d')]
GL = GL[,names(GL) %in% c('species','GenerationLength_d')]
View(GL)
########## 4 read Generation Length
GL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GL$species = gsub(' ','_',GL$Scientific_name)
GL = GL[,names(GL) %in% c('species','GenerationLength_d')]
View(GL)
nrow(ATGC)
length(unique(ATGC$species))
nrow(ATGC); length(unique(ATGC$species))
ATGC = merge(ATGC,GL, by = 'species')
nrow(ATGC);
nrow(ATGC); length(unique(ATGC$species)); # 650
View(GL)
table(ATGC$species)
temp = data.frame(table(ATGC$species))
View(temp)
temp = temp[sort(temp$Freq)]
View(temp)
rm(list=ls(all=TRUE))
########### 1 read species x gene nucleotide content table:
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/") # AllGenesCodonUsageNoOverlap.txt
NeutralATGC = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
########### 1A filter out all classes except mammals (788 species x 13 genes)
table(NeutralATGC$Class)
NeutralATGC = NeutralATGC[NeutralATGC$Class == 'Mammalia',]
nrow(NeutralATGC)/13 # 788
########### 1B summ up all neutral A T G C per species
NeutralAtgcSum = aggregate(list(NeutralATGC$NeutralA,NeutralATGC$NeutralT,NeutralATGC$NeutralG,NeutralATGC$NeutralC), by = list(NeutralATGC$Species), FUN = sum)
names(NeutralAtgcSum) = c('species','TotalNeutralA','TotalNeutralT','TotalNeutralG','TotalNeutralC')
########### 2 read A T G C in the whole genome and taxonomy
unzip("../../Body/2Derived/full_table.zip", exdir = "../../Body/2Derived/")
WholeGenomeATGC = read.table("../../Body/2Derived/full_table.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/2Derived/full_table.txt")) file.remove("../../Body/2Derived/full_table.txt")
########## 3 merge NeutralAtgcSum with WholeGenomeATGC by species
ATGC = merge(NeutralAtgcSum,WholeGenomeATGC, by ='species')
nrow(ATGC) # 788
########## 4 read Generation Length
GL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GL$species = gsub(' ','_',GL$Scientific_name)
GL = GL[,names(GL) %in% c('species','GenerationLength_d')]
nrow(ATGC); length(unique(ATGC$species))
AtgcGl = merge(ATGC,GL, by = 'species')
nrow(AtgcGl); length(unique(AtgcGl$species)); # 650
temp = data.frame(table(AtgcGl$species));
View(temp)
View(temp)
temp = data.frame(table(AtgcGl$species)); temp[temp$Freq == 2,]$Var1
AtgcGl[AtgcGl$species == 'Neophocaena_phocaenoides',]
length(unique(GL$species))
nrow(GL)
GL = aggregate(GL$GenerationLength_d, by = GL$species, FUN = mean)
GL = aggregate(GL$GenerationLength_d, by = list(GL$species), FUN = mean)
View(GL)
rm(list=ls(all=TRUE))
########### 1 read species x gene nucleotide content table:
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/") # AllGenesCodonUsageNoOverlap.txt
NeutralATGC = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
########### 1A filter out all classes except mammals (788 species x 13 genes)
table(NeutralATGC$Class)
NeutralATGC = NeutralATGC[NeutralATGC$Class == 'Mammalia',]
nrow(NeutralATGC)/13 # 788
########### 1B summ up all neutral A T G C per species
NeutralAtgcSum = aggregate(list(NeutralATGC$NeutralA,NeutralATGC$NeutralT,NeutralATGC$NeutralG,NeutralATGC$NeutralC), by = list(NeutralATGC$Species), FUN = sum)
names(NeutralAtgcSum) = c('species','TotalNeutralA','TotalNeutralT','TotalNeutralG','TotalNeutralC')
########### 2 read A T G C in the whole genome and taxonomy
unzip("../../Body/2Derived/full_table.zip", exdir = "../../Body/2Derived/")
WholeGenomeATGC = read.table("../../Body/2Derived/full_table.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/2Derived/full_table.txt")) file.remove("../../Body/2Derived/full_table.txt")
########## 3 merge NeutralAtgcSum with WholeGenomeATGC by species
ATGC = merge(NeutralAtgcSum,WholeGenomeATGC, by ='species')
nrow(ATGC) # 788
########## 4 read Generation Length
GL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GL$species = gsub(' ','_',GL$Scientific_name)
GL = GL[,names(GL) %in% c('species','GenerationLength_d')]
nrow(GL); length(unique(GL$species)); # 5424, 5426
GL = aggregate(GL$GenerationLength_d, by = list(GL$species), FUN = mean); names(GL)=c('species','GenerationLength_d')
nrow(ATGC); length(unique(ATGC$species))
AtgcGl = merge(ATGC,GL, by = 'species')
nrow(AtgcGl); length(unique(AtgcGl$species)); # 650
View(AtgcGl)
write.table(AtgcGl, "../../Body/3Results/WholeGenomeAnalysesCodonUsage.MammalsGenTimeATGCNeutralOrUnderSelection.R.txt")
AtgcGl = read.table("../../Body/3Results/WholeGenomeAnalysesCodonUsage.MammalsGenTimeATGCNeutralOrUnderSelection.R.txt")
rm(list=ls(all=TRUE))
########### 1 read a table with 649 unique mammalian species with A T G C per whole mit genome, A T G C in neutral sites (with removed overlaps between genes) and generation length.
AtgcGl = read.table("../../Body/3Results/WholeGenomeAnalysesCodonUsage.MammalsGenTimeATGCNeutralOrUnderSelection.R.txt")
View(AtgcGl)
View(AtgcGl)
View(AtgcGl)
a <- lm(log2(AtgcGl$GenerationLength_d) ~ AtgcGl$TotalNeutralA + AtgcGl$TotalNeutralT + AtgcGl$TotalNeutralG + AtgcGl$TotalNeutralC + AtgcGl$A + AtgcGl$T + AtgcGl$G + AtgcGl$C)
summary(a)
a <- lm(log2(AtgcGl$GenerationLength_d) ~ scale(AtgcGl$TotalNeutralA) + scale(AtgcGl$TotalNeutralT) + scale(AtgcGl$TotalNeutralG) + scale(AtgcGl$TotalNeutralC) + scale(AtgcGl$A) + scale(AtgcGl$T) + scale(AtgcGl$G) + scale(AtgcGl$C)); summary(a)
a <- lm(log2(AtgcGl$GenerationLength_d) ~ scale(AtgcGl$TotalNeutralA) + scale(AtgcGl$TotalNeutralT) + scale(AtgcGl$TotalNeutralG) + scale(AtgcGl$A) + scale(AtgcGl$T) + scale(AtgcGl$G) + scale(AtgcGl$C)); summary(a)
a <- lm(log2(AtgcGl$GenerationLength_d) ~ scale(AtgcGl$TotalNeutralA) + scale(AtgcGl$TotalNeutralG) + scale(AtgcGl$A) + scale(AtgcGl$T) + scale(AtgcGl$G) + scale(AtgcGl$C)); summary(a)
cor.test(AtgcGl$GenerationLength_d, AtgcGl$TotalNeutralA, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$TotalNeutralT, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$TotalNeutralG, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$TotalNeutralC, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$A, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$TotalNeutralA, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$A, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$TotalNeutralT, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$T, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$TotalNeutralT, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$T, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$TotalNeutralG, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$G, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$TotalNeutralC, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$C, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$TotalNeutralC, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$TotalNeutralA, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$A, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$TotalNeutralT, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$T, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$TotalNeutralG, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$G, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$TotalNeutralC, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$C, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$TotalNeutralC, method = 'spearman')
cor.test(AtgcGl$GenerationLength_d, AtgcGl$C, method = 'spearman')
rm(list=ls(all=TRUE))
###### PURPOSE: derive a table with 649 unique mammalian species with A T G C per whole mit genome, A T G C in neutral sites (with removed overlaps between genes), A T G C in selected sites (whole genome minus neutral) and generation length.
########### 1 read species x gene nucleotide content table:
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/") # AllGenesCodonUsageNoOverlap.txt
NeutralATGC = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
########### 1A filter out all classes except mammals (788 species x 13 genes)
table(NeutralATGC$Class)
NeutralATGC = NeutralATGC[NeutralATGC$Class == 'Mammalia',]
nrow(NeutralATGC)/13 # 788
########### 1B summ up all neutral A T G C per species
NeutralAtgcSum = aggregate(list(NeutralATGC$NeutralA,NeutralATGC$NeutralT,NeutralATGC$NeutralG,NeutralATGC$NeutralC), by = list(NeutralATGC$Species), FUN = sum)
names(NeutralAtgcSum) = c('species','TotalNeutralA','TotalNeutralT','TotalNeutralG','TotalNeutralC')
########### 2 read A T G C in the whole genome and taxonomy
unzip("../../Body/2Derived/full_table.zip", exdir = "../../Body/2Derived/")
WholeGenomeATGC = read.table("../../Body/2Derived/full_table.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/2Derived/full_table.txt")) file.remove("../../Body/2Derived/full_table.txt")
########## 3 merge NeutralAtgcSum with WholeGenomeATGC by species
ATGC = merge(NeutralAtgcSum,WholeGenomeATGC, by ='species')
nrow(ATGC) # 788
########## 4 read Generation Length
GL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GL$species = gsub(' ','_',GL$Scientific_name)
GL = GL[,names(GL) %in% c('species','GenerationLength_d')]
nrow(GL); length(unique(GL$species)); # 5424, 5426 => two species have two different generation lengthes => take average
GL = aggregate(GL$GenerationLength_d, by = list(GL$species), FUN = mean); names(GL)=c('species','GenerationLength_d')
########## 5 merge ATGC with GL => ATGC
nrow(ATGC); length(unique(ATGC$species))
AtgcGl = merge(ATGC,GL, by = 'species')
nrow(AtgcGl); length(unique(AtgcGl$species)); # 649
View(AtgcGl)
AtgcGl$UnderSelectionA = AtgcGl$A - AtgcGl$TotalNeutralA
rm(list=ls(all=TRUE))
###### PURPOSE: derive a table with 649 unique mammalian species with A T G C per whole mit genome, A T G C in neutral sites (with removed overlaps between genes), A T G C in selected sites (whole genome minus neutral) and generation length.
########### 1 read species x gene nucleotide content table:
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/") # AllGenesCodonUsageNoOverlap.txt
NeutralATGC = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
########### 1A filter out all classes except mammals (788 species x 13 genes)
table(NeutralATGC$Class)
NeutralATGC = NeutralATGC[NeutralATGC$Class == 'Mammalia',]
nrow(NeutralATGC)/13 # 788
########### 1B summ up all neutral A T G C per species
NeutralAtgcSum = aggregate(list(NeutralATGC$NeutralA,NeutralATGC$NeutralT,NeutralATGC$NeutralG,NeutralATGC$NeutralC), by = list(NeutralATGC$Species), FUN = sum)
names(NeutralAtgcSum) = c('species','NeutralA','NeutralT','NeutralG','NeutralC')
########### 2 read A T G C in the whole genome and taxonomy
unzip("../../Body/2Derived/full_table.zip", exdir = "../../Body/2Derived/")
WholeGenomeATGC = read.table("../../Body/2Derived/full_table.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/2Derived/full_table.txt")) file.remove("../../Body/2Derived/full_table.txt")
View(WholeGenomeATGC)
names(WholeGenomeATGC)
names(WholeGenomeATGC) = c('species','taxonomy','WholeGenomeA','WholeGenomeC','WholeGenomeG','WholeGenomeT','WholeGenomeX','genome')
rm(list=ls(all=TRUE))
###### PURPOSE: derive a table with 649 unique mammalian species with A T G C per whole mit genome, A T G C in neutral sites (with removed overlaps between genes), A T G C in selected sites (whole genome minus neutral) and generation length.
########### 1 read species x gene nucleotide content table:
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/") # AllGenesCodonUsageNoOverlap.txt
NeutralATGC = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
########### 1A filter out all classes except mammals (788 species x 13 genes)
table(NeutralATGC$Class)
NeutralATGC = NeutralATGC[NeutralATGC$Class == 'Mammalia',]
nrow(NeutralATGC)/13 # 788
########### 1B summ up all neutral A T G C per species
NeutralAtgcSum = aggregate(list(NeutralATGC$NeutralA,NeutralATGC$NeutralT,NeutralATGC$NeutralG,NeutralATGC$NeutralC), by = list(NeutralATGC$Species), FUN = sum)
names(NeutralAtgcSum) = c('species','NeutralA','NeutralT','NeutralG','NeutralC')
########### 2 read A T G C in the whole genome and taxonomy
unzip("../../Body/2Derived/full_table.zip", exdir = "../../Body/2Derived/")
WholeGenomeATGC = read.table("../../Body/2Derived/full_table.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/2Derived/full_table.txt")) file.remove("../../Body/2Derived/full_table.txt")
names(WholeGenomeATGC) = c('species','taxonomy','WholeGenomeA','WholeGenomeC','WholeGenomeG','WholeGenomeT','WholeGenomeX','genome')
########## 3 merge NeutralAtgcSum with WholeGenomeATGC by species
ATGC = merge(NeutralAtgcSum,WholeGenomeATGC, by ='species')
nrow(ATGC) # 788
########## 4 read Generation Length
GL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GL$species = gsub(' ','_',GL$Scientific_name)
GL = GL[,names(GL) %in% c('species','GenerationLength_d')]
nrow(GL); length(unique(GL$species)); # 5424, 5426 => two species have two different generation lengthes => take average
GL = aggregate(GL$GenerationLength_d, by = list(GL$species), FUN = mean); names(GL)=c('species','GenerationLength_d')
nrow(ATGC); length(unique(ATGC$species))
AtgcGl = merge(ATGC,GL, by = 'species')
nrow(AtgcGl); length(unique(AtgcGl$species)); # 649
View(AtgcGl)
AtgcGl$UnderSelectionA = AtgcGl$WholeGenomeA - AtgcGl$NeutralA
AtgcGl$UnderSelectionT = AtgcGl$WholeGenomeT - AtgcGl$NeutralT
AtgcGl$UnderSelectionG = AtgcGl$WholeGenomeG - AtgcGl$NeutralG
AtgcGl$UnderSelectionC = AtgcGl$WholeGenomeC - AtgcGl$NeutralC
rm(list=ls(all=TRUE))
###### PURPOSE: derive a table with 649 unique mammalian species with A T G C per whole mit genome, A T G C in neutral sites (with removed overlaps between genes), A T G C in selected sites (whole genome minus neutral) and generation length.
########### 1 read species x gene nucleotide content table:
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/") # AllGenesCodonUsageNoOverlap.txt
NeutralATGC = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
########### 1A filter out all classes except mammals (788 species x 13 genes)
table(NeutralATGC$Class)
NeutralATGC = NeutralATGC[NeutralATGC$Class == 'Mammalia',]
nrow(NeutralATGC)/13 # 788
########### 1B summ up all neutral A T G C per species
NeutralAtgcSum = aggregate(list(NeutralATGC$NeutralA,NeutralATGC$NeutralT,NeutralATGC$NeutralG,NeutralATGC$NeutralC), by = list(NeutralATGC$Species), FUN = sum)
names(NeutralAtgcSum) = c('species','NeutralA','NeutralT','NeutralG','NeutralC')
########### 2 read A T G C in the whole genome and taxonomy
unzip("../../Body/2Derived/full_table.zip", exdir = "../../Body/2Derived/")
WholeGenomeATGC = read.table("../../Body/2Derived/full_table.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/2Derived/full_table.txt")) file.remove("../../Body/2Derived/full_table.txt")
names(WholeGenomeATGC) = c('species','taxonomy','WholeGenomeA','WholeGenomeC','WholeGenomeG','WholeGenomeT','WholeGenomeX','genome')
########## 3 merge NeutralAtgcSum with WholeGenomeATGC by species
ATGC = merge(NeutralAtgcSum,WholeGenomeATGC, by ='species')
nrow(ATGC) # 788
########## 4 read Generation Length
GL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GL$species = gsub(' ','_',GL$Scientific_name)
GL = GL[,names(GL) %in% c('species','GenerationLength_d')]
nrow(GL); length(unique(GL$species)); # 5424, 5426 => two species have two different generation lengthes => take average
GL = aggregate(GL$GenerationLength_d, by = list(GL$species), FUN = mean); names(GL)=c('species','GenerationLength_d')
########## 5 merge ATGC with GL => ATGC
nrow(ATGC); length(unique(ATGC$species))
AtgcGl = merge(ATGC,GL, by = 'species')
nrow(AtgcGl); length(unique(AtgcGl$species)); # 649
########## 6 derive A T G C under selection as whole genome minus neutral
AtgcGl$UnderSelectionA = AtgcGl$WholeGenomeA - AtgcGl$NeutralA
AtgcGl$UnderSelectionT = AtgcGl$WholeGenomeT - AtgcGl$NeutralT
AtgcGl$UnderSelectionG = AtgcGl$WholeGenomeG - AtgcGl$NeutralG
AtgcGl$UnderSelectionC = AtgcGl$WholeGenomeC - AtgcGl$NeutralC
########## 7 write table
write.table(AtgcGl, "../../Body/3Results/WholeGenomeAnalysesCodonUsage.MammalsGenTimeATGCNeutralOrUnderSelection.R.txt")
View(AtgcGl)
