contrast = contrast[!is.na(contrast$feature_1),]
contrast = contrast[!is.na(contrast$feature_2),]
if (nrow(contrast) > 10){
a = summary(lm(feature_1 ~ 0 + feature_2, contrast))
a = a$coefficients[1,]
ggplot(data = contrast, aes(feature_1, feature_2)) + geom_point(na.rm = TRUE) +
ggtitle(paste(taxon, a[1], a[4], nrow(contrast), sep = ', ')) + xlab(feature_1) + ylab(feature_2)
}
}
names(AtgcGl)
hand_pic(AtgcGl, 'GenerationLength_d', 'GenerationLength_d', 'All', tree2)
hand_pic(AtgcGl, 'GenerationLength_d', 'WholeGenomeA', 'All', tree2)
feature_1 = 'GenerationLength_d'; feature_2 = 'WholeGenomeA'; taxon = 'All'; data = AtgcGl
tree = tree2
library(geiger)
library(ggplot2)
temp_data = data
if(taxon != 'All'){
temp_data = data[data$TAXON == taxon,]
}
temp_data = temp_data[!is.na(temp_data[feature_1]),]; temp_data = temp_data[!is.na(temp_data[feature_2]),];
# pruning tree
row.names(temp_data) = temp_data$Species
View(temp_data)
View(temp_data)
species = AtgcGl$species
# pruning tree
row.names(temp_data) = species
View(temp_data)
TempDiff <- setdiff(tree$tip.label, row.names(temp_data))
SpeciesDiff <- setdiff(row.names(temp_data), tree$tip.label)
temp_data = temp_data[!(temp_data$Species %in% SpeciesDiff),]
temp_data = temp_data[!(species %in% SpeciesDiff),]
temp_tree <- drop.tip(tree, TempDiff)
# getting sister tips
max_node_number = max(temp_tree$edge)
min_node_number = length(temp_tree$tip.label) + 1
one_line = c()
for (i in min_node_number:max_node_number){
descendants = tips(temp_tree, i)
if (length(descendants) == 2){
one_line = rbind(one_line, descendants)
}
}
sisters = as.data.frame(one_line)
names(sisters) = c('Species_1', 'Species_2')
print(nrow(sisters))
# getting contrasts
contrast = c(NULL)
for (i in 1:nrow(sisters)){
# i = 4
Species_1 = sisters[i,1]; Species_2 = sisters[i,2]
first_value_1 = temp_data[Species_1, feature_1];
second_value_1 = temp_data[Species_2, feature_1]
first_value_2 = temp_data[Species_1, feature_2];
second_value_2 = temp_data[Species_2, feature_2]
contrast = rbind(contrast, c(first_value_1 - second_value_1,
first_value_2 - second_value_2))
}
contrast = as.data.frame(contrast)
names(contrast) = c('feature_1', 'feature_2')
contrast = contrast[!is.na(contrast$feature_1),]
contrast = as.data.frame(contrast)
for (i in 1:nrow(sisters)){
# i = 4
Species_1 = sisters[i,1]; Species_2 = sisters[i,2]
first_value_1 = temp_data[Species_1, feature_1];
second_value_1 = temp_data[Species_2, feature_1]
first_value_2 = temp_data[Species_1, feature_2];
second_value_2 = temp_data[Species_2, feature_2]
contrast = rbind(contrast, c(first_value_1 - second_value_1,
first_value_2 - second_value_2))
}
contrast = as.data.frame(contrast)
View(contrast)
View(sisters)
i = 4
# i = 4
Species_1 = sisters[i,1]; Species_2 = sisters[i,2]
first_value_1 = temp_data[Species_1, feature_1];
for (i in min_node_number:max_node_number){
descendants = tips(temp_tree, i)
if (length(descendants) == 2){
one_line = rbind(one_line, descendants)
}
}
View(one_line)
sisters = as.data.frame(one_line)
View(sisters)
print(nrow(sisters))
one_line = c()
for (i in min_node_number:max_node_number){
descendants = tips(temp_tree, i)
if (length(descendants) == 2){
one_line = rbind(one_line, descendants)
}
}
sisters = as.data.frame(one_line)
names(sisters) = c('Species_1', 'Species_2')
print(nrow(sisters))
sisters$Species_1 <- as.character(sisters$Species_1); sisters$Species_2 <- as.character(sisters$Species_2)
# getting contrasts
contrast = c(NULL)
for (i in 1:nrow(sisters)){
# i = 4
Species_1 = sisters[i,1]; Species_2 = sisters[i,2]
first_value_1 = temp_data[Species_1, feature_1];
second_value_1 = temp_data[Species_2, feature_1]
first_value_2 = temp_data[Species_1, feature_2];
second_value_2 = temp_data[Species_2, feature_2]
contrast = rbind(contrast, c(first_value_1 - second_value_1,
first_value_2 - second_value_2))
}
View(contrasts)
View(contrast)
i = 4
# i = 4
Species_1 = sisters[i,1]; Species_2 = sisters[i,2]
first_value_1 = temp_data[Species_1, feature_1];
View(temp_data)
temp_data = data
View(temp_data)
temp_data = temp_data[!is.na(temp_data[feature_1]),]; temp_data = temp_data[!is.na(temp_data[feature_2]),];
View(temp_data)
# pruning tree
row.names(temp_data) = species
TempDiff <- setdiff(tree$tip.label, row.names(temp_data))
SpeciesDiff <- setdiff(row.names(temp_data), tree$tip.label)
temp_data = temp_data[!(species %in% SpeciesDiff),]
temp_tree <- drop.tip(tree, TempDiff)
View(temp_data)
# i = 4
Species_1 = sisters[i,1]; Species_2 = sisters[i,2]
View(temp_data)
first_value_1 = temp_data[Species_1, feature_1];
second_value_1 = temp_data[Species_2, feature_1]
first_value_2 = temp_data[Species_1, feature_2];
second_value_2 = temp_data[Species_2, feature_2]
contrast = rbind(contrast, c(first_value_1 - second_value_1,
first_value_2 - second_value_2))
View(contrast)
# getting contrasts
contrast = c(NULL)
for (i in 1:nrow(sisters)){
# i = 4
Species_1 = sisters[i,1]; Species_2 = sisters[i,2]
first_value_1 = temp_data[Species_1, feature_1];
second_value_1 = temp_data[Species_2, feature_1]
first_value_2 = temp_data[Species_1, feature_2];
second_value_2 = temp_data[Species_2, feature_2]
contrast = rbind(contrast, c(first_value_1 - second_value_1,
first_value_2 - second_value_2))
}
View(contrast)
contrast = as.data.frame(contrast)
names(contrast) = c('feature_1', 'feature_2')
contrast = contrast[!is.na(contrast$feature_1),]
contrast = contrast[!is.na(contrast$feature_2),]
if (nrow(contrast) > 10){
a = summary(lm(feature_1 ~ 0 + feature_2, contrast))
a = a$coefficients[1,]
ggplot(data = contrast, aes(feature_1, feature_2)) + geom_point(na.rm = TRUE) +
ggtitle(paste(taxon, a[1], a[4], nrow(contrast), sep = ', ')) + xlab(feature_1) + ylab(feature_2)
}
a
hand_pic(AtgcGl, AtgcGl$species, 'GenerationLength_d', 'WholeGenomeA', tree2)
rm(list=ls(all=TRUE))
library(gridExtra) # install.packages("gridExtra")
library(grid)
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
names(SynNuc)
### make ND6 complementary:
NotND6 = SynNuc[SynNuc$Gene != 'ND6',]
ND6 = SynNuc[SynNuc$Gene == 'ND6',]
A = ND6$NeutralT
T = ND6$NeutralA
G = ND6$NeutralC
C = ND6$NeutralG
ND6$NeutralA = A
ND6$NeutralT = T
ND6$NeutralG = G
ND6$NeutralC = C
SynNuc = rbind(NotND6,ND6)
### count fraction of nucleotides
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$TAXON = SynNuc$Class
VecOfTaxa = unique(SynNuc$TAXON)
GT = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GT$Species = gsub(' ','_',GT$Scientific_name)
length(unique(GT$Species))
summary(GT$AdultBodyMass_g)     # 2        21        71    136058       614 154321304
summary(GT$GenerationLength_d)  # 129.0   624.4  1101.1  1578.8  2064.3 18980.0 # max = 18980 days => 52 years. ok
GT = GT[,c(11,13)]
summary(GT$GenerationLength_d)
############ merge (work only with mammals since GT is only for mammals)
SynNucGT = merge(GT,SynNuc)
length(unique(SynNucGT$Species))  # 649 species
table(SynNucGT$TAXON)
########### question 1: which nucleotides better correlate with GT: log2(GT) = 11 - 0.29*scale(FrT) + 0.33*scale(FrC) (in line with our mutational spectrum result that T->C correlates with generation time)
AGG = aggregate(list(SynNucGT$FrA,SynNucGT$FrT,SynNucGT$FrG,SynNucGT$FrC), by = list(SynNucGT$Species,SynNucGT$GenerationLength_d), FUN = mean)
names(AGG) = c('Species','GenerationLength_d','FrA','FrT','FrG','FrC')
library(ape)
library(pacman) # install.packages("pacman")
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
data = AGG[which(as.character(AGG$Species) %in% tree$tip.label),]
# data$GenerationLength_d = log2(data$GenerationLength_d)  # I added log of generation length
df_vec <- as.character(AGG$Species)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
data = data[-597,] # It is duplicate
row.names(data) = data$Species
tree2 <- drop.tip(tree, b)
a = data[match(tree2$tip.label, data$Species)]
a = data[match(tree2$tip.label, data$Species),]
View(data)
View(a)
matchedData = data[match(tree2$tip.label, data$Species),]
contrasts <- matchedData %>%
select(GenerationLength_d, FrA, FrT, FrG, FrC) %>%
mutate_if(is.numeric, log2) %>%
map(pic, tree2)
p_load(tibble, dplyr, magrittr, purrr, skimr)
contrasts <- matchedData %>%
select(GenerationLength_d, FrA, FrT, FrG, FrC) %>%
mutate_if(is.numeric, log2) %>%
map(pic, tree2)
summary(contrasts)
summary(contrasts$GenerationLength_d)
summary(pic(log2(TempData$GenerationLength_d), tree2)) == summary(contrasts$GenerationLength_d)
summary(pic(log2(matchedData$GenerationLength_d), tree2)) == summary(matchedData$GenerationLength_d)
summary(pic(log2(matchedData$GenerationLength_d), tree2))
summary(matchedData$GenerationLength_d)
summary(pic(log2(matchedData$GenerationLength_d), tree2)) == summary(contrasts$GenerationLength_d)
cor.test(contrasts$GenerationLength_d, contrasts$FrT, method= 'spearman')  # p = 0.02491, rho = -0.08810244  # PAPER
cor.test(contrasts$GenerationLength_d, contrasts$FrC, method= 'spearman')  # p = 0.02121, rho =  0.09050626  # PAPER
cor.test(contrasts$GenerationLength_d, contrasts$FrA, method= 'spearman')  # p = 0.09415
cor.test(contrasts$GenerationLength_d, contrasts$FrG, method= 'spearman')  # p = 0.06404
View(matchedData)
contrasts2 <- as.data.frame(apply(matchedData, 2, pic, tree2))
A <- lm(scale(contrasts$GenerationLength_d) ~ contrasts$FrA + contrasts$FrT + contrasts$FrC); summary(A) # A is not significant - delete it
A <- lm(log2(AGG$GenerationLength_d) ~ AGG$FrA + AGG$FrT + AGG$FrC); summary(A) # A is not significant - delete it
A <- lm(log2(AGG$GenerationLength_d) ~ AGG$FrT + AGG$FrC); summary(A)
A <- lm(log2(AGG$GenerationLength_d) ~ scale(AGG$FrT) + scale(AGG$FrC)); summary(A) # log2(GT) = 11.08294 - 0.12 scale(FrT) + 0.45 scale(FrC)
A <- lm(scale(contrasts$GenerationLength_d) ~ contrasts$FrA + contrasts$FrT + contrasts$FrC); summary(A) # A is not significant - delete it
cor.test(contrasts$GenerationLength_d, contrasts$FrT, method= 'spearman')  # p = 0.02491, rho = -0.08810244  # PAPER
cor.test(contrasts$GenerationLength_d, contrasts$FrC, method= 'spearman')  # p = 0.02121, rho =  0.09050626  # PAPER
cor.test(contrasts$GenerationLength_d, contrasts$FrA, method= 'spearman')  # p = 0.09415
cor.test(contrasts$GenerationLength_d, contrasts$FrG, method= 'spearman')  # p = 0.06404
library(caper)
comparTable = comparative.data(tree2, matchedData, Species)
crunch(GenerationLength_d, FrT, data=comparTable)
View(comparTable)
crunch(GenerationLength_d, FrT, data=comparTable)
crunch(GenerationLength_d ~ FrT, data=comparTable)
matchedData$GenerationLength_d = log2(matchedData$GenerationLength_d)
p_load(tibble, dplyr, magrittr, purrr, skimr)
contrasts <- matchedData %>%
select(GenerationLength_d, FrA, FrT, FrG, FrC) %>%
#  mutate_if(is.numeric, log2) %>%
map(pic, tree2)
View(matchedData)
contrasts <- matchedData %>%
select(GenerationLength_d, FrA, FrT, FrG, FrC) %>%
#  mutate_if(is.numeric, log2) %>%
map(pic, tree2)
contrasts <- matchedData %>%
select(GenerationLength_d, FrA, FrT, FrG, FrC) %>%
mutate_if(is.numeric, log2) %>%
map(pic, tree2)
View(matchedData)
contrasts <- matchedData %>%
#  select(GenerationLength_d, FrA, FrT, FrG, FrC) %>%
#  mutate_if(is.numeric, log2) %>%
map(pic, tree2)
matchedData = data[match(tree2$tip.label, data$Species),]
contrasts <- matchedData %>%
select(GenerationLength_d, FrA, FrT, FrG, FrC) %>%
#  mutate_if(is.numeric, log2) %>%
map(pic, tree2)
p_load(tibble, dplyr, magrittr, purrr, skimr)
contrasts <- matchedData %>%
select(GenerationLength_d, FrA, FrT, FrG, FrC) %>%
#  mutate_if(is.numeric, log2) %>%
map(pic, tree2)
contrasts <- TempData %>%
#  select(GenerationLength_d, FrA, FrT, FrG, FrC) %>%
mutate_if(is.numeric, log2) %>%
map(pic, tree2)
View(matchedData)
View(matchedData)
matchedData$GenerationLength_d = log2(matchedData$GenerationLength_d)
View(matchedData)
p_load(tibble, dplyr, magrittr, purrr, skimr)
contrasts <- matchedData %>%
select(GenerationLength_d, FrA, FrT, FrG, FrC) %>%
#  mutate_if(is.numeric, log2) %>%
map(pic, tree2)
comparTable = comparative.data(tree2, matchedData, Species)
crunch(GenerationLength_d ~ FrT, data=comparTable)
crunch(GenerationLength_d ~ FrC, data=comparTable)
crunch(GenerationLength_d ~ FrA, data=comparTable)
crunch(GenerationLength_d ~ FrG, data=comparTable)
cor.test(contrasts$GenerationLength_d, contrasts$FrC, method= 'spearman')  # p = 0.02121, rho =  0.09050626  # PAPER
matchedData = data[match(tree2$tip.label, data$Species),]
contrasts <- matchedData %>%
select(GenerationLength_d, FrA, FrT, FrG, FrC) %>%
#  mutate_if(is.numeric, log2) %>%
map(pic, tree2)
contrasts <- matchedData %>%
select(GenerationLength_d, FrA, FrT, FrG, FrC) %>%
mutate_if(is.numeric, log2) %>%
map(pic, tree2)
View(matchedData)
contrasts <- matchedData %>%
select(GenerationLength_d, FrA, FrT, FrG, FrC) %>%
#  mutate_if(is.numeric, log2) %>%
map(pic, tree2)
contrasts <- matchedData %>%
#  select(GenerationLength_d, FrA, FrT, FrG, FrC) %>%
#  mutate_if(is.numeric, log2) %>%
map(pic, tree2)
contrasts <- matchedData[, -1] %>%
#  select(GenerationLength_d, FrA, FrT, FrG, FrC) %>%
#  mutate_if(is.numeric, log2) %>%
map(pic, tree2)
summary(pic(log2(matchedData$GenerationLength_d), tree2)) == summary(contrasts$GenerationLength_d)
summary(pic((matchedData$GenerationLength_d), tree2)) == summary(contrasts$GenerationLength_d)
summary(pic(matchedData$GenerationLength_d), tree2) == summary(contrasts$GenerationLength_d)
summary(pic(matchedData$GenerationLength_d, tree2)) == summary(contrasts$GenerationLength_d)
summary(pic(matchedData$GenerationLength_d, tree2))
matchedData$GenerationLength_d = log2(matchedData$GenerationLength_d)
contrasts <- matchedData[, -1] %>%
#  select(GenerationLength_d, FrA, FrT, FrG, FrC) %>%
#  mutate_if(is.numeric, log2) %>%
map(pic, tree2)
summary(pic(log2(matchedData$GenerationLength_d), tree2)) == summary(contrasts$GenerationLength_d)
summary(pic(matchedData$GenerationLength_d, tree2)) == summary(contrasts$GenerationLength_d)
summary(pic(matchedData$GenerationLength_d, tree2))
summary(comparTable$data)
cor.test(contrasts$GenerationLength_d, contrasts$FrT, method= 'spearman')  # p = 0.02491, rho = -0.08810244  # PAPER
cor.test(contrasts$GenerationLength_d, contrasts$FrC, method= 'spearman')  # p = 0.02121, rho =  0.09050626  # PAPER
crunch(GenerationLength_d ~ FrT, data=comparTable)
crunch(GenerationLength_d ~ FrC, data=comparTable)
crunch(GenerationLength_d ~ FrA, data=comparTable)
cor.test(contrasts$GenerationLength_d, contrasts$FrA, method= 'spearman')  # p = 0.09415
crunch(GenerationLength_d ~ FrG, data=comparTable)
cor.test(contrasts$GenerationLength_d, contrasts$FrG, method= 'spearman')  # p = 0.06404
cor.test(contrasts$GenerationLength_d, contrasts$FrT, method= 'spearman')  # p = 0.02491, rho = -0.08810244  # PAPER
cor.test(contrasts$GenerationLength_d, contrasts$FrC, method= 'spearman')  # p = 0.02121, rho =  0.09050626  # PAPER
summary(pic(log2(matchedData$GenerationLength_d), tree2)) == summary(contrasts$GenerationLength_d)
summary(pic(matchedData$GenerationLength_d, tree2)) == summary(contrasts$GenerationLength_d)
A <- lm(scale(contrasts$GenerationLength_d) ~ contrasts$FrA + contrasts$FrT + contrasts$FrC); summary(A) # A is not significant - delete it
crunch(GenerationLength_d ~ FrT + FrC + FrA, data=comparTable)
View(comparTable)
summary(comparTable$data)
library(gridExtra) # install.packages("gridExtra")
library(grid)
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
names(SynNuc)
### make ND6 complementary:
NotND6 = SynNuc[SynNuc$Gene != 'ND6',]
ND6 = SynNuc[SynNuc$Gene == 'ND6',]
A = ND6$NeutralT
T = ND6$NeutralA
G = ND6$NeutralC
C = ND6$NeutralG
ND6$NeutralA = A
ND6$NeutralT = T
ND6$NeutralG = G
ND6$NeutralC = C
SynNuc = rbind(NotND6,ND6)
### count fraction of nucleotides
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$TAXON = SynNuc$Class
VecOfTaxa = unique(SynNuc$TAXON)
GT = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GT$Species = gsub(' ','_',GT$Scientific_name)
length(unique(GT$Species))
summary(GT$AdultBodyMass_g)     # 2        21        71    136058       614 154321304
summary(GT$GenerationLength_d)  # 129.0   624.4  1101.1  1578.8  2064.3 18980.0 # max = 18980 days => 52 years. ok
GT = GT[,c(11,13)]
summary(GT$GenerationLength_d)
############ merge (work only with mammals since GT is only for mammals)
SynNucGT = merge(GT,SynNuc)
length(unique(SynNucGT$Species))  # 649 species
table(SynNucGT$TAXON)
########### question 1: which nucleotides better correlate with GT: log2(GT) = 11 - 0.29*scale(FrT) + 0.33*scale(FrC) (in line with our mutational spectrum result that T->C correlates with generation time)
AGG = aggregate(list(SynNucGT$FrA,SynNucGT$FrT,SynNucGT$FrG,SynNucGT$FrC), by = list(SynNucGT$Species,SynNucGT$GenerationLength_d), FUN = mean)
names(AGG) = c('Species','GenerationLength_d','FrA','FrT','FrG','FrC')
library(ape)
library(pacman) # install.packages("pacman")
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
data = AGG[which(as.character(AGG$Species) %in% tree$tip.label),]
# data$GenerationLength_d = log2(data$GenerationLength_d)  # I added log of generation length
df_vec <- as.character(AGG$Species)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
data = data[-597,] # It is duplicate
row.names(data) = data$Species
tree2 <- drop.tip(tree, b)
matchedData = data[match(tree2$tip.label, data$Species),]
matchedData$GenerationLength_d = log2(matchedData$GenerationLength_d)
p_load(tibble, dplyr, magrittr, purrr, skimr)
contrasts <- matchedData[, -1] %>%
#  select(GenerationLength_d, FrA, FrT, FrG, FrC) %>%
#  mutate_if(is.numeric, log2) %>%
map(pic, tree2)
# summary(pic(log2(matchedData$GenerationLength_d), tree2)) == summary(contrasts$GenerationLength_d)
summary(pic(matchedData$GenerationLength_d, tree2)) == summary(contrasts$GenerationLength_d)
library(caper)
comparTable = comparative.data(tree2, matchedData, Species)
crunch(GenerationLength_d ~ FrT, data=comparTable)
crunch(GenerationLength_d ~ FrC, data=comparTable)
crunch(GenerationLength_d ~ FrA, data=comparTable)
crunch(GenerationLength_d ~ FrG, data=comparTable)
crunch(GenerationLength_d ~ FrT + FrC + FrA, data=comparTable) # the same for contrasts
crunch(GenerationLength_d ~ FrT + FrC + FrA, data=comparTable)
crunch(GenerationLength_d ~ FrT + FrC, data=comparTable)
crunch(scale(GenerationLength_d) ~ FrT + FrC, data=comparTable)
cor.test(contrasts$GenerationLength_d, contrasts$FrT, method= 'spearman')  # p = 0.02491, rho = -0.08810244  # PAPER
cor.test(contrasts$GenerationLength_d, contrasts$FrC, method= 'spearman')  # p = 0.02121, rho =  0.09050626  # PAPER
crunch(GenerationLength_d ~ FrT, data=comparTable)
crunch(GenerationLength_d ~ FrC, data=comparTable)
crunch(scale(GenerationLength_d) ~ scale(FrT), data=comparTable)
crunch(scale(GenerationLength_d) ~ scale(FrC), data=comparTable)
?crunch
crunch(scale(GenerationLength_d) ~ scale(FrT), data=comparTable, node.depth = 1)
crunch(scale(GenerationLength_d) ~ scale(FrT), data=comparTable, node.depth = 2)
crunch(scale(GenerationLength_d) ~ scale(FrC), data=comparTable, node.depth = 2)
### start from pairwise correlations and go to multiple linear model:
cor.test(log2(AGG$GenerationLength_d),AGG$FrA, method = 'spearman') # rho -0.2681362; p = 3.635e-12
cor.test(log2(AGG$GenerationLength_d),AGG$FrT, method = 'spearman') # rho -0.3066279; p = 1.287e-15
cor.test(log2(AGG$GenerationLength_d),AGG$FrG, method = 'spearman') # rho  0.1804395; p = 3.665e-06
cor.test(log2(AGG$GenerationLength_d),AGG$FrC, method = 'spearman') # rho  0.4717114;  p < 2.2e-16
crunch(scale(GenerationLength_d) ~ scale(FrT), data=comparTable)
crunch(scale(GenerationLength_d) ~ scale(FrC), data=comparTable)
??corPagel
??gls
library(gridExtra) # install.packages("gridExtra")
library(grid)
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
names(SynNuc)
### make ND6 complementary:
NotND6 = SynNuc[SynNuc$Gene != 'ND6',]
ND6 = SynNuc[SynNuc$Gene == 'ND6',]
A = ND6$NeutralT
T = ND6$NeutralA
G = ND6$NeutralC
C = ND6$NeutralG
ND6$NeutralA = A
ND6$NeutralT = T
ND6$NeutralG = G
ND6$NeutralC = C
SynNuc = rbind(NotND6,ND6)
### count fraction of nucleotides
SynNuc$FrA = SynNuc$NeutralA / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrT = SynNuc$NeutralT / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrG = SynNuc$NeutralG / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$FrC = SynNuc$NeutralC / (SynNuc$NeutralA + SynNuc$NeutralT + SynNuc$NeutralG + SynNuc$NeutralC)
SynNuc$TAXON = SynNuc$Class
VecOfTaxa = unique(SynNuc$TAXON)
GT = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GT$Species = gsub(' ','_',GT$Scientific_name)
length(unique(GT$Species))
summary(GT$AdultBodyMass_g)     # 2        21        71    136058       614 154321304
summary(GT$GenerationLength_d)  # 129.0   624.4  1101.1  1578.8  2064.3 18980.0 # max = 18980 days => 52 years. ok
GT = GT[,c(11,13)]
summary(GT$GenerationLength_d)
############ merge (work only with mammals since GT is only for mammals)
SynNucGT = merge(GT,SynNuc)
length(unique(SynNucGT$Species))  # 649 species
table(SynNucGT$TAXON)
########### question 1: which nucleotides better correlate with GT: log2(GT) = 11 - 0.29*scale(FrT) + 0.33*scale(FrC) (in line with our mutational spectrum result that T->C correlates with generation time)
AGG = aggregate(list(SynNucGT$FrA,SynNucGT$FrT,SynNucGT$FrG,SynNucGT$FrC), by = list(SynNucGT$Species,SynNucGT$GenerationLength_d), FUN = mean)
names(AGG) = c('Species','GenerationLength_d','FrA','FrT','FrG','FrC')
library(ape)
tree <- read.tree("../../Body/1Raw/mtalign.aln.treefile.rooted")
data = AGG[which(as.character(AGG$Species) %in% tree$tip.label),]
# data$GenerationLength_d = log2(data$GenerationLength_d)  # I added log of generation length
df_vec <- as.character(AGG$Species)
tree_vec <- tree$tip.label
a <- setdiff(df_vec, tree_vec)
b <- setdiff(tree_vec, df_vec)
data = data[-597,] # It is duplicate
row.names(data) = data$Species
tree2 <- drop.tip(tree, b)
matchedData = data[match(tree2$tip.label, data$Species),]
matchedData$GenerationLength_d = log2(matchedData$GenerationLength_d)
library(caper)
comparTable = comparative.data(tree2, matchedData, Species)
pgls(GenerationLength_d ~ FrC + FrT + FrA, comparTable, lambda = 'ML')
model = pgls(GenerationLength_d ~ FrC + FrT + FrA, comparTable, lambda = 'ML')
summary(model)
model = pgls(GenerationLength_d ~ FrC, comparTable, lambda = 'ML')
summary(model)
