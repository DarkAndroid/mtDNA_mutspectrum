panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома')
ggplot(CHOR, aes(TAXON, GenomeLength, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома, bp')
ggplot(CHOR, aes(TAXON, GCCont, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома, bp')
ggplot(CHOR, aes(TAXON, GenomeLength, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue') +
stat_summary(fun.y = 'median', geom = 'point', shape = 2, size = 3, col = 'red') +
ggplot(CHOR, aes(TAXON, GCCont, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома, bp')
ggplot(CHOR, aes(TAXON, GenomeLength, fill = 'darkred')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue') +
stat_summary(fun.y = 'median', geom = 'point', shape = 2, size = 3, col = 'red') +
ggplot(CHOR, aes(TAXON, GCCont, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома, bp')
ggplot(CHOR, aes(TAXON, GenomeLength, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue') +
stat_summary(fun.y = 'median', geom = 'point', shape = 2, size = 3, col = 'red')
ggplot(CHOR, aes(TAXON, GenomeLength, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue')
ggplot(CHOR, aes(TAXON, GCCont, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('ГЦ состав, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue')
ggplot(CHOR, aes(TAXON, GCCont, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('ГЦ состав') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue')
ggplot(CHOR, aes(TAXON, GenomeLength, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue')
ggplot(CHOR, aes(TAXON, REP.LengthOfTandemRepeats, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Суммарная длина тандемных повторов, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue')
a = CHOR[CHOR$REP.LengthOfTandemRepeats < quantile(CHOR$REP.LengthOfTandemRepeats, 0.9)]
a = CHOR[CHOR$REP.LengthOfTandemRepeats < quantile(CHOR$REP.LengthOfTandemRepeats, 0.9),]
ggplot(a, aes(TAXON, REP.LengthOfTandemRepeats, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Суммарная длина тандемных повторов, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue')
names(CHOR)
a = CHOR[CHOR$TAXON = 'Mammals',
c('REP.LengthOfTandemRepeats', 'REP.DirRepLength', 'REP.SymmRepLength', 'REP.ComplRepLength', 'InvRepLength',
'GenomeLength', 'GCCont', 'ECO.Maximum.longevity..yrs.')]
a = CHOR[CHOR$TAXON = 'Mammals',
c('REP.LengthOfTandemRepeats', 'REP.DirRepLength', 'REP.SymmRepLength', 'REP.ComplRepLength', 'InvRepLength', 'GenomeLength', 'GCCont', 'ECO.Maximum.longevity..yrs.')]
a = CHOR[CHOR$TAXON == 'Mammals', c('REP.LengthOfTandemRepeats', 'REP.DirRepLength', 'REP.SymmRepLength', 'REP.ComplRepLength', 'InvRepLength', 'GenomeLength', 'GCCont', 'ECO.Maximum.longevity..yrs.')]
a = CHOR[CHOR$TAXON == 'Mammals', c('REP.LengthOfTandemRepeats', 'REP.DirRepLength', 'REP.SymmRepLength', 'REP.ComplRepLength', 'InvRepLength', 'GenomeLength', 'GCCont', 'ECO.Maximum.longevity..yrs.')]
a = CHOR[CHOR$TAXON == 'Mammalia', c('REP.LengthOfTandemRepeats', 'REP.DirRepLength', 'REP.SymmRepLength', 'REP.ComplRepLength', 'InvRepLength', 'GenomeLength', 'GCCont', 'ECO.Maximum.longevity..yrs.')]
unique(CHOR$TAXON)
a = CHOR[CHOR$TAXON == 'Mammalia', c('REP.LengthOfTandemRepeats', 'REP.DirRepLength', 'REP.SymmRepLength', 'REP.ComplRepLength', 'REP.InvRepLength', 'GenomeLength', 'GCCont', 'ECO.Maximum.longevity..yrs.')]
heatmap(a)
heatmap(as.matrix(a))
names(a) = c('Тандемные повторы', 'Прямые повторы', 'Симметричные повторы', 'Комплементарные повторы', 'Инвертированные повторы', 'Длина Генома', 'ГЦ состав', 'Продолжительность жизни')
View(a)
cormat <- round(cor(a),2)
head(cormat)
a = a[!is.na(a$`Продолжительность жизни`,)]
a = a[!is.na(a$`Продолжительность жизни`),]
cormat <- round(cor(a),2)
head(cormat)
View(a)
install.packages("reshape2")
library(reshape2)
melted_cormat <- melt(cormat)
head(melted_cormat)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1))+
coord_fixed()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 19, hjust = 1))+
coord_fixed()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 9, hjust = 1))+
coord_fixed()
cormat <- round(cor.test(a, method = 'Spearman'),2)
cormat <- round(cor.test(a, method = 'apearman'),2)
cormat <- round(cor.test(a, method = 'spearman'),2)
?cor
cormat <- round(cor(a, method = 'spearman'),2)
head(cormat)
library(reshape2)
melted_cormat <- melt(cormat)
head(melted_cormat)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 9, hjust = 1))+
coord_fixed()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Корреляция\nСпирмана") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 9, hjust = 1))+
coord_fixed()
a = CHOR[CHOR$REP.LengthOfTandemRepeats < quantile(CHOR$REP.LengthOfTandemRepeats, 0.9),]
ggplot(a, aes(TAXON, REP.LengthOfTandemRepeats, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Суммарная длина тандемных повторов, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue')
ggplot(a, aes(TAXON, log2(REP.LengthOfTandemRepeats), fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Суммарная длина тандемных повторов, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue')
ggplot(CHOR, aes(TAXON, log2(REP.LengthOfTandemRepeats), fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Суммарная длина тандемных повторов, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue')
library(ggplot2)
CHOR = read.table('~/Alina/Kostya/ComparativeGenomics/Body/2Derived/MitGenomics.txt', header=TRUE, sep='\t')
CHOR = CHOR[CHOR$TAXON != 'AncientFish',]
ggplot(CHOR, aes(TAXON, GenomeLength, fill = 'red')) +
geom_violin() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
xlab('Таксон') + ylab('Длина генома, bp') +
stat_summary(fun.y = 'mean', geom = 'point', shape = 8, size = 3, col = 'midnightblue')
library(ape)
library(gdata)
GenLength <- read.xls("../../Body/1Raw/GenerationLengthForMammals.xlsx")
library(gdata)
GenLength <- read.xls("../../Body/1Raw/GenerationLengthForMammals.xlsx")
library(ape)
install.packages("gdata")
library(ape)
library(gdata)
GenLength <- read.xls("../../Body/1Raw/GenerationLengthForMammals.xlsx")
GenLength <- read.xls("../../Body/1Raw/GenerationLengthForMammals.xlsx")
GenLength <- read.xls("../../Body/1Raw/GenerationLengthForMammals.xlsx")
install.packages("readxl")
GenLength <- read.xls("../../Body/1Raw/GenerationLengthForMammals.xlsx")
library(readxl)
GenLength <- read_xlsx("../../Body/1Raw/GenerationLengthForMammals.xlsx")
setwd('Alina/Kostya/mtDNA_mutspectrum/Head/2Scripts/')
rm(list=ls(all=TRUE))
############ read aminoacid and codon sequences
unzip("../../Body/2Derived/AllGenesCodons.zip", exdir = "../../Body/2Derived/")
WholeGenomes = read.table("../../Body/2Derived/AllGenesCodons.csv", header = TRUE, sep = '\t')
if (file.exists("../../Body/2Derived/AllGenesCodons.csv")) file.remove("../../Body/2Derived/AllGenesCodons.csv")
Overlaps = read.table("../../Body/2Derived/cds_coords.csv", header = TRUE, sep = '\t')
Overlaps = Overlaps[order(Overlaps$species,Overlaps$start),]
VecOfSpecies = unique(Overlaps$species); length(VecOfSpecies)
for (i in 1:length(VecOfSpecies))
{ # i = 1
temp = Overlaps[Overlaps$species == as.character(VecOfSpecies[i]),]
if (nrow(temp) == 13) # if there is no 13 protein coding genes - we don't trust this annotation and suspect complete crap in the annotation
{
temp$NextStart = c(temp$start[-1],50000); temp$IfEndIsOverlapped = temp$NextStart - temp$end -1               # even the same start and end means overlap in 1: for example 50 - 50 - 1 = -1 -> overlap in one nucleotide
temp$PreviousEnd   = c(0,temp$end[-nrow(temp)]); temp$IfStartIsOverlapped = temp$start - temp$PreviousEnd - 1 # even the same start and end means overlap in 1: for example 50 - 50 - 1 = -1 -> overlap in one nucleotide
temp = temp[,grepl("species|gene|start|end|IfEndIsOverlapped|IfStartIsOverlapped",names(temp))]
if (i ==1) {OverlapFinal = temp}
if (i > 1) {OverlapFinal = rbind(OverlapFinal,temp)}
}
}
StrangeSpecies = unique(OverlapFinal[OverlapFinal$IfEndIsOverlapped < -1000 |  OverlapFinal$IfStartIsOverlapped < -1000,]$species) # Corvus_cornix_cornix
head(OverlapFinal[OverlapFinal$species %in% StrangeSpecies,],13)
VecOfAnalyzedSpecies = unique(OverlapFinal$species); length(VecOfAnalyzedSpecies)  # list of species with annotated 13 genes (no less, no more)
VecOfAnalyzedSpecies = setdiff(VecOfAnalyzedSpecies,StrangeSpecies)                # without strange ones (Corvus_cornix_cornix has a mistake in COX annotation)
#### analyses of WholeGenomes:
nrow(WholeGenomes) # 51523
WholeGenomes = WholeGenomes[WholeGenomes$Species %in% VecOfAnalyzedSpecies,]; nrow(WholeGenomes) # 50415
SpeciesTable = data.frame(table(WholeGenomes$Species))
SpeciesWithNot13 = unique(SpeciesTable[SpeciesTable$Freq != 13,]$Var1); length(SpeciesWithNot13) # 87
WholeGenomes = WholeGenomes[!WholeGenomes$Species %in% SpeciesWithNot13,]; nrow(WholeGenomes)
Final = c()
for (step in 1:nrow(WholeGenomes))
{ # step = 3
if (WholeGenomes$Quality[step] == 1)
{
species = as.character(WholeGenomes$Species[step]) # species = 'Corvus_cornix_cornix'
gene = as.character(WholeGenomes$Gene[step])       # gene = 'COX3'
StartOverlap = OverlapFinal[OverlapFinal$species == species & OverlapFinal$gene == gene,]$IfStartIsOverlapped
EndOverlap = OverlapFinal[OverlapFinal$species == species & OverlapFinal$gene == gene,]$IfEndIsOverlapped
GeneStart = OverlapFinal[OverlapFinal$species == species & OverlapFinal$gene == gene,]$start
GeneEnd = OverlapFinal[OverlapFinal$species == species & OverlapFinal$gene == gene,]$end
if (length(StartOverlap)>1) {print(paste('ACHTUNG',species,gene,sep=' '))}
if (length(EndOverlap)>1)   {print(paste('ACHTUNG',species,gene,sep=' '))}
if(StartOverlap > 0) {CodonsToDeleteInTheBeginning = 0}
if(EndOverlap > 0) {CodonsToDeleteAtTheEnd = 0}
if(StartOverlap < 0) {CodonsToDeleteInTheBeginning = round(0.5 + StartOverlap*(-1)/3)}  # add 0.5 in order to round towars bigget integer
if(EndOverlap < 0)   {CodonsToDeleteAtTheEnd =  round(0.5 + EndOverlap*(-1)/3)}               # add 0.5 in order to round towars bigget integer
############ translate codons to aminoacids
### make triplets
Codons = as.character(WholeGenomes$Codons[step])
AminoSeq = as.character(WholeGenomes$ModifiedAmino[step])
AminoSeqVec = unlist(strsplit(AminoSeq,''))
CodonsVec = unlist(strsplit(Codons,''))
StartNuc = 1
CodonsVec1 = c()
# if length(CodonsVec)/3 == integer
for (i in 1:(length(CodonsVec)/3))
{
CodonsVec1 = c(CodonsVec1,paste(CodonsVec[StartNuc : (StartNuc+2)],collapse = ''))
StartNuc = StartNuc+3
}
### trim AminoSeqVec and CodonsVec1 if there is an overlap (at the end or at the beginning)
CodonsVec1 = CodonsVec1[1:(length(CodonsVec1) - CodonsToDeleteAtTheEnd)]
AminoSeqVec = AminoSeqVec[1:(length(AminoSeqVec) - CodonsToDeleteAtTheEnd)]
if (CodonsToDeleteInTheBeginning > 0)
{
CodonsVec1 = CodonsVec1[-c(1:CodonsToDeleteInTheBeginning)]
AminoSeqVec = AminoSeqVec[-c(1:CodonsToDeleteInTheBeginning)]
}
# warnings() : In 1:(length(CodonsVec1) - CodonsToDeleteAtTheEnd) :   numerical expression has 2 elements: only the first used
# warnings() : In 1:(length(AminoSeqVec) - CodonsToDeleteAtTheEnd) :  numerical expression has 2 elements: only the first used
# warnings() : In rbind(Final, Line) : number of columns of result is not a multiple of vector length (arg 2)
TranslationalTest = data.frame(CodonsVec1,AminoSeqVec)
### translate them
Temp = as.character(TranslationalTest$CodonsVec1)
Temp = gsub("TTT|TTC",'F',Temp)
Temp = gsub("TTA|TTG|CTT|CTC|CTA|CTG",'L',Temp)
Temp = gsub("ATT|ATC",'I',Temp)
Temp = gsub("ATG|ATA",'M',Temp)
Temp = gsub("GTT|GTC|GTA|GTG",'V',Temp)
Temp = gsub("TCT|TCC|TCA|TCG|AGT|AGC",'S',Temp)
Temp = gsub("CCT|CCC|CCA|CCG",'P',Temp)
Temp = gsub("ACT|ACC|ACA|ACG",'T',Temp)
Temp = gsub("GCT|GCC|GCA|GCG",'A',Temp)
Temp = gsub("TAT|TAC",'Y',Temp)
Temp = gsub("AGA|AGG|TAA|TAG",'*',Temp)
Temp = gsub("CAT|CAC",'H',Temp)
Temp = gsub("CAA|CAG",'Q',Temp)
Temp = gsub("AAT|AAC",'N',Temp)
Temp = gsub("AAA|AAG",'K',Temp)
Temp = gsub("GAT|GAC",'D',Temp)
Temp = gsub("GAA|GAG",'E',Temp)
Temp = gsub("TGT|TGC",'C',Temp)
Temp = gsub("TGG|TGA",'W',Temp)
Temp = gsub("CGT|CGC|CGA|CGG",'R',Temp)
Temp = gsub("GGT|GGC|GGA|GGG",'G',Temp)
TranslationalTest$TranslatedAa = Temp
if (nrow(TranslationalTest[TranslationalTest$TranslatedAa != TranslationalTest$AminoSeqVec,]) == 0) # should be zero
{
VecOfAllCodons = c('TTT','TTC','TTA','TTG','CTT','CTC','CTA','CTG','ATT','ATC','ATG','ATA','GTT','GTC','GTA','GTG','TCT','TCC','TCA','TCG','AGT','AGC','CCT','CCC','CCA','CCG','ACT','ACC','ACA','ACG','GCT','GCC','GCA','GCG','TAT','TAC','AGA','AGG','TAA','TAG','CAT','CAC','CAA','CAG','AAT','AAC','AAA','AAG','GAT','GAC','GAA','GAG','TGT','TGC','TGG','TGA','CGT','CGC','CGA','CGG','GGT','GGC','GGA','GGG')
CodonUsage = c(VecOfAllCodons,as.character(TranslationalTest$CodonsVec1))  # concatenate out 64 codons with everything that we have in real sequence
CU = data.frame(table(CodonUsage)); CU$Freq = CU$Freq-1  # delete one because we used the whole length of all 64 codons before -> will transform to zero
NamesOfCodons = as.character(CU$CodonUsage)
Line = c(species, gene, GeneStart, GeneEnd, CodonsToDeleteInTheBeginning, CodonsToDeleteAtTheEnd, paste(AminoSeqVec,collapse=''), paste(CodonsVec1,collapse=''), CU$Freq)
Final = rbind(Final,Line)
}
}
}
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")){file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
names(SynNuc)
View(SynNuc)
rm(list=ls(all=TRUE))
############ Syn mut
unzip("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")){file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")}
names(SynNuc)
a = SynNuc[!(SynNuc$Gene %in% c('ND1', 'ND2', 'ND6')),]
View(a)
SynNuc = SynNuc[!(SynNuc$Gene %in% c('ND1', 'ND2', 'ND6')),]
VecOfSynFourFoldDegenerateSites <- c('CTT', 'CTC', 'CTA', 'CTG',
'GTT', 'GTC', 'GTA', 'GTG',
'TCT', 'TCC', 'TCA', 'TCG',
'CCT', 'CCC', 'CCA', 'CCG',
'ACT', 'ACC', 'ACA', 'ACG',
'GCT', 'GCC', 'GCA', 'GCG',
'CGT', 'CGC', 'CGA', 'CGG',
'GGT', 'GGC', 'GGA', 'GGG')
one_line = c()
i = 1
# i = 1
species = SynNuc[i, 'Species']
# i = 1
species = as.character(SynNuc[i, 'Species'])
library(seqinr)
a = as.character(SynNuc[1, ]$CodonsNoOverlap)
codonsVec = splitseq(a)
codonsVec = splitseq(a, 0)
?splitseq
codonsVec = splitseq(s2c(a))
codons4f = codonsVec %in% VecOfSynFourFoldDegenerateSites
codons4f = codonsVec[codonsVec %in% VecOfSynFourFoldDegenerateSites]
thirdPosVec = gsub("CTA|GTA|TCA|CCA|ACA|GCA|CGA|GGA", 'A', codons4f)
thirdPosVec = gsub("CTT|GTT|TCT|CCT|ACT|GCT|CGT|GGT", 'T', thirdPosVec)
thirdPosVec = gsub("CTG|GTG|TCG|CCG|ACG|GCG|CGG|GGG", 'G', thirdPosVec)
thirdPosVec = gsub("CTC|GTC|TCC|CCC|ACC|GCC|CGC|GGC", 'C', thirdPosVec)
table(thirdPosVec)
thirdPosVec = paste(thirdPosVec, '')
thirdPosList = gsub("CTA|GTA|TCA|CCA|ACA|GCA|CGA|GGA", 'A', codons4f)
thirdPosList = gsub("CTT|GTT|TCT|CCT|ACT|GCT|CGT|GGT", 'T', thirdPosList)
thirdPosList = gsub("CTG|GTG|TCG|CCG|ACG|GCG|CGG|GGG", 'G', thirdPosList)
thirdPosList = gsub("CTC|GTC|TCC|CCC|ACC|GCC|CGC|GGC", 'C', thirdPosList)
?paste
thirdPosVec = paste(thirdPosList, '')
thirdPosVec = paste(as.vector(thirdPosList), '')
as.vector(thirdPosList)
thirdPosVec = paste(as.vector(thirdPosList), collapse = '')
table(thirdPosVec)
length(thirdPosVec)
length(thirdPosVec[1])
str(thirdPosVec)
length(thirdPosVec)
nchar(thirdPosVec)
getVecOfThirdNucleotides4f = function(x){
codonsVec = splitseq(s2c(a))
codons4f = codonsVec[codonsVec %in% VecOfSynFourFoldDegenerateSites]
thirdPosList = gsub("CTA|GTA|TCA|CCA|ACA|GCA|CGA|GGA", 'A', codons4f)
thirdPosList = gsub("CTT|GTT|TCT|CCT|ACT|GCT|CGT|GGT", 'T', thirdPosList)
thirdPosList = gsub("CTG|GTG|TCG|CCG|ACG|GCG|CGG|GGG", 'G', thirdPosList)
thirdPosList = gsub("CTC|GTC|TCC|CCC|ACC|GCC|CGC|GGC", 'C', thirdPosList)
thirdPosVec = paste(as.vector(thirdPosList), collapse = '')
return(thirdPosVec)
}
SynNuc$ThirdPos4f = lapply(as.character(SynNuc$CodonsNoOverlap), getVecOfThirdNucleotides4f)
?lapply
getVecOfThirdNucleotides4f = function(x){
codonsVec = splitseq(s2c(x))
codons4f = codonsVec[codonsVec %in% VecOfSynFourFoldDegenerateSites]
thirdPosList = gsub("CTA|GTA|TCA|CCA|ACA|GCA|CGA|GGA", 'A', codons4f)
thirdPosList = gsub("CTT|GTT|TCT|CCT|ACT|GCT|CGT|GGT", 'T', thirdPosList)
thirdPosList = gsub("CTG|GTG|TCG|CCG|ACG|GCG|CGG|GGG", 'G', thirdPosList)
thirdPosList = gsub("CTC|GTC|TCC|CCC|ACC|GCC|CGC|GGC", 'C', thirdPosList)
thirdPosVec = paste(as.vector(thirdPosList), collapse = '')
return(thirdPosVec)
}
SynNuc$ThirdPos4f = lapply(as.character(SynNuc$CodonsNoOverlap), getVecOfThirdNucleotides4f)
SynNuc[2,]$CodonsNoOverlap
VecOfSynFourFoldDegenerateSites
splitseq(s2c(as.character(SynNuc[2,]$CodonsNoOverlap)))
GT = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GT$Species = gsub(' ','_',GT$Scientific_name)
GT = GT[,c(11,13)]
summary(GT$GenerationLength_d)
shortGT = GT[GT$GenerationLength_d == min(GT$GenerationLength_d), 'Species']
shortestGT = GT[GT$GenerationLength_d == min(GT$GenerationLength_d), 'Species']
longestGT = GT[GT$GenerationLength_d == max(GT$GenerationLength_d), 'Species']
a = SynNuc[SynNuc$Species == shortestGT,]
View(SynNuc)
M = merge(SynNuc, GT, by ='Species')
M = merge(SynNuc, GT, by ='Species', all.x = TRUE)
View(M)
M[is.na(M$Gene),]
shortestGT = M[M$GenerationLength_d == min(M$GenerationLength_d),]
View(shortestGT)
M[M$GenerationLength_d == min(M$GenerationLength_d),]
min(M$GenerationLength_d)
View(M)
min(M$GenerationLength_d)
summary(M$GenerationLength_d)
min(M$GenerationLength_d)
M = merge(SynNuc, GT, by ='Species')
shortestGT = M[M$GenerationLength_d == min(M$GenerationLength_d),]
View(shortestGT)
longestGT = M[M$GenerationLength_d == max(M$GenerationLength_d),]
View(longestGT)
M$Gene =  ordered(M$Gene, levels = c('COX1','COX2','ATP8','ATP6','COX3','ND3','ND4L','ND4','ND5','CytB'))
M = M[order(M$Gene),]
View(M)
shortestGT = M[M$GenerationLength_d == min(M$GenerationLength_d),]
longestGT = M[M$GenerationLength_d == max(M$GenerationLength_d),]
View(shortestGT)
a = paste(shortestGT$ThirdPos4f, '')
a
a = paste(shortestGT$ThirdPos4f, collapse = '')
a
shortGlVec4f = paste(shortestGT$ThirdPos4f, collapse = '')
longGlVec4f = paste(longestGT$ThirdPos4f, collapse = '')
View(longestGT)
a = splitseq(s2c(shortestGT), word = 10)
a = splitseq(s2c(shortGlVec4f), word = 10)
b = apply(a, count('A'))
b = apply(a, FUN=count('A'))
count()
?count
b = apply(a, FUN=count('A', wordsize = 1))
b = apply(a, table)
nuclCount = function(char, seq){
cnt = nchar(as.character(seq)) - nchar(gsub(char, "", seq))
}
aCount = apply(a, nuclCount)
aCount = apply(a, FUN=nuclCount)
aCount = apply(a, FUN=nuclCount('A', a))
nuclCount = function(char, seq){
cnt = nchar(as.character(seq)) - nchar(gsub(char, "", seq))
return(cnt)
}
aCount = apply(a, FUN=nuclCount('A', a))
nuclCount('A', 'ATGCA')
nuclCount = function(seq, char){
cnt = nchar(as.character(seq)) - nchar(gsub(char, "", seq))
return(cnt)
}
nuclCount('A', 'ATGCA')
aCount = apply(a, FUN=nuclCount('A'))
aCount = apply(a, FUN=nuclCount(a, 'A'))
aCount = lapply(a, FUN=nuclCount(a, 'A'))
aCount = sapply(a, FUN=nuclCount(a, 'A'))
aCount = apply(a, nuclCount, 'A')
aCount = apply(a, nuclCount, char = 'A')
aCount = sapply(a, nuclCount, char='A')
shortSeq = splitseq(s2c(shortGlVec4f), word = 10)
longSeq = splitseq(s2c(longGlVec4f), word = 10)
aCount = sapply(shortSeq, nuclCount, char='A')
gCount = sapply(shortSeq, nuclCount, char='G')
hist(aCount)
1:length(aCount)
plot(1:length(aCount), aCount)
plot(1:length(gCount), gCount)
shortSeq = splitseq(s2c(shortGlVec4f), word = 20)
longSeq = splitseq(s2c(longGlVec4f), word = 20)
aCount = sapply(shortSeq, nuclCount, char='A')
gCount = sapply(shortSeq, nuclCount, char='G')
plot(1:length(aCount), aCount)
plot(1:length(gCount), gCount)
pdf('../../Body/4Figures/WholeGenomeAnalyses.NoOverlapAgAlongGenome.pdf')
plot(1:length(aCount), aCount)
plot(1:length(gCount), gCount)
dev.off()
nchar(shortestGT$ThirdPos4f)
sum(nchar(shortestGT$ThirdPos4f))
aCount = sapply(shortSeq, nuclCount, char='T')
tCount = sapply(shortSeq, nuclCount, char='T')
cCount = sapply(shortSeq, nuclCount, char='C')
shortSeq = splitseq(s2c(shortGlVec4f), word = 20)
tCount = sapply(shortSeq, nuclCount, char='T')
cCount = sapply(shortSeq, nuclCount, char='C')
plot(1:length(tCount), tCount)
plot(1:length(cCount), cCount)
pdf('../../Body/4Figures/WholeGenomeAnalyses.NoOverlapAgAlongGenome.pdf')
plot(1:length(tCount), tCount)
plot(1:length(cCount), cCount)
dev.off()
